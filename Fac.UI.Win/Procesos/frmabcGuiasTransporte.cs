using System;
using System.Threading;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Telerik.WinControls;
using Inv.BusinessLogic;
using Inv.BusinessEntities;
using Telerik.WinControls.UI;
using System.Net;
using System.IO;
using Newtonsoft.Json;
using System.Xml;
using System.Linq;
namespace Fac.UI.Win
{
    public partial class fabcGuiasTransporte : frmBaseReg
    {
        public string codigoGuia = "";
        bool esVista = true;
        public int indice;

        private bool cargoCabecera = false;
        private bool cargoDetalle = false;

        private string esFlagProveedorDeisi = "";
        /*variable para enviar desde de Guia Tranporte a detalle Guia para Grabar o actualizar*/
        public static int valProveedor { get; set; }
        public static string rucdestino { get; set; }
        public static string tipoarticulo { get; set; }
        public static string tipdoc { get; set; }
        public static string nrodoc { get; set; }
        public static string nroserie { get; set; }
        CommandBarStripElement menu;
        RadCommandBarBaseItem cbbNuevo;
        RadCommandBarBaseItem cbbGrabar;
        RadCommandBarBaseItem cbbVistaPrevia;
        RadCommandBarBaseItem cbbModificarPeso;
        RadCommandBarBaseItem cbbImprimir;
        static int ultimaFila = 0, ultimacelda = 0;
        /*Constructo de Guia de tranposte*/
        public fabcGuiasTransporte()
        {
            InitializeComponent();

            //gestionarBotones(true, true, true, false, false, false, false, true, false, true);            
            //barGuardaCancel.Visibility = ElementVisibility.Collapsed;
            //barOtros.Visibility = ElementVisibility.Collapsed;
        }
        //RadGridView _grid = frmGuiaTransportista.Instancia().gridControl; 
        private frmGuiaTransportista form { get; set; }
        private frmGuiaTransportista FormInstace
        {
            get
            {
                if (form == null)
                {
                    form = new frmGuiaTransportista();
                    form.MdiParent = this;
                }

                return form;
            }
        }
        private frmGuiaTransportista FrmParent { get; set; }
        GuiaTransporte _guia = new GuiaTransporte();
        private static fabcGuiasTransporte _aForm;

        public fabcGuiasTransporte(frmGuiaTransportista padre)
        {
            InitializeComponent();
            creaColumnas();
            menu = radCommandBar1.CommandBarElement.Rows[0].Strips[0];
            cbbNuevo = menu.Items["cbbNuevo"];
            cbbGrabar = menu.Items["cbbGuardar"];
            cbbVistaPrevia = menu.Items["cbbVistaPrevia"];
            cbbImprimir = menu.Items["cbbImprimir"];

            FrmParent = padre;

            // ================================================ Asignar configueracion de navegacion . ======================================================
            Util.ConfigGridToEnterNavigation(gridControl);
            // ================================================ Asignar configueracion de seleccion    ======================================================
            Util.seleccionatFilaCompleta(gridControl);
        }

        void enfocarRegistros()
        {
            FrmParent.gridControl.MasterView.Rows[indice].IsCurrent = true;
            FrmParent.gridControl.MasterView.Rows[indice].IsSelected = true;
        }
        public static fabcGuiasTransporte Instance(frmGuiaTransportista formParent)
        {
            if (_aForm != null) return new fabcGuiasTransporte(formParent);
            _aForm = new fabcGuiasTransporte(formParent);
            return _aForm;
        }
        public static fabcGuiasTransporte instancia()
        {
            return _aForm;
        }
        #region "Agregar y quitar item"
        void cmdHelp_Click(int Index)
        {
            try
            {
                int flagpariprov = Index;
                string opcionarti;
                if (flagpariprov == 1)
                {

                    opcionarti = "PROV" + fabcGuiasTransporte.rucdestino;
                }
                else
                {
                    //opcionarti = Fac_GuiaTransporteLogic.Instance.Dame_Descripcion("13",

                    string tipo = fabcGuiasTransporte.tipoarticulo;
                    string salida = string.Empty;

                    Fac_GuiaTransporteLogic.Instance.Dame_Descripcion("13" + tipo, "GLODESCCOM", out salida);
                    opcionarti = salida;
                }

                //chelp = "";
                frmBusqueda frm;
                object xobjeto = (object)opcionarti;
                //busqueda de produco sin validacion codigo de proveedor
                if (Index == 0)
                {
                    frm = new frmBusqueda(enmAyuda.enmBuscaArti, xobjeto);
                    frm.ShowDialog();
                    if (frm.Result != null)
                        //DetalleGuiaTransporte
                        gridControl.CurrentRow.Cells[0].Value = ((DetalleGuiaTransporte)frm.Result).FAC35CODPROD;
                    gridControl.CurrentRow.Cells[1].Value = ((DetalleGuiaTransporte)frm.Result).FAC35DESCPROD;

                }
                //busqueda de produco con validacion codigo de proveedor
                else
                {
                    frm = new frmBusqueda(enmAyuda.enmBuscaArtiProv, xobjeto);
                    frm.ShowDialog();
                }
            }
            catch (Exception ex)
            {

            }

        }


        private void AgregarFila()
        {

            try
            {
                // Validar si la cabecera fue guardado
                if (txtserie.Enabled == true)
                {
                    MessageBox.Show("Debe terminar el proceso de cabecera para agregar articulos al detalle del documento", "Sistema",
                        MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
                    return;
                }
                // Validar si la fila agregado culmino la operaciond e grabar o actualizaar
                if (gridControl.Rows.Count > 0)
                {
                    //Validar si la fial actual esta en modo insertar o editar
                    if (gridControl.CurrentRow.Cells["Flag"].Value != null)
                    {
                        Util.ShowAlert("Debe completar el registro actual");
                        return;
                    }
                }

                gridControl.Rows.AddNew();
                GridViewRowInfo row = this.gridControl.CurrentRow;
                // Fila nuevo                

                Util.SetValueCurrentCellText(row, "flagBotones", "E");
                Util.SetValueCurrentCellText(row, "Flag", "0");


                //Nueva fila

                Util.ResaltarAyuda(gridControl, "FAC35UNIMED");
                Util.ResaltarAyuda(gridControl, "FAC35CODPROD");

                Util.SetCellGridFocus(gridControl, "FAC35CODPROD");
            }
            catch (Exception ex)
            {
                Util.ShowError(ex.Message);
            }
        }
        private void AgregarFilaReferencial()
        {
            try
            {
                // Validar si la cabecera fue guardado
                if (txtserie.Enabled == true)
                {
                    MessageBox.Show("Debe terminar el proceso de cabecera para agregar articulos al detalle del documento", "Sistema",
                        MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
                    return;
                }
                // Validar si la fila agregado culmino la operaciond e grabar o actualizaar
                //if (gridControl.Rows.Count > 0)
                //{
                //    //Validar si la fial actual esta en modo insertar o editar
                //    if (gridControl.CurrentRow.Cells["Flag"].Value != null)
                //    {
                //        Util.ShowAlert("Debe completar el registro actual");
                //        return;
                //    }
                //}
                gridreferencial.Rows.AddNew();

                GridViewRowInfo row = this.gridreferencial.CurrentRow;
                //// Fila nuevo                

                Util.SetValueCurrentCellText(row, "flagBotones", "E");
                Util.SetValueCurrentCellText(row, "Flag", "0");


                ////Nueva fila

                Util.ResaltarAyuda(gridreferencial, "FAC90COD");
                //Util.ResaltarAyuda(gridreferencial, "Nro Comprobante");

                //Util.SetCellGridFocus(gridreferencial, "Fecha Emision");
            }
            catch (Exception ex)
            {
                Util.ShowError(ex.Message);
            }
        }
        private int HasRowToSave()
        {
            int rowsaffected = 0;

            foreach (GridViewRowInfo row in gridControl.Rows)
            {
                if (Util.GetCurrentCellText(row, "flagBotones") == "E")
                    rowsaffected++;
            }
            return rowsaffected;
        }
        protected override void OnEliminar()
        {
            string msj = string.Empty;
            int flag = 1;
            DialogResult respuesta = MessageBox.Show("Desea eliminar el documento", "Sistema", MessageBoxButtons.YesNo,
                MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button2);
            string tipdoc = _guia.FAC01COD;
            string numerodoc = _guia.FAC34NROGUIA;
            if (respuesta == System.Windows.Forms.DialogResult.Yes)
            {

                Fac_GuiaTransporteLogic.Instance.Spu_Fact_Del_FAC34_GUIAREMISION(Logueo.CodigoEmpresa,
                    tipdoc, numerodoc, out flag, out msj);
                MessageBox.Show(msj, "Sistema", MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1);
                if (flag == 1)
                {
                    FrmParent.Oncargar();

                    this.Close();
                }
            }
        }
        private void EditarDetalle()
        {
            if (HasRowToSave() > 0) { Util.ShowAlert("Debe completar registro"); return; }
            Util.SetValueCurrentCellText(gridControl, "Flag", "1");
            this.gridControl.CurrentRow.Cells["flagBotones"].Value = "E";
            Util.ResaltarAyuda(gridControl, "FAC35CODPROD");
            this.gridControl.CurrentColumn = this.gridControl.Columns["FAC09CTA"];

            //Enfocar la celda a trabajar
            //this.gridControl.CurrentColumn = this.gridControl.Columns["FAC09CTA"];
        }
        private void EliminarDetalle()
        {
            if (this.gridControl.RowCount == 0)
                return;
            DialogResult dialog = RadMessageBox.Show("Está seguro de eliminar Item seleccionado?", "Aviso",
                    MessageBoxButtons.YesNo, RadMessageIcon.Question);
            if (dialog == System.Windows.Forms.DialogResult.No)
                return;
            try
            {
                GridViewRowInfo rowInfo = this.gridControl.CurrentRow;
                if (Convert.ToInt32(rowInfo.Cells["FAC35CODGUIADET"].Value) > 0)
                {

                    tipdoc = txttipdoc.Text;
                    nrodoc = txtserie.Text + "-" + txtnrodocumento.Text;
                    int correlativo = Convert.ToInt32(rowInfo.Cells["FAC35CODGUIADET"].Value);
                    string salida = string.Empty; int iFlag = 0;
                    Fac_GuiaTransporteLogic.Instance.Spu_Fact_Del_FAC35_DETGUIA(Logueo.CodigoEmpresa, tipdoc, nrodoc, correlativo,
                     out iFlag, out salida);
                    Util.ShowMessage(salida, iFlag);
                    if (iFlag == 1)
                        Actualizar_CantidadUnidadMedida(nrodoc);
                    cargarGuiaGrilla();
                }
                //gridControl.Rows.Remove(this.gridControl.CurrentRow);
                btnAgregar.Visible = true;
            }
            catch (Exception ex)
            {
                Util.ShowError(ex.Message);
            }

        }
        private void btnAgregar_Click(object sender, EventArgs e)
        {

            AgregarFila();
        }

        private void btnRemover_Click(object sender, EventArgs e)
        {
            EliminarDetalle();
        }
        private void btnAgregarDetPacking_Click(object sender, EventArgs e)
        {
            CargarAyudaPackingConsumible();
        }

        #endregion
        #region metodos de Botones
        protected override void OnNuevo()
        {
            Estado = FormEstate.New;
            txtsubplantilla.Focus();
            //Estado = FormEstate.New;
            habilitarControles(true);
            iniciaControles(this);
            //save,cancel,preview,print,import,export,navigate
            //HabilitarBotones(true, true, false, false, false, false, false);
            OcultarBotones();
            HabilitaBotonPorNombre(BaseRegBotones.cbbGuardar);
            HabilitaBotonPorNombre(BaseRegBotones.cbbCancelar);


            txtsubplantilla.Focus();
            txtotros.Enabled = false;
            btnAgregar.Enabled = false;
            // btnAgregarDetPacking.Visible = false;
            btnRemover.Enabled = false;
            
            //Campos proveedor
            txtCodigoProv.Enabled = true;
            txtRazonSoProv.Enabled = true;
            txtDomiProv.Enabled = true;
            //End Campos Proveedor

        }
        protected override void OnCancelar()
        {
            Estado = FormEstate.View;
            habilitarControles(false);
            cargarGuia();
            this.Close();

        }

        protected override void OnEditar()
        {
            try
            {
                btnAgregarReferencial.Visible = true;
                //Grilla parte baja - Enabled false
                txtCantidad.Enabled = false;
                txtUnidadMed.Enabled = false;
                //txtnrodocumento.Enabled = false;
                Estado = FormEstate.Edit;
                habilitarControles(true);
                // no se puede editar , porqure es llave
                txtnrodocumento.Enabled = false;
                txtsubplantilla.Enabled = false;
                btnAgregar.Enabled = true;
                //HabilitarBotones(true, true, true, true, false, false, false);
                OcultarBotones();

                //Datos Proveedor
                txtCodigoProv.Enabled = true;
                txtRazonSoProv.Enabled = true;
                txtDomiProv.Enabled = true;
                //END PROVEEDOR

                HabilitaBotonPorNombre(BaseRegBotones.cbbGuardar);
                HabilitaBotonPorNombre(BaseRegBotones.cbbCancelar);
                //HabilitaBotonPorNombre(BaseRegBotones.cbbVistaPreliminar);
                //HabilitaBotonPorNombre(BaseRegBotones.cbbImprimir);

                //HabilitaBotonPorNombre(BaseRegBotones.cbbDarBaja);

                foreach (Control ctrl in this.Controls)
                {
                    if (ctrl is RadTextBox || ctrl is TextBox)
                    {
                        //MODIFICADO 
                        ctrl.Enabled = false;
                    }
                }

                panelCabecera.TabIndex = 7;
                panelOrigen.TabIndex = 0;
                chkTrasladoM1oL.Enabled = true;
                rbtPrivado.Enabled = true;
                rbtPublico.Enabled = true;
                foreach (GridViewRowInfo row in gridControl.Rows)
                {
                    row.IsSelected = true;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR::" + ex.Message.ToString());
            }
        }
        private void OnVer()
        {
            Estado = FormEstate.View;
            habilitarControles(false);
            txtplacaremolque.Enabled = false;
            //save,cancel,preview,print,impor,export,bind
            OcultarBotones();
            //HabilitaBotonPorNombre(BaseRegBotones.cbbVistaPrevia);
            HabilitaBotonPorNombre(BaseRegBotones.cbbImprimir);
            HabilitaBotonPorNombre(BaseRegBotones.cbbNavegacion);
            HabilitaBotonPorNombre(BaseRegBotones.cbbCancelar);
            HabilitaBotonPorNombre(BaseRegBotones.cbbGenerarFE);
            HabilitaBotonPorNombre(BaseRegBotones.cbbVerFE);
            HabilitaBotonPorNombre(BaseRegBotones.cbbDarBaja);
            HabilitaBotonPorNombre(BaseRegBotones.cbbDarBajaFE);
            HabilitaBotonPorNombre(BaseRegBotones.cbbDarBajaFE);
            // btnAgregarDetPacking.Visible = false;

            //HabilitarBotones(false, false, true, true, false, false, true);                    
        }
        protected override void OnGenerarFE()
        {
            //base.OnGenerarFE();
            try
            {

                Cursor.Current = Cursors.WaitCursor;
                GridViewRowInfo row = FrmParent.gridControl.CurrentRow;
                string EstadoSUNAT = Util.GetCurrentCellText(row, "GuiaElecEstadoSunat");
                string EnvioGuia = Util.GetCurrentCellText(row, "GuiaElecEstadoEnvioaSUNAT");
                //if (EstadoSUNAT != "" && EnvioGuia != "")
                //{
                //    Util.ShowAlert("ERROR :: La guia ya ha sido enviada");
                //    return;
                //}
                GenerarGuiaElectronica();
                FrmParent.Oncargar();
            }
            catch (Exception ex)
            {
                Util.ShowError(ex.Message);
                Cursor.Current = Cursors.Default;
            }

            //Cursor.Current = Cursors.Default;
        }
        protected override void OnVerFE()
        {

            GET_PDF();

        }
        //CLASES DE JSON 
        //CLASES DE JSON 
        #region EFACT_PRUEBA
        public class AdditionalDocumentReference
        {
            public List<IDOnly> ID { get; set; }
            public List<DocumentTypeCode> DocumentTypeCode { get; set; }
            public List<DocumentType> DocumentType { get; set; }
            public List<IssuerParty> IssuerParty { get; set; }
        }

        public class AddressLine
        {
            public List<Line> Line { get; set; }
        }

        public class CityName
        {
            public string _ { get; set; }
        }

        public class CitySubdivisionName
        {
            public string _ { get; set; }
        }

        public class Contact
        {
            public List<ElectronicMail> ElectronicMail { get; set; }
        }

        public class Country
        {
            public List<IdentificationCode> IdentificationCode { get; set; }
        }

        public class CountrySubentity
        {
            public string _ { get; set; }
        }

        public class CustomizationID
        {
            public string _ { get; set; }
        }

        public class DeliveredQuantity
        {
            public string _ { get; set; }
            public string unitCode { get; set; }
        }

        public class Delivery
        {
            public List<DeliveryAddress> DeliveryAddress { get; set; }
            public List<Despatch> Despatch { get; set; }
        }

        public class DeliveryAddress
        {
            public List<IDOnly> ID { get; set; }
            public List<AddressTypeCode> AddressTypeCode { get; set; }
            public List<CitySubdivisionName> CitySubdivisionName { get; set; }
            public List<CityName> CityName { get; set; }
            public List<CountrySubentity> CountrySubentity { get; set; }
            public List<District> District { get; set; }
            public List<AddressLine> AddressLine { get; set; }
            public List<Country> Country { get; set; }
        }

        public class DeliveryCustomerParty
        {
            public List<Party> Party { get; set; }
        }

        public class Description
        {
            public string _ { get; set; }
        }

        public class Despatch
        {
            public List<DespatchAddress_IDOnly> DespatchAddress { get; set; }
            public List<DespatchParty> DespatchParty { get; set; }

        }
        public class DespatchParty
        {
            public List<AgentParty> AgentParty { get; set; }
        }
        public class DespatchAddress
        {
            public List<ID> ID { get; set; }
            public List<CitySubdivisionName> CitySubdivisionName { get; set; }
            public List<CityName> CityName { get; set; }
            public List<CountrySubentity> CountrySubentity { get; set; }
            public List<District> District { get; set; }
            public List<AddressLine> AddressLine { get; set; }
            public List<Country> Country { get; set; }
        }
        public class DespatchAddress_IDOnly
        {
            public List<IDOnly> ID { get; set; }
            public List<AddressTypeCode> AddressTypeCode { get; set; }
            public List<CitySubdivisionName> CitySubdivisionName { get; set; }
            public List<CityName> CityName { get; set; }
            public List<CountrySubentity> CountrySubentity { get; set; }
            public List<District> District { get; set; }
            public List<AddressLine> AddressLine { get; set; }
            public List<Country> Country { get; set; }
        }
        public class AddressTypeCode
        {
            public string _ { get; set; }
            public string listID { get; set; }
        }
        public class DespatchAdvice
        {
            public List<UBLVersionID> UBLVersionID { get; set; }
            public List<CustomizationID> CustomizationID { get; set; }
            public List<IDOnly> ID { get; set; }
            public List<IssueDate> IssueDate { get; set; }
            public List<IssueTime> IssueTime { get; set; }
            public List<DespatchAdviceTypeCode> DespatchAdviceTypeCode { get; set; }
            public List<Note> Note { get; set; }
            public List<LineCountNumeric> LineCountNumeric { get; set; }
            public List<AdditionalDocumentReference> AdditionalDocumentReference { get; set; }
            public List<Signature> Signature { get; set; }
            public List<DespatchSupplierParty> DespatchSupplierParty { get; set; }
            public List<DeliveryCustomerParty> DeliveryCustomerParty { get; set; }
            public List<BuyerCustomerParty> BuyerCustomerParty { get; set; }
            public List<SellerSupplierParty> SellerSupplierParty { get; set; }
            public List<Shipment> Shipment { get; set; }
            public List<DespatchLine> DespatchLine { get; set; }
        }
        public class BuyerCustomerParty
        {
            public List<Party> Party { get; set; }
        }
        public class SellerSupplierParty
        {
            public List<Party> Party { get; set; }
        }
        public class DespatchAdviceTypeCode
        {
            public string _ { get; set; }
        }

        public class DespatchLine
        {
            public List<IDOnly> ID { get; set; }
            public List<Note> Note { get; set; }
            public List<DeliveredQuantity> DeliveredQuantity { get; set; }
            public List<OrderLineReference> OrderLineReference { get; set; }
            public List<Item> Item { get; set; }
        }

        public class DespatchSupplierParty
        {
            public List<Party_IDOnly> Party { get; set; }
        }

        public class DigitalSignatureAttachment
        {
            public List<ExternalReference> ExternalReference { get; set; }
        }

        public class District
        {
            public string _ { get; set; }
        }

        public class DocumentType
        {
            public string _ { get; set; }
        }

        public class DocumentTypeCode
        {
            public string _ { get; set; }
        }

        public class DriverPerson
        {
            public List<ID> ID { get; set; }
            public List<FirstName> FirstName { get; set; }
            public List<FamilyName> FamilyName { get; set; }
            public List<JobTitle> JobTitle { get; set; }
            public List<IdentityDocumentReference> IdentityDocumentReference { get; set; }
        }
        public class DriverPerson1
        {
            public List<ID> ID { get; set; }
            public List<FirstName> FirstName { get; set; }
            public List<FamilyName> FamilyName { get; set; }
            public List<JobTitle> JobTitle { get; set; }
            public List<IdentityDocumentReference> IdentityDocumentReference { get; set; }
        }
        public class ElectronicMail
        {
            public string _ { get; set; }
        }

        public class ExternalReference
        {
            public List<URI> URI { get; set; }
        }

        public class FamilyName
        {
            public string _ { get; set; }
        }

        public class FirstName
        {
            public string _ { get; set; }
        }

        public class GrossWeightMeasure
        {
            public string _ { get; set; }
            public string unitCode { get; set; }
        }

        public class HandlingCode
        {
            public string _ { get; set; }
        }

        public class HandlingInstruction
        {
            public string _ { get; set; }
        }

        public class ID
        {
            public string _ { get; set; }
            public string schemeID { get; set; }
        }
        public class IDOnlyA
        {
            public List<IDOnly> ID { get; set; }
            public List<ApplicableTransportMeans> ApplicableTransportMeans { get; set; }
        }
        public class IDOnly
        {
            public string _ { get; set; }
        }
        public class IdentificationCode
        {
            public string _ { get; set; }
        }

        public class IdentityDocumentReference
        {
            public List<IDOnly> ID { get; set; }
        }

        public class IssueDate
        {
            public string _ { get; set; }
        }

        public class IssuerParty
        {
            public List<PartyIdentification> PartyIdentification { get; set; }
        }

        public class IssueTime
        {
            public string _ { get; set; }
        }

        public class Item
        {
            public List<Description> Description { get; set; }
            public List<SellersItemIdentification> SellersItemIdentification { get; set; }
            public List<StandardItemIdentification> StandardItemIdentification { get; set; }
            public List<CommodityClassification> CommodityClassification { get; set; }
            public List<AdditionalItemProperty> AdditionalItemProperty { get; set; }
        }
        public class StandardItemIdentification
        {
            public List<ID> ID { get; set; }
        }
        public class CommodityClassification
        {
            public List<ItemClassificationCode> ItemClassificationCode { get; set; }
        }
        public class ItemClassificationCode
        {
            public string _ { get; set; }
        }
        public class AdditionalItemProperty
        {
            public List<_ONLY> Name { get; set; }
            public List<_ONLY> NameCode { get; set; }
            public List<_ONLY> Value { get; set; }

        }
        public class JobTitle
        {
            public string _ { get; set; }
        }

        public class Line
        {
            public string _ { get; set; }
        }

        public class LineCountNumeric
        {
            public string _ { get; set; }
        }

        public class LineID
        {
            public int _ { get; set; }
        }

        public class Name
        {
            public string _ { get; set; }
        }

        public class Note
        {
            public string _ { get; set; }
            public string languageID { get; set; }
        }

        public class OrderLineReference
        {
            public List<LineID> LineID { get; set; }
        }
        public class Party_IDOnly
        {
            public List<PartyIdentification> PartyIdentification { get; set; }
            public List<PostalAddress_IDOnly> PostalAddress { get; set; }
            public List<PartyLegalEntity> PartyLegalEntity { get; set; }

        }
        public class Party
        {
            public List<PartyIdentification> PartyIdentification { get; set; }
            public List<PostalAddress_IDOnly> PostalAddress { get; set; }
            public List<PartyLegalEntity> PartyLegalEntity { get; set; }
            public List<Contact> Contact { get; set; }
        }
        public class PartyIdentificationSignatoryParty
        {
            public List<IDOnly> ID { get; set; }
        }
        public class PartyIdentification
        {
            public List<ID> ID { get; set; }
        }
        //FALTANTE
        public class PartyIdentificationDespatchSupplierParty
        {
            public List<ID> ID { get; set; }
        }

        public class PartyLegalEntity
        {
            public List<RegistrationName> RegistrationName { get; set; }
            public List<CompanyID> CompanyID { get; set; }
        }

        public class PartyName
        {
            public List<Name> Name { get; set; }
        }

        public class PostalAddress_IDOnly
        {
            public List<IDOnly> ID { get; set; }
            public List<StreetName> StreetName { get; set; }
            public List<CitySubdivisionName> CitySubdivisionName { get; set; }
            public List<CityName> CityName { get; set; }
            public List<CountrySubentity> CountrySubentity { get; set; }
            public List<District> District { get; set; }
            public List<Country> Country { get; set; }
        }
        public class PostalAddress
        {
            public List<ID> ID { get; set; }
            public List<StreetName> StreetName { get; set; }
            public List<CitySubdivisionName> CitySubdivisionName { get; set; }
            public List<CityName> CityName { get; set; }
            public List<CountrySubentity> CountrySubentity { get; set; }
            public List<District> District { get; set; }
            public List<Country> Country { get; set; }
        }

        public class RegistrationName
        {
            public string _ { get; set; }
        }

        public class Root
        {
            public string _D { get; set; }
            public string _A { get; set; }
            public string _B { get; set; }
            public string _E { get; set; }
            public List<DespatchAdvice> DespatchAdvice { get; set; }
        }

        public class SellersItemIdentification
        {
            public List<IDOnly> ID { get; set; }
        }

        public class Shipment
        {
            public List<IDOnly> ID { get; set; }
            public List<HandlingCode> HandlingCode { get; set; }
            public List<HandlingInstruction> HandlingInstructions { get; set; }
            public List<_ONLY> Information { get; set; }
            public List<GrossWeightMeasure> GrossWeightMeasure { get; set; }
            public List<NetWeightMeasure> NetWeightMeasure { get; set; }
            public List<TotalTransportHandlingUnitQuantity> TotalTransportHandlingUnitQuantity { get; set; }
            public List<SpecialInstructions> SpecialInstructions { get; set; }
            public List<ShipmentStage> ShipmentStage { get; set; }
            public List<Delivery> Delivery { get; set; }
            public List<TransportHandlingUnit> TransportHandlingUnit { get; set; }
            //public List<TransportHandlingUnitPackage> TransportHandlingUnit { get; set; }
            public List<FirstArrivalPortLocation> FirstArrivalPortLocation { get; set; }
        }
        public class NetWeightMeasure
        {
            public string _ { get; set; }
            public string unitCode { get; set; }
        }
        public class TotalTransportHandlingUnitQuantity
        {
            public string _ { get; set; }
        }
        public class SpecialInstructions
        {
            public string _ { get; set; }
        }
        public class ShipmentStage
        {
            public List<TransportModeCode> TransportModeCode { get; set; }
            public List<TransitPeriod> TransitPeriod { get; set; }

            public List<CarrierParty> CarrierParty { get; set; }
            //SE CAMBIO DE POSICION - ORIGINAL DRIVER PERSON ARRIBA DEL CARRIERPARTY
            public List<DriverPerson> DriverPerson { get; set; }
            //public List<DriverPerson1> DriverPerson1 { get; set; }
        }
        //CARRIERPARTY
        public class AgentParty
        {
            public List<PartyLegalEntity> PartyLegalEntity { get; set; }
        }

        public class CarrierParty
        {
            public List<PartyIdentification> PartyIdentification { get; set; }
            public List<PartyLegalEntity> PartyLegalEntity { get; set; }
            public List<AgentParty> AgentParty { get; set; }
        }
        //END CARRIERPARTY
        public class CompanyID
        {
            public string _ { get; set; }
            public string schemeID { get; set; }
        }


        public class SignatoryParty
        {
            public List<PartyIdentificationSignatoryParty> PartyIdentification { get; set; }
            public List<PartyName> PartyName { get; set; }
        }

        public class Signature
        {
            public List<IDOnly> ID { get; set; }
            public List<SignatoryParty> SignatoryParty { get; set; }
            public List<DigitalSignatureAttachment> DigitalSignatureAttachment { get; set; }
        }

        public class StartDate
        {
            public string _ { get; set; }
        }

        public class StreetName
        {
            public string _ { get; set; }
        }

        public class TransitPeriod
        {
            public List<StartDate> StartDate { get; set; }
        }

        public class TransportEquipment
        {
            public List<IDOnly> ID { get; set; }            
            public List<ApplicableTransportMeans> ApplicableTransportMeans { get; set; }
            public List<IDOnlyA> AttachedTransportEquipment { get; set; }
        }
        public class ApplicableTransportMeans
        {
            public List<RegistrationNationalityID> RegistrationNationalityID { get; set; }
        }
        public class RegistrationNationalityID
        {
            public string _ { get; set; }
        }
        public class TransportHandlingUnit
        {
            public List<TransportEquipment> TransportEquipment { get; set; }
            public List<Package> Package { get; set; }
        }
        public class FirstArrivalPortLocation
        {
            public List<_ONLY> ID { get; set; }
            public List<_ONLY> LocationTypeCode { get; set; }
            public List<_ONLY> Name { get; set; }
        }
        public class _ONLY
        {
            public string _ { get; set; }

        }
        //public class TransportHandlingUnitPackage 
        //{
        //    public List<Package> Package {get;set;}

        //}
        public class Package
        {
            public List<Package_> ID { get; set; }
            public List<TraceID> TraceID { get; set; }
        }
        public class Package_
        {
            public string _ { get; set; }
        }
        public class TraceID
        {
            public string _ { get; set; }
        }
        public class TransportModeCode
        {
            public string _ { get; set; }
        }

        public class UBLVersionID
        {
            public string _ { get; set; }
        }

        public class URI
        {
            public string _ { get; set; }
        }


        #endregion
        //END CLASES DE JSON 
        //END CLASES DE JSON 
        //TOKEN
        public dynamic POST_TOKEN()
        {
            dynamic contenido = string.Empty;

            string access_token = "";
            try
            {


                //ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072; //TLS 1.1
                //ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls;
                //ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3;
                DataTable dt = Efact_GuiaLogic.Instance.Traer_EFACT_SERVICIOSAPI("URL_para_obtener_el_token_POST");
                string urlpost1 = dt.Rows[0]["URL"].ToString();

                DataTable usuario = Efact_GuiaLogic.Instance.Traer_EFACT_SERVICIOSAPI("USUARIO_EFACT");
                DataTable password = Efact_GuiaLogic.Instance.Traer_EFACT_SERVICIOSAPI("CONTRASENA_EFACT");
                string usuariodt = usuario.Rows[0]["URL"].ToString();
                string passwordt = password.Rows[0]["URL"].ToString();

                ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072; //TLS 1.2
                HttpWebRequest solicitud = (HttpWebRequest)HttpWebRequest.Create(urlpost1);
                //string dataq = "username=20420310383&password=53c418a1e7dc6fbf8c0b3ae42ea210e388da9598bec6203264f7860c3475e7d1&grant_type=password";
                solicitud.Method = "POST";
                solicitud.Accept = "*/*";
                solicitud.ContentType = "application/x-www-form-urlencoded";
                solicitud.Headers["Authorization"] = "Basic Y2xpZW50OnNlY3JldA==";
                string json = "username=" + usuariodt + "&password=" + passwordt + "&grant_type=password";
                byte[] data = Encoding.UTF8.GetBytes(json);
                solicitud.ContentLength = data.Length;
                using (Stream stream = solicitud.GetRequestStream())
                {
                    stream.Write(data, 0, data.Length);
                }
                using (WebResponse response = solicitud.GetResponse())
                {
                    using (Stream responseStream = response.GetResponseStream())
                    {
                        using (StreamReader reader = new StreamReader(responseStream))
                        {
                            string responseFromServer = reader.ReadToEnd();

                            string token_String = responseFromServer.ToString();
                            dynamic deserealizar = JsonConvert.DeserializeObject(token_String);
                            access_token = deserealizar.access_token;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error ===> " + ex);
            }
            return access_token;
        }

        //END TOKEN

        public void ConvertirJsonAClases(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();
                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);

                //UBLVERSIONID
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);
                //  roo2.DespatchAdvice.Add(despatch);
                //CuztomizationID
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);
                //ID
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);
                //ISSUEDATE
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);
                //ISSUETIME
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();
                //DESPATCHADVICETYPECODE
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);
                //NOTE
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();
                if (note._ != "")
                {
                    despatch.Note.Add(note);
                }
                else
                {
                    despatch.Note = null;
                }
                //LineCountNumeric
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);

                //ADDITIONALDOCUMENTREFERENCE
                despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                AdditionalDocumentReference additional = new AdditionalDocumentReference();
                //ID
                despatch.AdditionalDocumentReference.Add(additional);
                additional.ID = new List<IDOnly>();
                IDOnly idonly = new IDOnly();
                idonly._ = dt.Rows[0]["adref_id"].ToString();
                additional.ID.Add(idonly);
                //DocumentTypeCode
                additional.DocumentTypeCode = new List<DocumentTypeCode>();
                DocumentTypeCode documenttypecode = new DocumentTypeCode();
                documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                additional.DocumentTypeCode.Add(documenttypecode);
                //DocumentType 
                additional.DocumentType = new List<DocumentType>();
                DocumentType documentype = new DocumentType();
                documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                additional.DocumentType.Add(documentype);
                //IssueParty 
                additional.IssuerParty = new List<IssuerParty>();
                IssuerParty issuerparty = new IssuerParty();
                additional.IssuerParty.Add(issuerparty);
                issuerparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentification = new PartyIdentification();
                issuerparty.PartyIdentification.Add(partyidentification);
                partyidentification.ID = new List<ID>();
                ID idadditional = new ID();
                idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //SIGNATURE
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //NAME
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);

                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);

                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);

                //DespatchSupplierParty
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysub = new CitySubdivisionName();
                citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdress.CitySubdivisionName.Add(citysub);

                //CityName
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //DISTRICT
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);

                //CONTACT 

                //DELIVERYCUSTOMERPARTY
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(cityname);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentity = new CountrySubentity();
                countrysubentity._ = "DEPARTAMENTO";
                postaladdress.CountrySubentity.Add(countrysubentity);

                //PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);

                //SHIPMENT
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);
                //ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);
                //SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);
                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);



                //DriverPerson
                shipmentStage.DriverPerson = new List<DriverPerson>();
                DriverPerson driverperson = new DriverPerson();


                //ID
                driverperson.ID = new List<ID>();
                ID iddriver = new ID();
                iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                driverperson.ID.Add(iddriver);

                //if (fnc_creoobjeto(Shipment_ShipmentStage_DriverPerson,cod_platilla)=true
                //{
                driverperson.FirstName = new List<FirstName>();

                //if (fnc_creoobjeto(Shipment_ShipmentStage_DriverPerson_FirstName,cod_platilla)=true
                //{
                FirstName firstname = new FirstName();
                firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                //{
                driverperson.FirstName.Add(firstname);
                //}

                //Familiname
                driverperson.FamilyName = new List<FamilyName>();
                FamilyName familyname = new FamilyName();
                familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                driverperson.FamilyName.Add(familyname);

                //JOBTITLE

                driverperson.JobTitle = new List<JobTitle>();
                JobTitle jobtitle = new JobTitle();
                jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                driverperson.JobTitle.Add(jobtitle);

                //IdentityDocumentReference
                driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                driverperson.IdentityDocumentReference.Add(identitydocument);

                identitydocument.ID = new List<IDOnly>();
                IDOnly ididentity = new IDOnly();
                ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                identitydocument.ID.Add(ididentity);

                //shipmentStage.DriverPerson.Add(driverperson);
                //END DRIVERPERSON

                //DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //CITYSUBDIVIONAME
                deliveryadrress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionname = new CitySubdivisionName();
                citysubdivionname._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CitySubdivisionName"].ToString();
                deliveryadrress.CitySubdivisionName.Add(citysubdivionname);

                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);

                //TransportHandlingUnit
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit transporthand = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(transporthand);

                transporthand.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment transportequipment = new TransportEquipment();
                transporthand.TransportEquipment.Add(transportequipment);

                transportequipment.ID = new List<IDOnly>();
                IDOnly idtransport = new IDOnly();
                idtransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                transportequipment.ID.Add(idtransport);


                //DESPATCH DELIVERY
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);

                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                //CITYSUBDIVIONAME
                despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);




                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);

                    //DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore
                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);

            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }
        public class Archivo
        {
            public string Nombre { get; set; }
            public string ruta { get; set; }
        }

        public Archivo ObtenerRutaYNombre(string nombrearchivo)
        {
            Archivo archivo = new Archivo();
            try
            {
                string ruta = Environment.GetEnvironmentVariable("TEMP") + "\\" + nombrearchivo;
                archivo.ruta = ruta;
                archivo.Nombre = Path.GetFileName(ruta);
            }
            catch (Exception ex)
            {
                MessageBox.Show("==> " + ex);
            }
            return archivo;
        }

        public void GenerarGuiaElectronica()
        {

            if (gridControl.Rows.Count == 0)
            {
                Util.ShowAlert("Debe ingresar detalle a la Guia de Transporte");
                return;
            }
            if (Convert.ToDecimal(txtCantidad.Text) <= 0)
            {
                Util.ShowAlert("Debe ingresar el Peso Bruto");
                return;
            }

            if (txtUnidadMed.Text == "")
            {
                Util.ShowAlert("Debe ingresar Unidad Medida del Peso Bruto");
                return;
            }


            //Capturar guia y armar xml
            string tipodocumento = txttipdoc.Text;
            string numerooguia = txtserie.Text + "-" + txtnrodocumento.Text;
            var codigosSeleccionados = new string[1];
            codigosSeleccionados[0] = tipodocumento + numerooguia;
            // Traer informacion dr guia para armar json
            DataTable dt = Efact_GuiaLogic.Instance.Traer_GuiaElectronica(Logueo.CodigoEmpresa, Util.ConvertiraXML(codigosSeleccionados));
            string XML = Util.ConvertiraXML(codigosSeleccionados);
            // Armar el json
            string Motivo = dt.Rows[0]["Shipment_HandlingCode"].ToString();
            string TipoTraslado = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();


            string concant = Motivo + TipoTraslado;
            //IF(chk.Checked == true)
            switch (concant)
            {
                //Consignacion
                case "0502":
                    ConvertirJsonAClases_ConsignacionPrivada(dt);
                    break;
                case "0501":
                    ConvertirJsonAClases_ConsignacionPublica(dt);
                    break;

                //VENTAS
                //Venta Privada
                case "0102":
                    ConvertirJsonAClases_ventaPrivada(dt);
                    break;
                //Venta Publica
                case "0101":
                    ConvertirJsonAClases_ventaPublica(dt);
                    break;

                //EXPORTACION
                //EXPORTACION PUBLICA
                case "0901":
                    // ConvertirJsonAClases_ExportacionPublica(dt);

                    ConvertirJsonAClases_ExportacionPublica(dt);


                    break;
                case "0902":
                    ConvertirJsonAClases_ExportacionPrivada(dt);
                    break;

                //DEVOLUCION
                //Devolucion PRIVADA
                case "0602":
                    ConvertirJsonAClases_DevolucionPrivada(dt);
                    break;
                //Devolucion Publicaa
                case "0601":
                    ConvertirJsonAClases_DevolucionPublica(dt);
                    break;

                //TRASLADO EMPRESA PRIVADA
                case "0402":
                    ConvertirJsonAClases_TrasladoMismaEmpresaPrivada(dt);
                    break;
                //TRASLADO EMPRESA PUBLICA
                case "0401":
                    ConvertirJsonAClases_TrasladoMismaEmpresaPublica(dt);
                    break;
                //OTROS PUBLICA
                case "1301":
                    ConvertirJsonAClases_OtrosPublica(dt);
                    break;
                //OTROS PRIVADA
                case "1302":
                    ConvertirJsonAClases_OtrosPrivada(dt);
                    break;
                //Venta Sujera a confirmacion del comprador
                //Venta Sujera a confirmacion del comprador - Publica
                case "1401":
                    ConvertirJsonAClases_VentaSujetaAConfirmarPublica(dt);
                    break;
                //Venta Sujera a confirmacion del comprador - Privada
                case "1402":
                    ConvertirJsonAClases_VentaSujetaAConfirmarPrivada(dt);
                    break;
                //COMPRA 
                //Compra Privada
                case "0202":
                    ConvertirJsonAClases_CompraPrivada(dt);
                    break;
                //Compra publica
                case "0201":
                    ConvertirJsonAClases_CompraPublica(dt);
                    break;

                //IMPORTACION
                //Importancion Privada
                case "0801":
                    ConvertirJsonAClases_ImportacionPublica(dt);
                    break;
                //Importacion Publica
                case "0802":

                    break;
                //VENTA CON ENTREGA A TERCEROS
                case "0302":
                    ConvertirJsonAClases_VentaConEntregaATercerosPrivada(dt);
                    break;
                case "0301":
                    ConvertirJsonAClases_VentaConEntregaATercerosPublica(dt);
                    break;


            }
            string TipoDocumento = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guiaserie = txtserie.Text;
            string serienumero = guiaserie + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;


            // DataTable dt_error = Efact_GuiaLogic.Instance.Spu_Fact_EFAC_ERROR_LOG(numerodumentoemisor, serienumero, TipoDocumento);
            //ES NUEVO


            // llamar metodo post de API

            string ticket = POST_DOCUMENT();

            ////obtener CDR
            Thread.Sleep(8000);
            if (ticket != "")
            {

                GET_CDR(ticket);
            }
            else
            {
                return;
            }



        }
        //CHECK
        //VENTA PRIVADA
        public void ConvertirJsonAClases_ventaPrivada(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);

                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();

                //NUEVO
                //ORDEN DE COMPRA

                Note noteordencompra = new Note();
                noteordencompra._ = dt.Rows[0]["Note_OCNRO"].ToString();
                noteordencompra.languageID = dt.Rows[0]["languageID_OCNRO"].ToString(); ;

                //MARCA 
                Note noteMARCA = new Note();
                noteMARCA._ = dt.Rows[0]["Note_MARCA"].ToString();
                noteMARCA.languageID = dt.Rows[0]["languageID_MARCA"].ToString(); ;

                //MARCA 2
                Note noteMARCA2 = new Note();
                noteMARCA2._ = dt.Rows[0]["Note_MARCA2"].ToString();
                noteMARCA2.languageID = dt.Rows[0]["languageID_MARCA2"].ToString(); ;
                //END 


                despatch.Note.Add(note);
                despatch.Note.Add(noteordencompra);
                despatch.Note.Add(noteMARCA);
                despatch.Note.Add(noteMARCA2);




                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);

                //9. AdditionalDocumentReference ***************
                despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                AdditionalDocumentReference additional = new AdditionalDocumentReference();

                //9.1 ID
                despatch.AdditionalDocumentReference.Add(additional);
                additional.ID = new List<IDOnly>();
                IDOnly idonly = new IDOnly();
                idonly._ = dt.Rows[0]["adref_id"].ToString();
                additional.ID.Add(idonly);
                //9.2 DocumentTypeCode
                additional.DocumentTypeCode = new List<DocumentTypeCode>();
                DocumentTypeCode documenttypecode = new DocumentTypeCode();
                documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                additional.DocumentTypeCode.Add(documenttypecode);
                //9.3 DocumentType 
                additional.DocumentType = new List<DocumentType>();
                DocumentType documentype = new DocumentType();
                documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                additional.DocumentType.Add(documentype);
                //9.4 IssueParty 
                additional.IssuerParty = new List<IssuerParty>();
                IssuerParty issuerparty = new IssuerParty();
                additional.IssuerParty.Add(issuerparty);
                //9.4.1
                issuerparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentification = new PartyIdentification();
                issuerparty.PartyIdentification.Add(partyidentification);
                //9.4.1.1
                partyidentification.ID = new List<ID>();
                //9.4.1.1.1
                ID idadditional = new ID();
                idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysub = new CitySubdivisionName();
                citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdress.CitySubdivisionName.Add(citysub);

                //CityName
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //DISTRICT
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(cityname);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentity = new CountrySubentity();
                countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);

                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                TotalTransportHandlingUnitQuantity totaltransport = new TotalTransportHandlingUnitQuantity();
                totaltransport._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString();

                shipment.TotalTransportHandlingUnitQuantity.Add(totaltransport);
                //if (dt.Rows[0]["INDICADORTRASLADOVEHICATM1"].ToString() == "1") 
                //{
                //    shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                //    TotalTransportHandlingUnitQuantity shipmentTotalTransportHandlingUnitQuantity = new TotalTransportHandlingUnitQuantity();
                //    shipmentTotalTransportHandlingUnitQuantity._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString;
                //    shipment.TotalTransportHandlingUnitQuantity.Add(shipmentTotalTransportHandlingUnitQuantity);
                //}
                //SPECIALINSTRUCTIONS
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {

                    shipment.SpecialInstructions = new List<SpecialInstructions>();
                    SpecialInstructions shipmentSpecialInstrucions = new SpecialInstructions();
                    shipmentSpecialInstrucions._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(shipmentSpecialInstrucions);
                }

                //END
                //13.5 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);


                //PUBLICO
                ////CARRIERPARTY - LISTA
                //shipmentStage.CarrierParty = new List<CarrierParty>();
                //CarrierParty CarrierParty = new CarrierParty();


                ////CARRIERPARTY - PARTYIDENTIFICATION


                //CarrierParty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification PartyIdentification = new PartyIdentification();
                //CarrierParty.PartyIdentification.Add(PartyIdentification);
                //PartyIdentification.ID = new List<ID>();

                //ID idCarrierParty = new ID();

                //idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                //idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                //PartyIdentification.ID.Add(idCarrierParty);



                ////CARRIERPARTY - PARTYLEGALENTITY
                //CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                //CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                ////PARTYLEGALENTITY - REGISTRATIONAME
                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                ////{


                //partyLegalEntity.RegistrationName = new List<RegistrationName>();
                //RegistrationName CarrierRegistrionName = new RegistrationName();

                //CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                //partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                ////}
                //partyLegalEntity.CompanyID = new List<CompanyID>();

                ////PARTYLEGALENTITY - COMPANYID
                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                ////{
                //CompanyID CarrierPartyCompanyID = new CompanyID();

                //CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                //partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                ////}
                ////CARRIERPARTY - AGENTPARTY

                //CarrierParty.AgentParty = new List<AgentParty>();

                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"] != DBNull.Value)
                ////{
                //AgentParty CarrierPartyAgentParty = new AgentParty();
                //CarrierParty.AgentParty.Add(CarrierPartyAgentParty);

                //CarrierPartyAgentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity CarrierPartyLegalEntity = new PartyLegalEntity();
                //CarrierPartyAgentParty.PartyLegalEntity.Add(CarrierPartyLegalEntity);


                //CarrierPartyLegalEntity.CompanyID = new List<CompanyID>();
                //CompanyID CarrierCompanyID = new CompanyID();
                //CarrierCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierCompanyID.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierPartyLegalEntity.CompanyID.Add(CarrierCompanyID);
                ////}

                //shipmentStage.CarrierParty.Add(CarrierParty);

                ////END CARRIERPARTY


                //DESPATCHPARTY




                //END DESPATCHPARTY



                // END PUBLICO
                //ID
                ////DriverPerson
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                    TransportHandlingUnit shipmentTransportHandlingUnit = new TransportHandlingUnit();
                    shipment.TransportHandlingUnit.Add(shipmentTransportHandlingUnit);

                    shipmentTransportHandlingUnit.TransportEquipment = new List<TransportEquipment>();
                    TransportEquipment TransportEquipmentshipment = new TransportEquipment();

                    TransportEquipmentshipment.ID = new List<IDOnly>();
                    IDOnly IDTransport = new IDOnly();
                    IDTransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                    TransportEquipmentshipment.ID.Add(IDTransport);
                    shipmentTransportHandlingUnit.TransportEquipment.Add(TransportEquipmentshipment);

                }
                else
                {

                    shipmentStage.DriverPerson = new List<DriverPerson>();
                    DriverPerson driverperson = new DriverPerson();



                    //ID             
                    ID iddriver = new ID();


                    driverperson.ID = new List<ID>();
                    iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                    iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                    driverperson.ID.Add(iddriver);



                    //else { shipmentStage.DriverPerson = null; }


                    //if (driverperson.FirstName != null)
                    //{

                    //}
                    driverperson.FirstName = new List<FirstName>();
                    FirstName firstname = new FirstName();
                    firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                    //{

                    driverperson.FirstName.Add(firstname);

                    //}

                    //Familiname
                    //string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();

                    if (driverperson.FirstName != null)
                    {
                        driverperson.FamilyName = new List<FamilyName>();
                    }
                    driverperson.FamilyName = new List<FamilyName>();
                    FamilyName familyname = new FamilyName();
                    familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                    driverperson.FamilyName.Add(familyname);

                    //JOBTITLE

                    driverperson.JobTitle = new List<JobTitle>();
                    JobTitle jobtitle = new JobTitle();
                    jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                    driverperson.JobTitle.Add(jobtitle);

                    //IdentityDocumentReference

                    driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                    IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                    driverperson.IdentityDocumentReference.Add(identitydocument);

                    identitydocument.ID = new List<IDOnly>();
                    IDOnly ididentity = new IDOnly();
                    ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                    identitydocument.ID.Add(ididentity);



                    shipmentStage.DriverPerson.Add(driverperson);
                }

                //13.6 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.6.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //CITYSUBDIVIONAME
                deliveryadrress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionname = new CitySubdivisionName();
                citysubdivionname._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CitySubdivisionName"].ToString();
                deliveryadrress.CitySubdivisionName.Add(citysubdivionname);

                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);

                //  13.6.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                //  13.6.2.1 DELIVERY DESPATCH 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                //CITYSUBDIVIONAME
                despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //DESPATCHPARTY 
                //despatchdelivery.DespatchParty = new List<DespatchParty>();
                //DespatchParty despatchparty = new DespatchParty();
                //despatchdelivery.DespatchParty.Add(despatchparty);



                ////if (dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                ////{
                //despatchparty.AgentParty = new List<AgentParty>();
                //AgentParty agentParty = new AgentParty();
                //despatchparty.AgentParty.Add(agentParty);

                //agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                //agentParty.PartyLegalEntity.Add(partylegalentityagent);

                //partylegalentityagent.CompanyID = new List<CompanyID>();
                //CompanyID companyid = new CompanyID();
                //companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                //companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //partylegalentityagent.CompanyID.Add(companyid);
                ////}


                //13.7 TransportHandlingUnit
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit transporthand = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(transporthand);
                //TRANSPORTEQUIPMENT
                transporthand.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment transportequipment = new TransportEquipment();
                transporthand.TransportEquipment.Add(transportequipment);
                //TRANSPORT ID 
                transportequipment.ID = new List<IDOnly>();
                IDOnly idtransport = new IDOnly();
                idtransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                transportequipment.ID.Add(idtransport);



                //PLACA SECUNDARIA
                transportequipment.AttachedTransportEquipment = new List<IDOnlyA>();
                IDOnlyA IDONLYA = new IDOnlyA();
                transportequipment.AttachedTransportEquipment.Add(IDONLYA);
                IDONLYA.ID = new List<IDOnly>();
                IDOnly OnlyID = new IDOnly();
                OnlyID._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_AttachedTransportEquipment_ID__"].ToString();
                IDONLYA.ID.Add(OnlyID);
                //TARJETA CER2 NO VA
                //IDONLYA.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //ApplicableTransportMeans ApplicableTransportMeansid = new ApplicableTransportMeans();
                //IDONLYA.ApplicableTransportMeans.Add(ApplicableTransportMeansid);
                //ApplicableTransportMeansid.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //RegistrationNationalityID RegistrationNationalityIDtransportPLACA2 = new RegistrationNationalityID();
                //RegistrationNationalityIDtransportPLACA2._ = "TARJETACER2";
                //ApplicableTransportMeansid.RegistrationNationalityID.Add(RegistrationNationalityIDtransportPLACA2);
                //END PLACA SECUNDARIA






                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();

                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);






                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);


                //Type tipoClaseAnidada = roo2.DespatchAdvice;
                //string jsonarreglado = RecorrerPropiedades(despatch);
                //RecorrerPropiedades(roo2);

            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }
        //CHECK
        //VENTA PUBLICA
        public void ConvertirJsonAClases_ventaPublica(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);


                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();

                //NUEVO
                //ORDEN DE COMPRA

                Note noteordencompra = new Note();
                noteordencompra._ = dt.Rows[0]["Note_OCNRO"].ToString();
                noteordencompra.languageID = dt.Rows[0]["languageID_OCNRO"].ToString(); ;

                //MARCA 
                Note noteMARCA = new Note();
                noteMARCA._ = dt.Rows[0]["Note_MARCA"].ToString();
                noteMARCA.languageID = dt.Rows[0]["languageID_MARCA"].ToString(); ;

                //MARCA 2
                Note noteMARCA2 = new Note();
                noteMARCA2._ = dt.Rows[0]["Note_MARCA2"].ToString();
                noteMARCA2.languageID = dt.Rows[0]["languageID_MARCA2"].ToString(); ;
                //END 


                despatch.Note.Add(note);
                despatch.Note.Add(noteordencompra);
                despatch.Note.Add(noteMARCA);
                despatch.Note.Add(noteMARCA2);

                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);

                //9. AdditionalDocumentReference ***************
                despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                AdditionalDocumentReference additional = new AdditionalDocumentReference();

                //9.1 ID
                despatch.AdditionalDocumentReference.Add(additional);
                additional.ID = new List<IDOnly>();
                IDOnly idonly = new IDOnly();
                idonly._ = dt.Rows[0]["adref_id"].ToString();
                additional.ID.Add(idonly);
                //9.2 DocumentTypeCode
                additional.DocumentTypeCode = new List<DocumentTypeCode>();
                DocumentTypeCode documenttypecode = new DocumentTypeCode();
                documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                additional.DocumentTypeCode.Add(documenttypecode);
                //9.3 DocumentType 
                additional.DocumentType = new List<DocumentType>();
                DocumentType documentype = new DocumentType();
                documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                additional.DocumentType.Add(documentype);
                //9.4 IssueParty 
                additional.IssuerParty = new List<IssuerParty>();
                IssuerParty issuerparty = new IssuerParty();
                additional.IssuerParty.Add(issuerparty);
                //9.4.1
                issuerparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentification = new PartyIdentification();
                issuerparty.PartyIdentification.Add(partyidentification);
                //9.4.1.1
                partyidentification.ID = new List<ID>();
                //9.4.1.1.1
                ID idadditional = new ID();
                idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysub = new CitySubdivisionName();
                citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdress.CitySubdivisionName.Add(citysub);

                //CityName
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //DISTRICT
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(citynamedelivery);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentity = new CountrySubentity();
                countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);

                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                //13.5 TotalTransportHandlingUnitQuantity
                shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                TotalTransportHandlingUnitQuantity totaltransport = new TotalTransportHandlingUnitQuantity();
                totaltransport._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString();

                shipment.TotalTransportHandlingUnitQuantity.Add(totaltransport);

                shipment.SpecialInstructions = new List<SpecialInstructions>();
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {

                    SpecialInstructions specialinstructions = new SpecialInstructions();
                    specialinstructions._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(specialinstructions);
                }
                //indicador muestra chofer y vehiculo
                if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                {
                    SpecialInstructions SUNAT_Envio_IndicadorVehiculoConductoresTransp = new SpecialInstructions();
                    SUNAT_Envio_IndicadorVehiculoConductoresTransp._ = dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString();
                    shipment.SpecialInstructions.Add(SUNAT_Envio_IndicadorVehiculoConductoresTransp);
                }
                //13.5 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);


                //PUBLICO
                //CARRIERPARTY - LISTA
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                    TransportHandlingUnit shipmentTransportHandlingUnit = new TransportHandlingUnit();
                    shipment.TransportHandlingUnit.Add(shipmentTransportHandlingUnit);

                    shipmentTransportHandlingUnit.TransportEquipment = new List<TransportEquipment>();
                    TransportEquipment TransportEquipmentshipment = new TransportEquipment();

                    TransportEquipmentshipment.ID = new List<IDOnly>();
                    IDOnly IDTransport = new IDOnly();
                    IDTransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                    TransportEquipmentshipment.ID.Add(IDTransport);
                    shipmentTransportHandlingUnit.TransportEquipment.Add(TransportEquipmentshipment);

                }
                else
                {
                    shipmentStage.CarrierParty = new List<CarrierParty>();
                    CarrierParty CarrierParty = new CarrierParty();


                    //CARRIERPARTY - PARTYIDENTIFICATION


                    CarrierParty.PartyIdentification = new List<PartyIdentification>();
                    PartyIdentification PartyIdentification = new PartyIdentification();
                    CarrierParty.PartyIdentification.Add(PartyIdentification);
                    PartyIdentification.ID = new List<ID>();

                    ID idCarrierParty = new ID();

                    idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                    idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                    PartyIdentification.ID.Add(idCarrierParty);



                    //CARRIERPARTY - PARTYLEGALENTITY
                    CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                    PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                    CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                    //PARTYLEGALENTITY - REGISTRATIONAME
                    //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                    //{


                    partyLegalEntity.RegistrationName = new List<RegistrationName>();
                    RegistrationName CarrierRegistrionName = new RegistrationName();

                    CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                    partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                    //}
                    partyLegalEntity.CompanyID = new List<CompanyID>();

                    //PARTYLEGALENTITY - COMPANYID
                    //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                    //{
                    CompanyID CarrierPartyCompanyID = new CompanyID();

                    CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                    partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                    //}

                    shipmentStage.CarrierParty.Add(CarrierParty);

                }

                // END PUBLICO
                //ID
                ////DriverPerson
                if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                {
                    shipmentStage.DriverPerson = new List<DriverPerson>();
                    DriverPerson driverperson = new DriverPerson();



                    //ID             
                    ID iddriver = new ID();


                    driverperson.ID = new List<ID>();
                    iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                    iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                    driverperson.ID.Add(iddriver);



                    //else { shipmentStage.DriverPerson = null; }


                    //if (driverperson.FirstName != null)
                    //{

                    //}
                    driverperson.FirstName = new List<FirstName>();
                    FirstName firstname = new FirstName();
                    firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                    //{

                    driverperson.FirstName.Add(firstname);

                    //}

                    //Familiname
                    //string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();

                    if (driverperson.FirstName != null)
                    {
                        driverperson.FamilyName = new List<FamilyName>();
                    }
                    driverperson.FamilyName = new List<FamilyName>();
                    FamilyName familyname = new FamilyName();
                    familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                    driverperson.FamilyName.Add(familyname);

                    //JOBTITLE

                    driverperson.JobTitle = new List<JobTitle>();
                    JobTitle jobtitle = new JobTitle();
                    jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                    driverperson.JobTitle.Add(jobtitle);

                    //IdentityDocumentReference

                    driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                    IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                    driverperson.IdentityDocumentReference.Add(identitydocument);

                    identitydocument.ID = new List<IDOnly>();
                    IDOnly ididentity = new IDOnly();
                    ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                    identitydocument.ID.Add(ididentity);



                    shipmentStage.DriverPerson.Add(driverperson);
                }

                //13.6 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.6.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //CITYSUBDIVIONAME
                //deliveryadrress.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysubdivionname = new CitySubdivisionName();
                //citysubdivionname._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CitySubdivisionName"].ToString();
                //deliveryadrress.CitySubdivisionName.Add(citysubdivionname);

                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);

                //  13.6.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                //  13.6.2.1 DELIVERY DESPATCH 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                ////CITYSUBDIVIONAME
                //despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                //citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                //despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //DESPATCHPARTY 
                despatchdelivery.DespatchParty = new List<DespatchParty>();
                DespatchParty despatchparty = new DespatchParty();
                despatchdelivery.DespatchParty.Add(despatchparty);



                //if (dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                //{
                despatchparty.AgentParty = new List<AgentParty>();
                AgentParty agentParty = new AgentParty();
                despatchparty.AgentParty.Add(agentParty);

                agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                agentParty.PartyLegalEntity.Add(partylegalentityagent);

                partylegalentityagent.CompanyID = new List<CompanyID>();
                CompanyID companyid = new CompanyID();
                companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                partylegalentityagent.CompanyID.Add(companyid);

                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit TransportHandlingUnitshipment = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(TransportHandlingUnitshipment);
                TransportHandlingUnitshipment.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment TransportEquipmentshipmentapp = new TransportEquipment();
                TransportEquipmentshipmentapp.ID = new List<IDOnly>();
                IDOnly IDOnlytransport = new IDOnly();
                IDOnlytransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                TransportEquipmentshipmentapp.ID.Add(IDOnlytransport);




                TransportHandlingUnitshipment.TransportEquipment.Add(TransportEquipmentshipmentapp);

                //TARJETA UNICA SECUNDARIA

                if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                {
                    //PLACA SECUNDARIA
                    TransportEquipmentshipmentapp.AttachedTransportEquipment = new List<IDOnlyA>();
                    IDOnlyA IDONLYA = new IDOnlyA();
                    TransportEquipmentshipmentapp.AttachedTransportEquipment.Add(IDONLYA);
                    IDONLYA.ID = new List<IDOnly>();
                    IDOnly OnlyID = new IDOnly();
                    OnlyID._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_AttachedTransportEquipment_ID__"].ToString();
                    IDONLYA.ID.Add(OnlyID);

                    //IDONLYA.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                    //ApplicableTransportMeans ApplicableTransportMeansid = new ApplicableTransportMeans();
                    //IDONLYA.ApplicableTransportMeans.Add(ApplicableTransportMeansid);
                    //ApplicableTransportMeansid.RegistrationNationalityID = new List<RegistrationNationalityID>();
                    //RegistrationNationalityID RegistrationNationalityIDtransportPLACA2 = new RegistrationNationalityID();
                    //RegistrationNationalityIDtransportPLACA2._ = "TARJETACER2";
                    //ApplicableTransportMeansid.RegistrationNationalityID.Add(RegistrationNationalityIDtransportPLACA2);
                    //END PLACA SECUNDARIA


                    ////ApplicableTransportMeans
                    //TransportEquipmentshipmentapp.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                    //ApplicableTransportMeans ApplicableTransportMeanstransport = new ApplicableTransportMeans();
                    //TransportEquipmentshipmentapp.ApplicableTransportMeans.Add(ApplicableTransportMeanstransport);


                    //    ApplicableTransportMeanstransport.RegistrationNationalityID = new List<RegistrationNationalityID>();
                    //    RegistrationNationalityID RegistrationNationalityIDtransport = new RegistrationNationalityID();
                    //    RegistrationNationalityIDtransport._ = dt.Rows[0]["TransportHandlingUnit_TransportEquipment_ApplicableTransportMeans_RegistrationNationalityID__"].ToString();

                    //    ApplicableTransportMeanstransport.RegistrationNationalityID.Add(RegistrationNationalityIDtransport);



                }




                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);



                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);


            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }

        //CHECK
        //CONSIGNACION PRIVADA
        public void ConvertirJsonAClases_ConsignacionPrivada(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);

                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();

                //NUEVO
                //ORDEN DE COMPRA

                Note noteordencompra = new Note();
                noteordencompra._ = dt.Rows[0]["Note_OCNRO"].ToString();
                noteordencompra.languageID = dt.Rows[0]["languageID_OCNRO"].ToString(); ;

                //MARCA 
                Note noteMARCA = new Note();
                noteMARCA._ = dt.Rows[0]["Note_MARCA"].ToString();
                noteMARCA.languageID = dt.Rows[0]["languageID_MARCA"].ToString(); ;

                //MARCA 2
                Note noteMARCA2 = new Note();
                noteMARCA2._ = dt.Rows[0]["Note_MARCA2"].ToString();
                noteMARCA2.languageID = dt.Rows[0]["languageID_MARCA2"].ToString(); ;
                //END 


                despatch.Note.Add(note);
                despatch.Note.Add(noteordencompra);
                despatch.Note.Add(noteMARCA);
                despatch.Note.Add(noteMARCA2);

                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString();
                despatch.LineCountNumeric.Add(linecountnumeric);

                //9. AdditionalDocumentReference ***************
                //despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                //AdditionalDocumentReference additional = new AdditionalDocumentReference();

                ////9.1 ID
                //despatch.AdditionalDocumentReference.Add(additional);
                //additional.ID = new List<IDOnly>();
                //IDOnly idonly = new IDOnly();
                //idonly._ = dt.Rows[0]["adref_id"].ToString();
                //additional.ID.Add(idonly);
                ////9.2 DocumentTypeCode
                //additional.DocumentTypeCode = new List<DocumentTypeCode>();
                //DocumentTypeCode documenttypecode = new DocumentTypeCode();
                //documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                //additional.DocumentTypeCode.Add(documenttypecode);
                ////9.3 DocumentType 
                //additional.DocumentType = new List<DocumentType>();
                //DocumentType documentype = new DocumentType();
                //documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                //additional.DocumentType.Add(documentype);
                ////9.4 IssueParty 
                //additional.IssuerParty = new List<IssuerParty>();
                //IssuerParty issuerparty = new IssuerParty();
                //additional.IssuerParty.Add(issuerparty);
                ////9.4.1
                //issuerparty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification partyidentification = new PartyIdentification();
                //issuerparty.PartyIdentification.Add(partyidentification);
                ////9.4.1.1
                //partyidentification.ID = new List<ID>();
                ////9.4.1.1.1
                //ID idadditional = new ID();
                //idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                //idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                //partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                //postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysub = new CitySubdivisionName();
                //citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                //postaladdress.CitySubdivisionName.Add(citysub);

                //CityName
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //DISTRICT
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                //postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                //citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                //postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(citynamedelivery);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentity = new CountrySubentity();
                countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);

                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                //13.5 TotalTransportHandlingUnitQuantity
                shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                TotalTransportHandlingUnitQuantity totaltransport = new TotalTransportHandlingUnitQuantity();
                totaltransport._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString();
                shipment.TotalTransportHandlingUnitQuantity.Add(totaltransport);
                //SpecialInstructions
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {

                    shipment.SpecialInstructions = new List<SpecialInstructions>();
                    SpecialInstructions shipmentSpecialInstrucions = new SpecialInstructions();
                    shipmentSpecialInstrucions._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(shipmentSpecialInstrucions);
                }

                //13.5 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);


                //PUBLICO
                //CARRIERPARTY - LISTA
                //shipmentStage.CarrierParty = new List<CarrierParty>();
                //CarrierParty CarrierParty = new CarrierParty();


                //CARRIERPARTY - PARTYIDENTIFICATION


                //CarrierParty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification PartyIdentification = new PartyIdentification();
                //CarrierParty.PartyIdentification.Add(PartyIdentification);
                //PartyIdentification.ID = new List<ID>();

                //ID idCarrierParty = new ID();

                //idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                //idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                //PartyIdentification.ID.Add(idCarrierParty);



                //CARRIERPARTY - PARTYLEGALENTITY
                //CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                //CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                ////PARTYLEGALENTITY - REGISTRATIONAME
                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                ////{


                //partyLegalEntity.RegistrationName = new List<RegistrationName>();
                //RegistrationName CarrierRegistrionName = new RegistrationName();

                //CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                //partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                ////}
                //partyLegalEntity.CompanyID = new List<CompanyID>();

                ////PARTYLEGALENTITY - COMPANYID
                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                ////{
                //CompanyID CarrierPartyCompanyID = new CompanyID();

                //CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                //partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                ////}
                ////CARRIERPARTY - AGENTPARTY

                //CarrierParty.AgentParty = new List<AgentParty>();

                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"] != DBNull.Value)
                ////{
                //AgentParty CarrierPartyAgentParty = new AgentParty();
                //CarrierParty.AgentParty.Add(CarrierPartyAgentParty);

                //CarrierPartyAgentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity CarrierPartyLegalEntity = new PartyLegalEntity();
                //CarrierPartyAgentParty.PartyLegalEntity.Add(CarrierPartyLegalEntity);


                //CarrierPartyLegalEntity.CompanyID = new List<CompanyID>();
                //CompanyID CarrierCompanyID = new CompanyID();
                //CarrierCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierCompanyID.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierPartyLegalEntity.CompanyID.Add(CarrierCompanyID);
                ////}

                //shipmentStage.CarrierParty.Add(CarrierParty);


                //Obtenemos propiedades

                //FOREACH SI VERIFICA SI HAY DATOS EN EL driverPerson
                //foreach (PropertyInfo propiedad in propiedadesCarrierParty)
                //{
                //    object valor = propiedad.GetValue(idCarrierParty, null);
                //    //if (propiedad.PropertyType.IsClass && propiedad.PropertyType != typeof(string))
                //    //{
                //    //    RecorrerPropiedades(propiedad.PropertyType, nombre + ".");
                //    //}

                //    if (valor != null)
                //    {
                //        //NO SE HACE NADA
                //    }
                //    else
                //    {
                //        //LA CLASE SE CONVIERTE EN NULL Y EL NETWONJSON ELIMINA LA CLASE
                //        shipmentStage.CarrierParty = null;
                //    }

                //}

                //END CARRIERPARTY


                //DESPATCHPARTY




                //END DESPATCHPARTY



                // END PUBLICO
                //ID
                ////DriverPerson
                //shipmentStage.DriverPerson = new List<DriverPerson>();
                //DriverPerson driverperson = new DriverPerson();
                //shipmentStage.DriverPerson.Add(driverperson);
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                    TransportHandlingUnit shipmentTransportHandlingUnit = new TransportHandlingUnit();
                    shipment.TransportHandlingUnit.Add(shipmentTransportHandlingUnit);

                    shipmentTransportHandlingUnit.TransportEquipment = new List<TransportEquipment>();
                    TransportEquipment TransportEquipmentshipment = new TransportEquipment();

                    TransportEquipmentshipment.ID = new List<IDOnly>();
                    IDOnly IDTransport = new IDOnly();
                    IDTransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                    TransportEquipmentshipment.ID.Add(IDTransport);
                    shipmentTransportHandlingUnit.TransportEquipment.Add(TransportEquipmentshipment);

                }
                else
                {
                    shipmentStage.DriverPerson = new List<DriverPerson>();
                    DriverPerson driverperson = new DriverPerson();



                    //if (Exists(shipmentStage.DriverPerson))
                    //{
                    //    MessageBox.Show("El objeto existe");
                    //}
                    //else 
                    //{
                    //    MessageBox.Show("El objeto NO existe");
                    //}


                    //ID             
                    ID iddriver = new ID();
                    if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"] != DBNull.Value)
                    {

                        driverperson.ID = new List<ID>();
                        iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                        iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                        driverperson.ID.Add(iddriver);

                    }

                    //else { shipmentStage.DriverPerson = null; }

                    if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"] != DBNull.Value)
                    {
                        //if (driverperson.FirstName != null)
                        //{

                        //}
                        driverperson.FirstName = new List<FirstName>();
                        FirstName firstname = new FirstName();
                        firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                        //{

                        driverperson.FirstName.Add(firstname);
                    }
                    //}

                    //Familiname
                    //string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                    if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"] != DBNull.Value)
                    {
                        if (driverperson.FirstName != null)
                        {
                            driverperson.FamilyName = new List<FamilyName>();
                        }
                        driverperson.FamilyName = new List<FamilyName>();
                        FamilyName familyname = new FamilyName();
                        familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                        driverperson.FamilyName.Add(familyname);
                    }
                    //JOBTITLE
                    if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"] != DBNull.Value)
                    {
                        driverperson.JobTitle = new List<JobTitle>();
                        JobTitle jobtitle = new JobTitle();
                        jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                        driverperson.JobTitle.Add(jobtitle);
                    }
                    //IdentityDocumentReference
                    if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"] != DBNull.Value)
                    {
                        driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                        IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                        driverperson.IdentityDocumentReference.Add(identitydocument);

                        identitydocument.ID = new List<IDOnly>();
                        IDOnly ididentity = new IDOnly();
                        ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                        identitydocument.ID.Add(ididentity);

                    }

                    shipmentStage.DriverPerson.Add(driverperson);

                }
                //if (propiedades == null)
                //{
                //    shipmentStage.DriverPerson = null;
                //}

                //13.6 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.6.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //CITYSUBDIVIONAME
                deliveryadrress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionname = new CitySubdivisionName();
                citysubdivionname._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CitySubdivisionName"].ToString();
                deliveryadrress.CitySubdivisionName.Add(citysubdivionname);

                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);

                //  13.6.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                //  13.6.2.1 DELIVERY DESPATCH 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                //CITYSUBDIVIONAME
                despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //DESPATCHPARTY 
                //despatchdelivery.DespatchParty = new List<DespatchParty>();
                //DespatchParty despatchparty = new DespatchParty();
                //despatchdelivery.DespatchParty.Add(despatchparty);



                //if (dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                //{
                //despatchparty.AgentParty = new List<AgentParty>();
                //AgentParty agentParty = new AgentParty();
                //despatchparty.AgentParty.Add(agentParty);

                //agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                //agentParty.PartyLegalEntity.Add(partylegalentityagent);

                //partylegalentityagent.CompanyID = new List<CompanyID>();
                //CompanyID companyid = new CompanyID();
                //companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                //companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //partylegalentityagent.CompanyID.Add(companyid);

                //13.7 TransportHandlingUnit
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit transporthand = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(transporthand);

                transporthand.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment transportequipment = new TransportEquipment();
                transporthand.TransportEquipment.Add(transportequipment);

                transportequipment.ID = new List<IDOnly>();
                IDOnly idtransport = new IDOnly();
                idtransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                transportequipment.ID.Add(idtransport);



                //PLACA SECUNDARIA
                transportequipment.AttachedTransportEquipment = new List<IDOnlyA>();
                IDOnlyA IDONLYA = new IDOnlyA();
                transportequipment.AttachedTransportEquipment.Add(IDONLYA);
                IDONLYA.ID = new List<IDOnly>();
                IDOnly OnlyID = new IDOnly();
                OnlyID._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_AttachedTransportEquipment_ID__"].ToString();
                IDONLYA.ID.Add(OnlyID);
                //TARJETA CER2 NO VA
                //IDONLYA.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //ApplicableTransportMeans ApplicableTransportMeansid = new ApplicableTransportMeans();
                //IDONLYA.ApplicableTransportMeans.Add(ApplicableTransportMeansid);
                //ApplicableTransportMeansid.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //RegistrationNationalityID RegistrationNationalityIDtransportPLACA2 = new RegistrationNationalityID();
                //RegistrationNationalityIDtransportPLACA2._ = "TARJETACER2";
                //ApplicableTransportMeansid.RegistrationNationalityID.Add(RegistrationNationalityIDtransportPLACA2);
                //END PLACA SECUNDARIA


                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);

                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);

                //Type tipoClaseAnidada = roo2.DespatchAdvice;
                //string jsonarreglado = RecorrerPropiedades(despatch);
                //Assembly ensamblado = Assembly.GetExecutingAssembly();
                //RecorrerPropiedades(roo2);

            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }
        //CHECK
        //CONSIGNACION PUBLICA
        public void ConvertirJsonAClases_ConsignacionPublica(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);

                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();

                //NUEVO
                //ORDEN DE COMPRA

                Note noteordencompra = new Note();
                noteordencompra._ = dt.Rows[0]["Note_OCNRO"].ToString();
                noteordencompra.languageID = dt.Rows[0]["languageID_OCNRO"].ToString(); ;

                //MARCA 
                Note noteMARCA = new Note();
                noteMARCA._ = dt.Rows[0]["Note_MARCA"].ToString();
                noteMARCA.languageID = dt.Rows[0]["languageID_MARCA"].ToString(); ;

                //MARCA 2
                Note noteMARCA2 = new Note();
                noteMARCA2._ = dt.Rows[0]["Note_MARCA2"].ToString();
                noteMARCA2.languageID = dt.Rows[0]["languageID_MARCA2"].ToString(); ;
                //END 


                despatch.Note.Add(note);
                despatch.Note.Add(noteordencompra);
                despatch.Note.Add(noteMARCA);
                despatch.Note.Add(noteMARCA2);

                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);

                //9. AdditionalDocumentReference ***************
                //despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                //AdditionalDocumentReference additional = new AdditionalDocumentReference();

                ////9.1 ID
                //despatch.AdditionalDocumentReference.Add(additional);
                //additional.ID = new List<IDOnly>();
                //IDOnly idonly = new IDOnly();
                //idonly._ = dt.Rows[0]["adref_id"].ToString();
                //additional.ID.Add(idonly);
                ////9.2 DocumentTypeCode
                //additional.DocumentTypeCode = new List<DocumentTypeCode>();
                //DocumentTypeCode documenttypecode = new DocumentTypeCode();
                //documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                //additional.DocumentTypeCode.Add(documenttypecode);
                ////9.3 DocumentType 
                //additional.DocumentType = new List<DocumentType>();
                //DocumentType documentype = new DocumentType();
                //documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                //additional.DocumentType.Add(documentype);
                ////9.4 IssueParty 
                //additional.IssuerParty = new List<IssuerParty>();
                //IssuerParty issuerparty = new IssuerParty();
                //additional.IssuerParty.Add(issuerparty);
                ////9.4.1
                //issuerparty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification partyidentification = new PartyIdentification();
                //issuerparty.PartyIdentification.Add(partyidentification);
                ////9.4.1.1
                //partyidentification.ID = new List<ID>();
                ////9.4.1.1.1
                //ID idadditional = new ID();
                //idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                //idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                //partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                //postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysub = new CitySubdivisionName();
                //citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                //postaladdress.CitySubdivisionName.Add(citysub);

                //COUNTRYSUBENTITY -- DEpartamento
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //CityName -- Provincia
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //DISTRICT -- Distrito
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                //postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                //citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                //postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(citynamedelivery);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentity = new CountrySubentity();
                countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);





                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                //13.5 TotalTransportHandlingUnitQuantity
                shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                TotalTransportHandlingUnitQuantity totaltransport = new TotalTransportHandlingUnitQuantity();
                totaltransport._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString();
                shipment.TotalTransportHandlingUnitQuantity.Add(totaltransport);

                //SpecialInstructions
                shipment.SpecialInstructions = new List<SpecialInstructions>();

                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {

                    SpecialInstructions specialinstructions = new SpecialInstructions();
                    specialinstructions._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(specialinstructions);
                }
                //indicador muestra chofer y vehiculo
                if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                {
                    SpecialInstructions SUNAT_Envio_IndicadorVehiculoConductoresTransp = new SpecialInstructions();
                    SUNAT_Envio_IndicadorVehiculoConductoresTransp._ = dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString();
                    shipment.SpecialInstructions.Add(SUNAT_Envio_IndicadorVehiculoConductoresTransp);
                }

                //13.5 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);

                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                    TransportHandlingUnit shipmentTransportHandlingUnit = new TransportHandlingUnit();
                    shipment.TransportHandlingUnit.Add(shipmentTransportHandlingUnit);

                    shipmentTransportHandlingUnit.TransportEquipment = new List<TransportEquipment>();
                    TransportEquipment TransportEquipmentshipment = new TransportEquipment();

                    TransportEquipmentshipment.ID = new List<IDOnly>();
                    IDOnly IDTransport = new IDOnly();
                    IDTransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                    TransportEquipmentshipment.ID.Add(IDTransport);
                    shipmentTransportHandlingUnit.TransportEquipment.Add(TransportEquipmentshipment);

                }
                else
                {
                    //PUBLICO
                    //   CARRIERPARTY - LISTA
                    shipmentStage.CarrierParty = new List<CarrierParty>();
                    CarrierParty CarrierParty = new CarrierParty();


                    // CARRIERPARTY - PARTYIDENTIFICATION


                    CarrierParty.PartyIdentification = new List<PartyIdentification>();
                    PartyIdentification PartyIdentification = new PartyIdentification();
                    CarrierParty.PartyIdentification.Add(PartyIdentification);
                    PartyIdentification.ID = new List<ID>();

                    ID idCarrierParty = new ID();

                    idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                    idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                    PartyIdentification.ID.Add(idCarrierParty);



                    // CARRIERPARTY - PARTYLEGALENTITY
                    CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                    PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                    CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                    //PARTYLEGALENTITY - REGISTRATIONAME
                    //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                    //{


                    partyLegalEntity.RegistrationName = new List<RegistrationName>();
                    RegistrationName CarrierRegistrionName = new RegistrationName();

                    CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                    partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                    //}
                    partyLegalEntity.CompanyID = new List<CompanyID>();

                    //PARTYLEGALENTITY - COMPANYID
                    //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                    //{
                    CompanyID CarrierPartyCompanyID = new CompanyID();

                    CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                    partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                    //}
                    //CARRIERPARTY - AGENTPARTY

                    //CarrierParty.AgentParty = new List<AgentParty>();

                    ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"] != DBNull.Value)
                    ////{
                    //AgentParty CarrierPartyAgentParty = new AgentParty();
                    //CarrierParty.AgentParty.Add(CarrierPartyAgentParty);

                    //CarrierPartyAgentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                    //PartyLegalEntity CarrierPartyLegalEntity = new PartyLegalEntity();
                    //CarrierPartyAgentParty.PartyLegalEntity.Add(CarrierPartyLegalEntity);


                    //CarrierPartyLegalEntity.CompanyID = new List<CompanyID>();
                    //CompanyID CarrierCompanyID = new CompanyID();
                    //CarrierCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                    //CarrierCompanyID.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                    //CarrierPartyLegalEntity.CompanyID.Add(CarrierCompanyID);
                    //}

                    shipmentStage.CarrierParty.Add(CarrierParty);

                    if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                    {
                        //DRIVERPERSON 
                        shipmentStage.DriverPerson = new List<DriverPerson>();
                        DriverPerson driverperson = new DriverPerson();
                        //ID             
                        ID iddriver = new ID();
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"] != DBNull.Value)
                        {

                            driverperson.ID = new List<ID>();
                            iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                            iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                            driverperson.ID.Add(iddriver);

                        }

                        //else { shipmentStage.DriverPerson = null; }

                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"] != DBNull.Value)
                        {
                            //if (driverperson.FirstName != null)
                            //{

                            //}
                            driverperson.FirstName = new List<FirstName>();
                            FirstName firstname = new FirstName();
                            firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                            //{

                            driverperson.FirstName.Add(firstname);
                        }
                        //}

                        //Familiname
                        //string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"] != DBNull.Value)
                        {
                            if (driverperson.FirstName != null)
                            {
                                driverperson.FamilyName = new List<FamilyName>();
                            }
                            driverperson.FamilyName = new List<FamilyName>();
                            FamilyName familyname = new FamilyName();
                            familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                            driverperson.FamilyName.Add(familyname);
                        }
                        //JOBTITLE
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"] != DBNull.Value)
                        {
                            driverperson.JobTitle = new List<JobTitle>();
                            JobTitle jobtitle = new JobTitle();
                            jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                            driverperson.JobTitle.Add(jobtitle);
                        }
                        //IdentityDocumentReference
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"] != DBNull.Value)
                        {
                            driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                            IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                            driverperson.IdentityDocumentReference.Add(identitydocument);

                            identitydocument.ID = new List<IDOnly>();
                            IDOnly ididentity = new IDOnly();
                            ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                            identitydocument.ID.Add(ididentity);

                        }

                        shipmentStage.DriverPerson.Add(driverperson);
                    }
                }
                //Obtenemos propiedades

                //FOREACH SI VERIFICA SI HAY DATOS EN EL driverPerson
                //foreach (PropertyInfo propiedad in propiedadesCarrierParty)
                //{
                //    object valor = propiedad.GetValue(idCarrierParty, null);
                //    //if (propiedad.PropertyType.IsClass && propiedad.PropertyType != typeof(string))
                //    //{
                //    //    RecorrerPropiedades(propiedad.PropertyType, nombre + ".");
                //    //}

                //    if (valor != null)
                //    {
                //        //NO SE HACE NADA
                //    }
                //    else
                //    {
                //        //LA CLASE SE CONVIERTE EN NULL Y EL NETWONJSON ELIMINA LA CLASE
                //        shipmentStage.CarrierParty = null;
                //    }

                //}

                //END CARRIERPARTY


                //DESPATCHPARTY




                //END DESPATCHPARTY



                // END PUBLICO
                //ID
                ////DriverPerson
                //shipmentStage.DriverPerson = new List<DriverPerson>();
                //DriverPerson driverperson = new DriverPerson();
                //shipmentStage.DriverPerson.Add(driverperson);

                //shipmentStage.DriverPerson = new List<DriverPerson>();
                //DriverPerson driverperson = new DriverPerson();



                ////if (Exists(shipmentStage.DriverPerson))
                ////{
                ////    MessageBox.Show("El objeto existe");
                ////}
                ////else 
                ////{
                ////    MessageBox.Show("El objeto NO existe");
                ////}


                ////ID             
                //ID iddriver = new ID();
                //if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"] != DBNull.Value)
                //{

                //    driverperson.ID = new List<ID>();
                //    iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                //    iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                //    driverperson.ID.Add(iddriver);

                //}

                ////else { shipmentStage.DriverPerson = null; }

                //if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"] != DBNull.Value)
                //{
                //    //if (driverperson.FirstName != null)
                //    //{

                //    //}
                //    driverperson.FirstName = new List<FirstName>();
                //    FirstName firstname = new FirstName();
                //    firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                //    //{

                //    driverperson.FirstName.Add(firstname);
                //}
                ////}

                ////Familiname
                ////string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                //if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"] != DBNull.Value)
                //{
                //    if (driverperson.FirstName != null)
                //    {
                //        driverperson.FamilyName = new List<FamilyName>();
                //    }
                //    driverperson.FamilyName = new List<FamilyName>();
                //    FamilyName familyname = new FamilyName();
                //    familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                //    driverperson.FamilyName.Add(familyname);
                //}
                ////JOBTITLE
                //if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"] != DBNull.Value)
                //{
                //    driverperson.JobTitle = new List<JobTitle>();
                //    JobTitle jobtitle = new JobTitle();
                //    jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                //    driverperson.JobTitle.Add(jobtitle);
                //}
                ////IdentityDocumentReference
                //if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"] != DBNull.Value)
                //{
                //    driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                //    IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                //    driverperson.IdentityDocumentReference.Add(identitydocument);

                //    identitydocument.ID = new List<IDOnly>();
                //    IDOnly ididentity = new IDOnly();
                //    ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                //    identitydocument.ID.Add(ididentity);

                //}

                //shipmentStage.DriverPerson.Add(driverperson);


                //if (propiedades == null)
                //{
                //    shipmentStage.DriverPerson = null;
                //}

                //13.6 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.6.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //CITYSUBDIVIONAME
                deliveryadrress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionname = new CitySubdivisionName();
                citysubdivionname._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CitySubdivisionName"].ToString();
                deliveryadrress.CitySubdivisionName.Add(citysubdivionname);

                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);

                //  13.6.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                //  13.6.2.1 DELIVERY DESPATCH 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                //CITYSUBDIVIONAME
                despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //DESPATCHPARTY 
                despatchdelivery.DespatchParty = new List<DespatchParty>();
                DespatchParty despatchparty = new DespatchParty();



                //if (dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                //{
                despatchparty.AgentParty = new List<AgentParty>();
                AgentParty agentParty = new AgentParty();
                despatchparty.AgentParty.Add(agentParty);

                agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                agentParty.PartyLegalEntity.Add(partylegalentityagent);

                partylegalentityagent.CompanyID = new List<CompanyID>();
                CompanyID companyid = new CompanyID();
                companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();

                partylegalentityagent.CompanyID.Add(companyid);
                //}
                despatchdelivery.DespatchParty.Add(despatchparty);

                //13.7 TransportHandlingUnit
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit transporthand = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(transporthand);

                transporthand.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment transportequipment = new TransportEquipment();
                transporthand.TransportEquipment.Add(transportequipment);


                transportequipment.ID = new List<IDOnly>();
                IDOnly idtransport = new IDOnly();
                idtransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                transportequipment.ID.Add(idtransport);

                //PLACA SECUNDARIA
                transportequipment.AttachedTransportEquipment = new List<IDOnlyA>();
                IDOnlyA IDONLYA = new IDOnlyA();
                transportequipment.AttachedTransportEquipment.Add(IDONLYA);
                IDONLYA.ID = new List<IDOnly>();
                IDOnly OnlyID = new IDOnly();
                OnlyID._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_AttachedTransportEquipment_ID__"].ToString();
                IDONLYA.ID.Add(OnlyID);

                //IDONLYA.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //ApplicableTransportMeans ApplicableTransportMeansid = new ApplicableTransportMeans();
                //IDONLYA.ApplicableTransportMeans.Add(ApplicableTransportMeansid);
                //ApplicableTransportMeansid.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //RegistrationNationalityID RegistrationNationalityIDtransportPLACA2 = new RegistrationNationalityID();
                //RegistrationNationalityIDtransportPLACA2._ = "TARJETACER2";
                //ApplicableTransportMeansid.RegistrationNationalityID.Add(RegistrationNationalityIDtransportPLACA2);

                //if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                //{
                //    //transportequipment.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //    //ApplicableTransportMeans ApplicableTransportMeanstransport = new ApplicableTransportMeans();
                //    //transportequipment.ApplicableTransportMeans.Add(ApplicableTransportMeanstransport);

                //    //ApplicableTransportMeanstransport.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //    //RegistrationNationalityID RegistrationNationalityIDapplicable = new RegistrationNationalityID();
                //    //RegistrationNationalityIDapplicable._ = dt.Rows[0]["TransportHandlingUnit_TransportEquipment_ApplicableTransportMeans_RegistrationNationalityID__"].ToString();
                //    //ApplicableTransportMeanstransport.RegistrationNationalityID.Add(RegistrationNationalityIDapplicable);
                //}
                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);

                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);


                //Type tipoClaseAnidada = roo2.DespatchAdvice;
                //string jsonarreglado = RecorrerPropiedades(despatch);
                //Assembly ensamblado = Assembly.GetExecutingAssembly();
                //RecorrerPropiedades(roo2);

            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }

        //VENTA CON ENTERGA A TERCEROS 

        //VENTA CON ENTERGA A TERCEROS - PRIVADA
        public void ConvertirJsonAClases_VentaConEntregaATercerosPrivada(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);

                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();

                //NUEVO
                //ORDEN DE COMPRA

                Note noteordencompra = new Note();
                noteordencompra._ = dt.Rows[0]["Note_OCNRO"].ToString();
                noteordencompra.languageID = dt.Rows[0]["languageID_OCNRO"].ToString(); ;

                //MARCA 
                Note noteMARCA = new Note();
                noteMARCA._ = dt.Rows[0]["Note_MARCA"].ToString();
                noteMARCA.languageID = dt.Rows[0]["languageID_MARCA"].ToString(); ;

                //MARCA 2
                Note noteMARCA2 = new Note();
                noteMARCA2._ = dt.Rows[0]["Note_MARCA2"].ToString();
                noteMARCA2.languageID = dt.Rows[0]["languageID_MARCA2"].ToString(); ;
                //END 


                despatch.Note.Add(note);
                despatch.Note.Add(noteordencompra);
                despatch.Note.Add(noteMARCA);
                despatch.Note.Add(noteMARCA2);

                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);

                //9. AdditionalDocumentReference ***************
                //despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                //AdditionalDocumentReference additional = new AdditionalDocumentReference();

                ////9.1 ID
                //despatch.AdditionalDocumentReference.Add(additional);
                //additional.ID = new List<IDOnly>();
                //IDOnly idonly = new IDOnly();
                //idonly._ = dt.Rows[0]["adref_id"].ToString();
                //additional.ID.Add(idonly);
                ////9.2 DocumentTypeCode
                //additional.DocumentTypeCode = new List<DocumentTypeCode>();
                //DocumentTypeCode documenttypecode = new DocumentTypeCode();
                //documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                //additional.DocumentTypeCode.Add(documenttypecode);
                ////9.3 DocumentType 
                //additional.DocumentType = new List<DocumentType>();
                //DocumentType documentype = new DocumentType();
                //documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                //additional.DocumentType.Add(documentype);
                ////9.4 IssueParty 
                //additional.IssuerParty = new List<IssuerParty>();
                //IssuerParty issuerparty = new IssuerParty();
                //additional.IssuerParty.Add(issuerparty);
                ////9.4.1
                //issuerparty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification partyidentification = new PartyIdentification();
                //issuerparty.PartyIdentification.Add(partyidentification);
                ////9.4.1.1
                //partyidentification.ID = new List<ID>();
                ////9.4.1.1.1
                //ID idadditional = new ID();
                //idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                //idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                //partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysub = new CitySubdivisionName();
                citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdress.CitySubdivisionName.Add(citysub);

                //CityName
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //DISTRICT
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(citynamedelivery);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                //postaladdress.CountrySubentity = new List<CountrySubentity>();
                //CountrySubentity countrysubentity = new CountrySubentity();
                //countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                //postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);


                //BuyerCustomerParty
                despatch.BuyerCustomerParty = new List<BuyerCustomerParty>();
                BuyerCustomerParty BuyerCustomerPartydespatch = new BuyerCustomerParty();
                despatch.BuyerCustomerParty.Add(BuyerCustomerPartydespatch);

                //Party
                BuyerCustomerPartydespatch.Party = new List<Party>();
                Party PartyBuyer = new Party();
                BuyerCustomerPartydespatch.Party.Add(PartyBuyer);

                //PartyIdentification
                PartyBuyer.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification PartyIdentificationBuyer = new PartyIdentification();
                PartyBuyer.PartyIdentification.Add(PartyIdentificationBuyer);

                //ID
                PartyIdentificationBuyer.ID = new List<ID>();
                ID IDBuyer = new ID();
                IDBuyer._ = dt.Rows[0]["BuyerCustomerParty_Party_PartyIdentification_ID_"].ToString();
                IDBuyer.schemeID = dt.Rows[0]["BuyerCustomerParty_Party_PartyIdentification_schemeID"].ToString();
                PartyIdentificationBuyer.ID.Add(IDBuyer);

                //POSTALADDRESS
                PartyBuyer.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly PostalAddress_IDOnlyBuyer = new PostalAddress_IDOnly();
                PartyBuyer.PostalAddress.Add(PostalAddress_IDOnlyBuyer);

                //ID
                PostalAddress_IDOnlyBuyer.ID = new List<IDOnly>();
                IDOnly IDOnlyBuyer = new IDOnly();
                IDOnlyBuyer._ = dt.Rows[0]["BuyerCustomerParty_Party_PostalAddress_ID_"].ToString();
                PostalAddress_IDOnlyBuyer.ID.Add(IDOnlyBuyer);
                //STREETNAME
                PostalAddress_IDOnlyBuyer.StreetName = new List<StreetName>();
                StreetName StreetNameBuyer = new StreetName();
                StreetNameBuyer._ = dt.Rows[0]["BuyerCustomerParty_Party_PostalAddress_StreetName_"].ToString();
                PostalAddress_IDOnlyBuyer.StreetName.Add(StreetNameBuyer);

                //CITYNAME
                PostalAddress_IDOnlyBuyer.CityName = new List<CityName>();
                CityName CityNameBuyer = new CityName();
                CityNameBuyer._ = dt.Rows[0]["BuyerCustomerParty_Party_PostalAddress_CityName_"].ToString();
                PostalAddress_IDOnlyBuyer.CityName.Add(CityNameBuyer);

                //COUNTRYSUBENTITY
                PostalAddress_IDOnlyBuyer.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity CountrySubentityPostalAddressBuyer = new CountrySubentity();
                CountrySubentityPostalAddressBuyer._ = dt.Rows[0]["BuyerCustomerParty_Party_PostalAddress_CountrySubentity_"].ToString();
                PostalAddress_IDOnlyBuyer.CountrySubentity.Add(CountrySubentityPostalAddressBuyer);

                //District
                PostalAddress_IDOnlyBuyer.District = new List<District>();
                District DistrictPostalAddress = new District();
                DistrictPostalAddress._ = dt.Rows[0]["BuyerCustomerParty_Party_PostalAddress_District_"].ToString();
                PostalAddress_IDOnlyBuyer.District.Add(DistrictPostalAddress);

                //COUNTRY
                PostalAddress_IDOnlyBuyer.Country = new List<Country>();
                Country CountryPostalAddressBuyer = new Country();
                PostalAddress_IDOnlyBuyer.Country.Add(CountryPostalAddressBuyer);

                CountryPostalAddressBuyer.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode IdentificationCodeCountryBuyer = new IdentificationCode();
                IdentificationCodeCountryBuyer._ = "";
                CountryPostalAddressBuyer.IdentificationCode.Add(IdentificationCodeCountryBuyer);

                //END POSTALADDRESS

                //PARTYLEGALENTITY
                PartyBuyer.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity PartyLegalEntityPartyBuyer = new PartyLegalEntity();
                PartyBuyer.PartyLegalEntity.Add(PartyLegalEntityPartyBuyer);

                PartyLegalEntityPartyBuyer.RegistrationName = new List<RegistrationName>();
                RegistrationName RegistrationNamePartyBuyer = new RegistrationName();
                RegistrationNamePartyBuyer._ = dt.Rows[0]["BuyerCustomerParty_Party_PartyLegalEntity_RegistrationName_"].ToString();
                PartyLegalEntityPartyBuyer.RegistrationName.Add(RegistrationNamePartyBuyer);

                //ENDPARTYLEGALENTITY

                //END BUYERCUSTOMERPARTY


                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                //13.5 TotalTransportHandlingUnitQuantity
                shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                TotalTransportHandlingUnitQuantity totaltransport = new TotalTransportHandlingUnitQuantity();
                totaltransport._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString();
                shipment.TotalTransportHandlingUnitQuantity.Add(totaltransport);

                //SpecialInstructions
                shipment.SpecialInstructions = new List<SpecialInstructions>();
                // indicador m1
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {

                    SpecialInstructions specialinstructions = new SpecialInstructions();
                    specialinstructions._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(specialinstructions);
                }

                //END
                //13.5 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);


                //PUBLICO
                ////CARRIERPARTY - LISTA
                //shipmentStage.CarrierParty = new List<CarrierParty>();
                //CarrierParty CarrierParty = new CarrierParty();


                ////CARRIERPARTY - PARTYIDENTIFICATION


                //CarrierParty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification PartyIdentification = new PartyIdentification();
                //CarrierParty.PartyIdentification.Add(PartyIdentification);
                //PartyIdentification.ID = new List<ID>();

                //ID idCarrierParty = new ID();

                //idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                //idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                //PartyIdentification.ID.Add(idCarrierParty);



                ////CARRIERPARTY - PARTYLEGALENTITY
                //CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                //CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                ////PARTYLEGALENTITY - REGISTRATIONAME
                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                ////{


                //partyLegalEntity.RegistrationName = new List<RegistrationName>();
                //RegistrationName CarrierRegistrionName = new RegistrationName();

                //CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                //partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                ////}
                //partyLegalEntity.CompanyID = new List<CompanyID>();

                ////PARTYLEGALENTITY - COMPANYID
                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                ////{
                //CompanyID CarrierPartyCompanyID = new CompanyID();

                //CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                //partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                ////}
                ////CARRIERPARTY - AGENTPARTY

                //CarrierParty.AgentParty = new List<AgentParty>();

                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"] != DBNull.Value)
                ////{
                //AgentParty CarrierPartyAgentParty = new AgentParty();
                //CarrierParty.AgentParty.Add(CarrierPartyAgentParty);

                //CarrierPartyAgentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity CarrierPartyLegalEntity = new PartyLegalEntity();
                //CarrierPartyAgentParty.PartyLegalEntity.Add(CarrierPartyLegalEntity);


                //CarrierPartyLegalEntity.CompanyID = new List<CompanyID>();
                //CompanyID CarrierCompanyID = new CompanyID();
                //CarrierCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierCompanyID.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierPartyLegalEntity.CompanyID.Add(CarrierCompanyID);
                ////}

                //shipmentStage.CarrierParty.Add(CarrierParty);

                ////END CARRIERPARTY


                //DESPATCHPARTY




                //END DESPATCHPARTY



                // END PUBLICO
                //ID
                ////DriverPerson
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                    TransportHandlingUnit shipmentTransportHandlingUnit = new TransportHandlingUnit();
                    shipment.TransportHandlingUnit.Add(shipmentTransportHandlingUnit);

                    shipmentTransportHandlingUnit.TransportEquipment = new List<TransportEquipment>();
                    TransportEquipment TransportEquipmentshipment = new TransportEquipment();

                    TransportEquipmentshipment.ID = new List<IDOnly>();
                    IDOnly IDTransport = new IDOnly();
                    IDTransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                    TransportEquipmentshipment.ID.Add(IDTransport);
                    shipmentTransportHandlingUnit.TransportEquipment.Add(TransportEquipmentshipment);

                }
                else
                {
                    shipmentStage.DriverPerson = new List<DriverPerson>();
                    DriverPerson driverperson = new DriverPerson();



                    //ID             
                    ID iddriver = new ID();


                    driverperson.ID = new List<ID>();
                    iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                    iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                    driverperson.ID.Add(iddriver);



                    driverperson.FirstName = new List<FirstName>();
                    FirstName firstname = new FirstName();
                    firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                    //{

                    driverperson.FirstName.Add(firstname);



                    //Familiname
                    //string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();

                    if (driverperson.FirstName != null)
                    {
                        driverperson.FamilyName = new List<FamilyName>();
                    }
                    driverperson.FamilyName = new List<FamilyName>();
                    FamilyName familyname = new FamilyName();
                    familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                    driverperson.FamilyName.Add(familyname);

                    //JOBTITLE

                    driverperson.JobTitle = new List<JobTitle>();
                    JobTitle jobtitle = new JobTitle();
                    jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                    driverperson.JobTitle.Add(jobtitle);

                    //IdentityDocumentReference
                    driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                    IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                    driverperson.IdentityDocumentReference.Add(identitydocument);

                    identitydocument.ID = new List<IDOnly>();
                    IDOnly ididentity = new IDOnly();
                    ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                    identitydocument.ID.Add(ididentity);



                    shipmentStage.DriverPerson.Add(driverperson);

                }
                //13.6 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.6.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //CITYSUBDIVIONAME
                deliveryadrress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionname = new CitySubdivisionName();
                citysubdivionname._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CitySubdivisionName"].ToString();
                deliveryadrress.CitySubdivisionName.Add(citysubdivionname);

                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);

                //  13.6.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                //  13.6.2.1 DELIVERY DESPATCH 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                //CITYSUBDIVIONAME
                despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //DESPATCHPARTY 
                //despatchdelivery.DespatchParty = new List<DespatchParty>();
                //DespatchParty despatchparty = new DespatchParty();
                //despatchdelivery.DespatchParty.Add(despatchparty);



                ////if (dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                ////{
                //despatchparty.AgentParty = new List<AgentParty>();
                //AgentParty agentParty = new AgentParty();
                //despatchparty.AgentParty.Add(agentParty);

                //agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                //agentParty.PartyLegalEntity.Add(partylegalentityagent);

                //partylegalentityagent.CompanyID = new List<CompanyID>();
                //CompanyID companyid = new CompanyID();
                //companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                //companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //partylegalentityagent.CompanyID.Add(companyid);
                ////}


                //13.7 TransportHandlingUnit
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit transporthand = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(transporthand);
                //TRANSPORTEQUIPMENT
                transporthand.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment transportequipment = new TransportEquipment();
                transporthand.TransportEquipment.Add(transportequipment);
                //TRANSPORT ID 
                transportequipment.ID = new List<IDOnly>();
                IDOnly idtransport = new IDOnly();
                idtransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                transportequipment.ID.Add(idtransport);

                //PLACA SECUNDARIA
                transportequipment.AttachedTransportEquipment = new List<IDOnlyA>();
                IDOnlyA IDONLYA = new IDOnlyA();
                transportequipment.AttachedTransportEquipment.Add(IDONLYA);
                IDONLYA.ID = new List<IDOnly>();
                IDOnly OnlyID = new IDOnly();
                OnlyID._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_AttachedTransportEquipment_ID__"].ToString();
                IDONLYA.ID.Add(OnlyID);
                //TARJETA CER2 NO VA
                //IDONLYA.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //ApplicableTransportMeans ApplicableTransportMeansid = new ApplicableTransportMeans();
                //IDONLYA.ApplicableTransportMeans.Add(ApplicableTransportMeansid);
                //ApplicableTransportMeansid.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //RegistrationNationalityID RegistrationNationalityIDtransportPLACA2 = new RegistrationNationalityID();
                //RegistrationNationalityIDtransportPLACA2._ = "TARJETACER2";
                //ApplicableTransportMeansid.RegistrationNationalityID.Add(RegistrationNationalityIDtransportPLACA2);
                //END PLACA SECUNDARIA



                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);

                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);


                //Type tipoClaseAnidada = roo2.DespatchAdvice;
                //string jsonarreglado = RecorrerPropiedades(despatch);
                //RecorrerPropiedades(roo2);

            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }

        //VENTA CON ENTREGA A TERCEROS PUBLICA
        public void ConvertirJsonAClases_VentaConEntregaATercerosPublica(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);

                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();

                //NUEVO
                //ORDEN DE COMPRA

                Note noteordencompra = new Note();
                noteordencompra._ = dt.Rows[0]["Note_OCNRO"].ToString();
                noteordencompra.languageID = dt.Rows[0]["languageID_OCNRO"].ToString(); ;

                //MARCA 
                Note noteMARCA = new Note();
                noteMARCA._ = dt.Rows[0]["Note_MARCA"].ToString();
                noteMARCA.languageID = dt.Rows[0]["languageID_MARCA"].ToString(); ;

                //MARCA 2
                Note noteMARCA2 = new Note();
                noteMARCA2._ = dt.Rows[0]["Note_MARCA2"].ToString();
                noteMARCA2.languageID = dt.Rows[0]["languageID_MARCA2"].ToString(); ;
                //END 


                despatch.Note.Add(note);
                despatch.Note.Add(noteordencompra);
                despatch.Note.Add(noteMARCA);
                despatch.Note.Add(noteMARCA2);

                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);

                //9. AdditionalDocumentReference ***************
                //despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                //AdditionalDocumentReference additional = new AdditionalDocumentReference();

                ////9.1 ID
                //despatch.AdditionalDocumentReference.Add(additional);
                //additional.ID = new List<IDOnly>();
                //IDOnly idonly = new IDOnly();
                //idonly._ = dt.Rows[0]["adref_id"].ToString();
                //additional.ID.Add(idonly);
                ////9.2 DocumentTypeCode
                //additional.DocumentTypeCode = new List<DocumentTypeCode>();
                //DocumentTypeCode documenttypecode = new DocumentTypeCode();
                //documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                //additional.DocumentTypeCode.Add(documenttypecode);
                ////9.3 DocumentType 
                //additional.DocumentType = new List<DocumentType>();
                //DocumentType documentype = new DocumentType();
                //documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                //additional.DocumentType.Add(documentype);
                ////9.4 IssueParty 
                //additional.IssuerParty = new List<IssuerParty>();
                //IssuerParty issuerparty = new IssuerParty();
                //additional.IssuerParty.Add(issuerparty);
                ////9.4.1
                //issuerparty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification partyidentification = new PartyIdentification();
                //issuerparty.PartyIdentification.Add(partyidentification);
                ////9.4.1.1
                //partyidentification.ID = new List<ID>();
                ////9.4.1.1.1
                //ID idadditional = new ID();
                //idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                //idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                //partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysub = new CitySubdivisionName();
                citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdress.CitySubdivisionName.Add(citysub);

                //CityName
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //DISTRICT
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(citynamedelivery);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                //postaladdress.CountrySubentity = new List<CountrySubentity>();
                //CountrySubentity countrysubentity = new CountrySubentity();
                //countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                //postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);


                //BuyerCustomerParty
                despatch.BuyerCustomerParty = new List<BuyerCustomerParty>();
                BuyerCustomerParty BuyerCustomerPartydespatch = new BuyerCustomerParty();
                despatch.BuyerCustomerParty.Add(BuyerCustomerPartydespatch);

                //Party
                BuyerCustomerPartydespatch.Party = new List<Party>();
                Party PartyBuyer = new Party();
                BuyerCustomerPartydespatch.Party.Add(PartyBuyer);

                //PartyIdentification
                PartyBuyer.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification PartyIdentificationBuyer = new PartyIdentification();
                PartyBuyer.PartyIdentification.Add(PartyIdentificationBuyer);

                //ID
                PartyIdentificationBuyer.ID = new List<ID>();
                ID IDBuyer = new ID();
                IDBuyer._ = dt.Rows[0]["BuyerCustomerParty_Party_PartyIdentification_ID_"].ToString();
                IDBuyer.schemeID = dt.Rows[0]["BuyerCustomerParty_Party_PartyIdentification_schemeID"].ToString();
                PartyIdentificationBuyer.ID.Add(IDBuyer);

                //POSTALADDRESS
                PartyBuyer.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly PostalAddress_IDOnlyBuyer = new PostalAddress_IDOnly();
                PartyBuyer.PostalAddress.Add(PostalAddress_IDOnlyBuyer);

                //ID
                PostalAddress_IDOnlyBuyer.ID = new List<IDOnly>();
                IDOnly IDOnlyBuyer = new IDOnly();
                IDOnlyBuyer._ = dt.Rows[0]["BuyerCustomerParty_Party_PostalAddress_ID_"].ToString();
                PostalAddress_IDOnlyBuyer.ID.Add(IDOnlyBuyer);
                //STREETNAME
                PostalAddress_IDOnlyBuyer.StreetName = new List<StreetName>();
                StreetName StreetNameBuyer = new StreetName();
                StreetNameBuyer._ = dt.Rows[0]["BuyerCustomerParty_Party_PostalAddress_StreetName_"].ToString();
                PostalAddress_IDOnlyBuyer.StreetName.Add(StreetNameBuyer);

                //CITYNAME
                PostalAddress_IDOnlyBuyer.CityName = new List<CityName>();
                CityName CityNameBuyer = new CityName();
                CityNameBuyer._ = dt.Rows[0]["BuyerCustomerParty_Party_PostalAddress_CityName_"].ToString();
                PostalAddress_IDOnlyBuyer.CityName.Add(CityNameBuyer);

                //COUNTRYSUBENTITY
                PostalAddress_IDOnlyBuyer.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity CountrySubentityPostalAddressBuyer = new CountrySubentity();
                CountrySubentityPostalAddressBuyer._ = dt.Rows[0]["BuyerCustomerParty_Party_PostalAddress_CountrySubentity_"].ToString();
                PostalAddress_IDOnlyBuyer.CountrySubentity.Add(CountrySubentityPostalAddressBuyer);

                //District
                PostalAddress_IDOnlyBuyer.District = new List<District>();
                District DistrictPostalAddress = new District();
                DistrictPostalAddress._ = dt.Rows[0]["BuyerCustomerParty_Party_PostalAddress_District_"].ToString();
                PostalAddress_IDOnlyBuyer.District.Add(DistrictPostalAddress);

                //COUNTRY
                PostalAddress_IDOnlyBuyer.Country = new List<Country>();
                Country CountryPostalAddressBuyer = new Country();
                PostalAddress_IDOnlyBuyer.Country.Add(CountryPostalAddressBuyer);

                CountryPostalAddressBuyer.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode IdentificationCodeCountryBuyer = new IdentificationCode();
                IdentificationCodeCountryBuyer._ = "";
                CountryPostalAddressBuyer.IdentificationCode.Add(IdentificationCodeCountryBuyer);

                //END POSTALADDRESS

                //PARTYLEGALENTITY
                PartyBuyer.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity PartyLegalEntityPartyBuyer = new PartyLegalEntity();
                PartyBuyer.PartyLegalEntity.Add(PartyLegalEntityPartyBuyer);

                PartyLegalEntityPartyBuyer.RegistrationName = new List<RegistrationName>();
                RegistrationName RegistrationNamePartyBuyer = new RegistrationName();
                RegistrationNamePartyBuyer._ = dt.Rows[0]["BuyerCustomerParty_Party_PartyLegalEntity_RegistrationName_"].ToString();
                PartyLegalEntityPartyBuyer.RegistrationName.Add(RegistrationNamePartyBuyer);

                //ENDPARTYLEGALENTITY

                //END BUYERCUSTOMERPARTY


                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                //13.5 TotalTransportHandlingUnitQuantity
                shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                TotalTransportHandlingUnitQuantity totaltransport = new TotalTransportHandlingUnitQuantity();
                totaltransport._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString();
                shipment.TotalTransportHandlingUnitQuantity.Add(totaltransport);
                //SpecialInstructions
                shipment.SpecialInstructions = new List<SpecialInstructions>();
                // indicador m1
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {

                    SpecialInstructions specialinstructions = new SpecialInstructions();
                    specialinstructions._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(specialinstructions);
                }
                //indicador muestra chofer y vehiculo
                if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                {
                    SpecialInstructions SUNAT_Envio_IndicadorVehiculoConductoresTransp = new SpecialInstructions();
                    SUNAT_Envio_IndicadorVehiculoConductoresTransp._ = dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString();
                    shipment.SpecialInstructions.Add(SUNAT_Envio_IndicadorVehiculoConductoresTransp);
                }
                //END
                //13.5 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);


                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                    TransportHandlingUnit shipmentTransportHandlingUnit = new TransportHandlingUnit();
                    shipment.TransportHandlingUnit.Add(shipmentTransportHandlingUnit);

                    shipmentTransportHandlingUnit.TransportEquipment = new List<TransportEquipment>();
                    TransportEquipment TransportEquipmentshipment = new TransportEquipment();

                    TransportEquipmentshipment.ID = new List<IDOnly>();
                    IDOnly IDTransport = new IDOnly();
                    IDTransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                    TransportEquipmentshipment.ID.Add(IDTransport);
                    shipmentTransportHandlingUnit.TransportEquipment.Add(TransportEquipmentshipment);

                }
                else
                {

                    //PUBLICO
                    ////CARRIERPARTY - LISTA
                    shipmentStage.CarrierParty = new List<CarrierParty>();
                    CarrierParty CarrierParty = new CarrierParty();


                    ////CARRIERPARTY - PARTYIDENTIFICATION


                    CarrierParty.PartyIdentification = new List<PartyIdentification>();
                    PartyIdentification PartyIdentification = new PartyIdentification();
                    CarrierParty.PartyIdentification.Add(PartyIdentification);
                    PartyIdentification.ID = new List<ID>();

                    ID idCarrierParty = new ID();

                    idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                    idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                    PartyIdentification.ID.Add(idCarrierParty);



                    //CARRIERPARTY - PARTYLEGALENTITY
                    CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                    PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                    CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                    //PARTYLEGALENTITY - REGISTRATIONAME
                    //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                    //{


                    partyLegalEntity.RegistrationName = new List<RegistrationName>();
                    RegistrationName CarrierRegistrionName = new RegistrationName();

                    CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                    partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                    //}
                    partyLegalEntity.CompanyID = new List<CompanyID>();

                    //PARTYLEGALENTITY - COMPANYID
                    //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                    //{
                    CompanyID CarrierPartyCompanyID = new CompanyID();

                    CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                    partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                    //}
                    //CARRIERPARTY - AGENTPARTY

                    CarrierParty.AgentParty = new List<AgentParty>();

                    //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"] != DBNull.Value)
                    //{
                    AgentParty CarrierPartyAgentParty = new AgentParty();
                    CarrierParty.AgentParty.Add(CarrierPartyAgentParty);

                    CarrierPartyAgentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                    PartyLegalEntity CarrierPartyLegalEntity = new PartyLegalEntity();
                    CarrierPartyAgentParty.PartyLegalEntity.Add(CarrierPartyLegalEntity);


                    CarrierPartyLegalEntity.CompanyID = new List<CompanyID>();
                    CompanyID CarrierCompanyID = new CompanyID();
                    CarrierCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                    CarrierCompanyID.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                    CarrierPartyLegalEntity.CompanyID.Add(CarrierCompanyID);
                    //}

                    shipmentStage.CarrierParty.Add(CarrierParty);


                    //DRIVERPERSON
                    if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                    {
                        shipmentStage.DriverPerson = new List<DriverPerson>();
                        DriverPerson driverperson = new DriverPerson();



                        //if (Exists(shipmentStage.DriverPerson))
                        //{
                        //    MessageBox.Show("El objeto existe");
                        //}
                        //else 
                        //{
                        //    MessageBox.Show("El objeto NO existe");
                        //}


                        //ID             
                        ID iddriver = new ID();
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"] != DBNull.Value)
                        {

                            driverperson.ID = new List<ID>();
                            iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                            iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                            driverperson.ID.Add(iddriver);

                        }

                        //else { shipmentStage.DriverPerson = null; }

                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"] != DBNull.Value)
                        {
                            //if (driverperson.FirstName != null)
                            //{

                            //}
                            driverperson.FirstName = new List<FirstName>();
                            FirstName firstname = new FirstName();
                            firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                            //{

                            driverperson.FirstName.Add(firstname);
                        }
                        //}

                        //Familiname
                        //string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"] != DBNull.Value)
                        {
                            if (driverperson.FirstName != null)
                            {
                                driverperson.FamilyName = new List<FamilyName>();
                            }
                            driverperson.FamilyName = new List<FamilyName>();
                            FamilyName familyname = new FamilyName();
                            familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                            driverperson.FamilyName.Add(familyname);
                        }
                        //JOBTITLE
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"] != DBNull.Value)
                        {
                            driverperson.JobTitle = new List<JobTitle>();
                            JobTitle jobtitle = new JobTitle();
                            jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                            driverperson.JobTitle.Add(jobtitle);
                        }
                        //IdentityDocumentReference
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"] != DBNull.Value)
                        {
                            driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                            IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                            driverperson.IdentityDocumentReference.Add(identitydocument);

                            identitydocument.ID = new List<IDOnly>();
                            IDOnly ididentity = new IDOnly();
                            ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                            identitydocument.ID.Add(ididentity);

                        }

                        shipmentStage.DriverPerson.Add(driverperson);
                    }
                }
                ////END CARRIERPARTY


                //DESPATCHPARTY




                //END DESPATCHPARTY



                // END PUBLICO
                //ID
                ////DriverPerson
                //shipmentStage.DriverPerson = new List<DriverPerson>();
                //DriverPerson driverperson = new DriverPerson();



                ////ID             
                //ID iddriver = new ID();


                //driverperson.ID = new List<ID>();
                //iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                //iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                //driverperson.ID.Add(iddriver);



                //driverperson.FirstName = new List<FirstName>();
                //FirstName firstname = new FirstName();
                //firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                ////{

                //driverperson.FirstName.Add(firstname);



                ////Familiname
                ////string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();

                //if (driverperson.FirstName != null)
                //{
                //    driverperson.FamilyName = new List<FamilyName>();
                //}
                //driverperson.FamilyName = new List<FamilyName>();
                //FamilyName familyname = new FamilyName();
                //familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                //driverperson.FamilyName.Add(familyname);

                ////JOBTITLE

                //driverperson.JobTitle = new List<JobTitle>();
                //JobTitle jobtitle = new JobTitle();
                //jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                //driverperson.JobTitle.Add(jobtitle);

                ////IdentityDocumentReference
                //driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                //IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                //driverperson.IdentityDocumentReference.Add(identitydocument);

                //identitydocument.ID = new List<IDOnly>();
                //IDOnly ididentity = new IDOnly();
                //ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                //identitydocument.ID.Add(ididentity);



                //shipmentStage.DriverPerson.Add(driverperson);


                //13.6 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.6.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //CITYSUBDIVIONAME
                deliveryadrress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionname = new CitySubdivisionName();
                citysubdivionname._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CitySubdivisionName"].ToString();
                deliveryadrress.CitySubdivisionName.Add(citysubdivionname);

                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);

                //  13.6.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                //  13.6.2.1 DELIVERY DESPATCH 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                //CITYSUBDIVIONAME
                despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //DESPATCHPARTY 
                despatchdelivery.DespatchParty = new List<DespatchParty>();
                DespatchParty despatchparty = new DespatchParty();
                despatchdelivery.DespatchParty.Add(despatchparty);

                despatchparty.AgentParty = new List<AgentParty>();
                AgentParty agentParty = new AgentParty();
                despatchparty.AgentParty.Add(agentParty);

                agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                agentParty.PartyLegalEntity.Add(partylegalentityagent);

                partylegalentityagent.CompanyID = new List<CompanyID>();
                CompanyID companyid = new CompanyID();
                companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                partylegalentityagent.CompanyID.Add(companyid);


                //13.7 TransportHandlingUnit
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit transporthand = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(transporthand);
                //TRANSPORTEQUIPMENT
                transporthand.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment transportequipment = new TransportEquipment();
                transporthand.TransportEquipment.Add(transportequipment);
                //TRANSPORT ID 
                transportequipment.ID = new List<IDOnly>();
                IDOnly idtransport = new IDOnly();
                idtransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                transportequipment.ID.Add(idtransport);
                //PLACA 2
                transportequipment.AttachedTransportEquipment = new List<IDOnlyA>();
                IDOnlyA IDONLYA = new IDOnlyA();
                transportequipment.AttachedTransportEquipment.Add(IDONLYA);
                IDONLYA.ID = new List<IDOnly>();
                IDOnly OnlyID = new IDOnly();
                OnlyID._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_AttachedTransportEquipment_ID__"].ToString();
                IDONLYA.ID.Add(OnlyID);
                //IDONLYA.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //ApplicableTransportMeans ApplicableTransportMeansid = new ApplicableTransportMeans();
                //IDONLYA.ApplicableTransportMeans.Add(ApplicableTransportMeansid);
                //ApplicableTransportMeansid.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //RegistrationNationalityID RegistrationNationalityIDtransportPLACA2 = new RegistrationNationalityID();
                //RegistrationNationalityIDtransportPLACA2._ = "TARJETACER2";

                //ApplicableTransportMeansid.RegistrationNationalityID.Add(RegistrationNationalityIDtransportPLACA2);
                //if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                //{
                //    //ApplicableTransport
                //    //transportequipment.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //    //ApplicableTransportMeans ApplicableTransportMeanstransport = new ApplicableTransportMeans();
                //    //transportequipment.ApplicableTransportMeans.Add(ApplicableTransportMeanstransport);

                //    //ApplicableTransportMeanstransport.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //    //RegistrationNationalityID RegistrationNationalityIDapplicable = new RegistrationNationalityID();
                //    //RegistrationNationalityIDapplicable._ = dt.Rows[0]["TransportHandlingUnit_TransportEquipment_ApplicableTransportMeans_RegistrationNationalityID__"].ToString();
                //    //ApplicableTransportMeanstransport.RegistrationNationalityID.Add(RegistrationNationalityIDapplicable);

                //}


                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);

                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);


                //Type tipoClaseAnidada = roo2.DespatchAdvice;
                //string jsonarreglado = RecorrerPropiedades(despatch);
                //RecorrerPropiedades(roo2);

            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }
        //EXPORTACION PUBLICA - NO CHECK
        public void ConvertirJsonAClases_ExportacionPublica(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);

                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();

                //NUEVO
                //ORDEN DE COMPRA

                Note noteordencompra = new Note();
                noteordencompra._ = dt.Rows[0]["Note_OCNRO"].ToString();
                noteordencompra.languageID = dt.Rows[0]["languageID_OCNRO"].ToString(); ;

                //MARCA 
                Note noteMARCA = new Note();
                noteMARCA._ = dt.Rows[0]["Note_MARCA"].ToString();
                noteMARCA.languageID = dt.Rows[0]["languageID_MARCA"].ToString(); ;

                //MARCA 2
                Note noteMARCA2 = new Note();
                noteMARCA2._ = dt.Rows[0]["Note_MARCA2"].ToString();
                noteMARCA2.languageID = dt.Rows[0]["languageID_MARCA2"].ToString(); ;
                //END 


                despatch.Note.Add(note);
                despatch.Note.Add(noteordencompra);
                despatch.Note.Add(noteMARCA);
                despatch.Note.Add(noteMARCA2);

                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);


                //9. AdditionalDocumentReference ***************
                despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                AdditionalDocumentReference additional = new AdditionalDocumentReference();

                // 9.1 ID

                despatch.AdditionalDocumentReference.Add(additional);
                additional.ID = new List<IDOnly>();
                IDOnly idonly = new IDOnly();
                idonly._ = dt.Rows[0]["adref_id"].ToString();
                //dt.Rows[0]["adref_id"].ToString();
                additional.ID.Add(idonly);
                //9.2 DocumentTypeCode
                additional.DocumentTypeCode = new List<DocumentTypeCode>();
                DocumentTypeCode documenttypecode = new DocumentTypeCode();
                documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                //dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                additional.DocumentTypeCode.Add(documenttypecode);
                //9.3 DocumentType 
                additional.DocumentType = new List<DocumentType>();
                DocumentType documentype = new DocumentType();
                documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                //dt.Rows[0]["adref_DocumentType"].ToString();
                additional.DocumentType.Add(documentype);


                //9.4 IssueParty 
                //additional.IssuerParty = new List<IssuerParty>();
                //IssuerParty issuerparty = new IssuerParty();
                //additional.IssuerParty.Add(issuerparty);
                ////9.4.1
                //issuerparty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification partyidentification = new PartyIdentification();
                //issuerparty.PartyIdentification.Add(partyidentification);
                ////9.4.1.1
                //partyidentification.ID = new List<ID>();
                ////9.4.1.1.1
                //ID idadditional = new ID();
                //idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                //idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                //partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                //postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysub = new CitySubdivisionName();
                //citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                //postaladdress.CitySubdivisionName.Add(citysub);

                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrySubEntityDespatchSupplier = new CountrySubentity();
                countrySubEntityDespatchSupplier._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubEntity"].ToString();
                postaladdress.CountrySubentity.Add(countrySubEntityDespatchSupplier);

                //CityName
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);


                //DISTRICT
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                //postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                //citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                //postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(citynamedelivery);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                //postaladdress.CountrySubentity = new List<CountrySubentity>();
                //CountrySubentity countrysubentity = new CountrySubentity();
                //countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                //postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);

                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                //AGREGADO 13.5 TotalTransportHandlingUnitQuantity
                shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                TotalTransportHandlingUnitQuantity totaltransport = new TotalTransportHandlingUnitQuantity();
                totaltransport._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString();

                shipment.TotalTransportHandlingUnitQuantity.Add(totaltransport);

                // 13.6 SpecialInstructions
                shipment.SpecialInstructions = new List<SpecialInstructions>();

                // indicador m1
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {

                    SpecialInstructions specialinstructions = new SpecialInstructions();
                    specialinstructions._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(specialinstructions);
                }

                // indicador dam
                if (dt.Rows[0]["Shipment_SpecialInstructions__"].ToString() != "")
                {
                    SpecialInstructions specialinstructionsDAM = new SpecialInstructions();
                    specialinstructionsDAM._ = dt.Rows[0]["Shipment_SpecialInstructions__"].ToString();
                    shipment.SpecialInstructions.Add(specialinstructionsDAM);
                }



                //indicador muestra chofer y vehiculo
                if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                {
                    SpecialInstructions SUNAT_Envio_IndicadorVehiculoConductoresTransp = new SpecialInstructions();
                    SUNAT_Envio_IndicadorVehiculoConductoresTransp._ = dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString();
                    shipment.SpecialInstructions.Add(SUNAT_Envio_IndicadorVehiculoConductoresTransp);
                }




                //13.7 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);


                //if (dt.Rows[0]["INDICADORTRASLADOVEHICATM1"].ToString() == "1")
                //{
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit shipmentTransportHandlingUnit = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(shipmentTransportHandlingUnit);

                shipmentTransportHandlingUnit.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment TransportEquipmentshipment = new TransportEquipment();

                TransportEquipmentshipment.ID = new List<IDOnly>();
                IDOnly IDTransport = new IDOnly();
                IDTransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                TransportEquipmentshipment.ID.Add(IDTransport);
                //if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                //{
                //    TransportEquipmentshipment.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //    ApplicableTransportMeans ApplicableTransportMeansTransport = new ApplicableTransportMeans();
                //    TransportEquipmentshipment.ApplicableTransportMeans.Add(ApplicableTransportMeansTransport);

                //    ApplicableTransportMeansTransport.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //    RegistrationNationalityID RegistrationNationalityIDTransport = new RegistrationNationalityID();
                //    RegistrationNationalityIDTransport._ = "TARJEOCERTI";
                //    ApplicableTransportMeansTransport.RegistrationNationalityID.Add(RegistrationNationalityIDTransport);

                //    shipmentTransportHandlingUnit.TransportEquipment.Add(TransportEquipmentshipment);
                //}
                //}
                //else
                //{

                //PUBLICO
                //   CARRIERPARTY - LISTA
                shipmentStage.CarrierParty = new List<CarrierParty>();
                CarrierParty CarrierParty = new CarrierParty();


                // CARRIERPARTY - PARTYIDENTIFICATION


                CarrierParty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification PartyIdentification = new PartyIdentification();
                CarrierParty.PartyIdentification.Add(PartyIdentification);
                PartyIdentification.ID = new List<ID>();

                ID idCarrierParty = new ID();

                idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                PartyIdentification.ID.Add(idCarrierParty);



                // CARRIERPARTY - PARTYLEGALENTITY
                CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                //PARTYLEGALENTITY - REGISTRATIONAME
                //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                //{


                partyLegalEntity.RegistrationName = new List<RegistrationName>();
                RegistrationName CarrierRegistrionName = new RegistrationName();

                CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                //}
                partyLegalEntity.CompanyID = new List<CompanyID>();

                //PARTYLEGALENTITY - COMPANYID
                //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                //{
                CompanyID CarrierPartyCompanyID = new CompanyID();

                CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                //}
                //CARRIERPARTY - AGENTPARTY

                //CarrierParty.AgentParty = new List<AgentParty>();

                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"] != DBNull.Value)
                ////{
                //AgentParty CarrierPartyAgentParty = new AgentParty();
                //CarrierParty.AgentParty.Add(CarrierPartyAgentParty);

                //CarrierPartyAgentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity CarrierPartyLegalEntity = new PartyLegalEntity();
                //CarrierPartyAgentParty.PartyLegalEntity.Add(CarrierPartyLegalEntity);


                //CarrierPartyLegalEntity.CompanyID = new List<CompanyID>();
                //CompanyID CarrierCompanyID = new CompanyID();
                //CarrierCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierCompanyID.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierPartyLegalEntity.CompanyID.Add(CarrierCompanyID);
                //}

                shipmentStage.CarrierParty.Add(CarrierParty);

                //}
                //Obtenemos propiedades



                //END CARRIERPARTY


                //DESPATCHPARTY




                //END DESPATCHPARTY



                // END PUBLICO
                //ID
                ////DriverPerson
                ////DriverPerson
                if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                {
                    shipmentStage.DriverPerson = new List<DriverPerson>();
                    DriverPerson driverperson = new DriverPerson();



                    //ID             
                    ID iddriver = new ID();


                    driverperson.ID = new List<ID>();
                    iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                    iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                    driverperson.ID.Add(iddriver);


                    //else { shipmentStage.DriverPerson = null; }


                    //if (driverperson.FirstName != null)
                    //{

                    //}
                    driverperson.FirstName = new List<FirstName>();
                    FirstName firstname = new FirstName();
                    firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                    //{

                    driverperson.FirstName.Add(firstname);

                    //}

                    //Familiname
                    //string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                    if (driverperson.FirstName != null)
                    {
                        driverperson.FamilyName = new List<FamilyName>();
                    }
                    driverperson.FamilyName = new List<FamilyName>();
                    FamilyName familyname = new FamilyName();
                    familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                    driverperson.FamilyName.Add(familyname);

                    //JOBTITLE

                    driverperson.JobTitle = new List<JobTitle>();
                    JobTitle jobtitle = new JobTitle();
                    jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                    driverperson.JobTitle.Add(jobtitle);

                    //IdentityDocumentReference

                    driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                    IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                    driverperson.IdentityDocumentReference.Add(identitydocument);

                    identitydocument.ID = new List<IDOnly>();
                    IDOnly ididentity = new IDOnly();
                    ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                    identitydocument.ID.Add(ididentity);



                    shipmentStage.DriverPerson.Add(driverperson);
                }

                //if (propiedades == null)
                //{
                //    shipmentStage.DriverPerson = null;
                //}

                //13.8 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.8.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //AddressTypeCode
                deliveryadrress.AddressTypeCode = new List<AddressTypeCode>();
                AddressTypeCode addressTypeCodedespatch = new AddressTypeCode();
                addressTypeCodedespatch._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressTypeCode__"].ToString();
                addressTypeCodedespatch.listID = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressTypeCode_listID"].ToString();
                deliveryadrress.AddressTypeCode.Add(addressTypeCodedespatch);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //CITYSUBDIVIONAME
                //deliveryadrress.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysubdivionname = new CitySubdivisionName();
                //citysubdivionname._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CitySubdivisionName"].ToString();
                //deliveryadrress.CitySubdivisionName.Add(citysubdivionname);

                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);

                //  13.8.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                //  13.6.2.1 DELIVERY DESPATCH 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                //CITYSUBDIVIONAME
                //despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                //citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                //despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME - PROVINCIA
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity - DEPARTAMENTO
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //DESPATCHPARTY 
                //despatchdelivery.DespatchParty = new List<DespatchParty>();
                //DespatchParty despatchparty = new DespatchParty();



                ////if (dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                ////{
                //despatchparty.AgentParty = new List<AgentParty>();
                //AgentParty agentParty = new AgentParty();
                //despatchparty.AgentParty.Add(agentParty);

                //agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                //agentParty.PartyLegalEntity.Add(partylegalentityagent);

                //partylegalentityagent.CompanyID = new List<CompanyID>();
                //CompanyID companyid = new CompanyID();
                //companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                //companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();

                //partylegalentityagent.CompanyID.Add(companyid);
                ////}
                //despatchdelivery.DespatchParty.Add(despatchparty);
                //13.7 TransportHandlingUnit 2
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit transporthand = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(transporthand);

                transporthand.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment transportequipment = new TransportEquipment();
                transporthand.TransportEquipment.Add(transportequipment);

                transportequipment.ID = new List<IDOnly>();
                IDOnly IDtransportequipment = new IDOnly();
                IDtransportequipment._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                transportequipment.ID.Add(IDtransportequipment);
                //PLACA 2 
                transportequipment.AttachedTransportEquipment = new List<IDOnlyA>();
                IDOnlyA IDONLYA = new IDOnlyA();
                transportequipment.AttachedTransportEquipment.Add(IDONLYA);
                IDONLYA.ID = new List<IDOnly>();
                IDOnly OnlyID = new IDOnly();
                OnlyID._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_AttachedTransportEquipment_ID__"].ToString();
                IDONLYA.ID.Add(OnlyID);
                //IDONLYA.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //ApplicableTransportMeans ApplicableTransportMeansid = new ApplicableTransportMeans();
                //IDONLYA.ApplicableTransportMeans.Add(ApplicableTransportMeansid);
                //ApplicableTransportMeansid.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //RegistrationNationalityID RegistrationNationalityIDtransportPLACA2 = new RegistrationNationalityID();
                //RegistrationNationalityIDtransportPLACA2._ = "TARJETACER2";
                //ApplicableTransportMeansid.RegistrationNationalityID.Add(RegistrationNationalityIDtransportPLACA2);
                ////PLACA 2 END 
                //transportequipment.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //ApplicableTransportMeans ApplicableTransportMeanstransport = new ApplicableTransportMeans();
                //transportequipment.ApplicableTransportMeans.Add(ApplicableTransportMeanstransport);

                //ApplicableTransportMeanstransport.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //RegistrationNationalityID RegistrationNationalityIDtransport = new RegistrationNationalityID();
                //RegistrationNationalityIDtransport._ = "TARJEOCERTI";
                //ApplicableTransportMeanstransport.RegistrationNationalityID.Add(RegistrationNationalityIDtransport);

                transporthand.Package = new List<Package>();
                Package package = new Package();
                transporthand.Package.Add(package);

                package.ID = new List<Package_>();
                Package_ package_ = new Package_();
                package_._ = dt.Rows[0]["Shipment_TransportHandlingUnit_Package_ID__"].ToString();
                package.ID.Add(package_);

                package.TraceID = new List<TraceID>();
                TraceID traceid = new TraceID();
                traceid._ = dt.Rows[0]["Shipment_TransportHandlingUnit_Package_TraceID_"].ToString();
                package.TraceID.Add(traceid);

                shipment.FirstArrivalPortLocation = new List<FirstArrivalPortLocation>();
                FirstArrivalPortLocation firstArrival = new FirstArrivalPortLocation();
                shipment.FirstArrivalPortLocation.Add(firstArrival);

                firstArrival.ID = new List<_ONLY>();
                _ONLY ID_ = new _ONLY();
                ID_._ = dt.Rows[0]["Shipment_FirstArrivalPortLocation_ID_"].ToString();
                firstArrival.ID.Add(ID_);

                firstArrival.LocationTypeCode = new List<_ONLY>();
                _ONLY _ONLYLocation = new _ONLY();
                _ONLYLocation._ = dt.Rows[0]["Shipment_FirstArrivalPortLocation_LocationTypeCode_"].ToString();
                firstArrival.LocationTypeCode.Add(_ONLYLocation);

                firstArrival.Name = new List<_ONLY>();
                _ONLY _ONLYName = new _ONLY();
                _ONLYName._ = dt.Rows[0]["Shipment_FirstArrivalPortLocation_Name_"].ToString();
                firstArrival.Name.Add(_ONLYName);

                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);

                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);

                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);

            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }


        //EXPORTACION PRIVADA
        public void ConvertirJsonAClases_ExportacionPrivada(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);

                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();

                //NUEVO
                //ORDEN DE COMPRA

                Note noteordencompra = new Note();
                noteordencompra._ = dt.Rows[0]["Note_OCNRO"].ToString();
                noteordencompra.languageID = dt.Rows[0]["languageID_OCNRO"].ToString(); ;

                //MARCA 
                Note noteMARCA = new Note();
                noteMARCA._ = dt.Rows[0]["Note_MARCA"].ToString();
                noteMARCA.languageID = dt.Rows[0]["languageID_MARCA"].ToString(); ;

                //MARCA 2
                Note noteMARCA2 = new Note();
                noteMARCA2._ = dt.Rows[0]["Note_MARCA2"].ToString();
                noteMARCA2.languageID = dt.Rows[0]["languageID_MARCA2"].ToString(); ;
                //END 


                despatch.Note.Add(note);
                despatch.Note.Add(noteordencompra);
                despatch.Note.Add(noteMARCA);
                despatch.Note.Add(noteMARCA2);

                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);

                //9. AdditionalDocumentReference ***************
                despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                AdditionalDocumentReference additional = new AdditionalDocumentReference();

                //9.1 ID
                despatch.AdditionalDocumentReference.Add(additional);
                additional.ID = new List<IDOnly>();
                IDOnly idonly = new IDOnly();
                idonly._ = dt.Rows[0]["adref_id"].ToString();
                additional.ID.Add(idonly);
                //9.2 DocumentTypeCode
                additional.DocumentTypeCode = new List<DocumentTypeCode>();
                DocumentTypeCode documenttypecode = new DocumentTypeCode();
                documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                additional.DocumentTypeCode.Add(documenttypecode);
                //9.3 DocumentType 
                additional.DocumentType = new List<DocumentType>();
                DocumentType documentype = new DocumentType();
                documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                additional.DocumentType.Add(documentype);
                //9.4 IssueParty 
                additional.IssuerParty = new List<IssuerParty>();
                IssuerParty issuerparty = new IssuerParty();
                additional.IssuerParty.Add(issuerparty);
                //9.4.1
                issuerparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentification = new PartyIdentification();
                issuerparty.PartyIdentification.Add(partyidentification);
                //9.4.1.1
                partyidentification.ID = new List<ID>();
                //9.4.1.1.1
                ID idadditional = new ID();
                idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysub = new CitySubdivisionName();
                citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdress.CitySubdivisionName.Add(citysub);

                //CityName
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //DISTRICT
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(citynamedelivery);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                //postaladdress.CountrySubentity = new List<CountrySubentity>();
                //CountrySubentity countrysubentity = new CountrySubentity();
                //countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                //postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);

                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                TotalTransportHandlingUnitQuantity totaltransport = new TotalTransportHandlingUnitQuantity();
                totaltransport._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString();

                shipment.TotalTransportHandlingUnitQuantity.Add(totaltransport);

                // 13.6 SpecialInstructions
                shipment.SpecialInstructions = new List<SpecialInstructions>();


                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {

                    SpecialInstructions specialinstructions = new SpecialInstructions();
                    specialinstructions._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(specialinstructions);
                }

                // indicador dam
                if (dt.Rows[0]["Shipment_SpecialInstructions__"].ToString() != "")
                {
                    SpecialInstructions specialinstructionsDAM = new SpecialInstructions();
                    specialinstructionsDAM._ = dt.Rows[0]["Shipment_SpecialInstructions__"].ToString();
                    shipment.SpecialInstructions.Add(specialinstructionsDAM);
                }

                //indicador muestra chofer y vehiculo
                //if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                //{
                //    SpecialInstructions SUNAT_Envio_IndicadorVehiculoConductoresTransp = new SpecialInstructions();
                //    SUNAT_Envio_IndicadorVehiculoConductoresTransp._ = dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString();
                //    shipment.SpecialInstructions.Add(SUNAT_Envio_IndicadorVehiculoConductoresTransp);
                //}



                //END
                //13.5 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);


                //PUBLICO
                ////CARRIERPARTY - LISTA
                //shipmentStage.CarrierParty = new List<CarrierParty>();
                //CarrierParty CarrierParty = new CarrierParty();


                ////CARRIERPARTY - PARTYIDENTIFICATION


                //CarrierParty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification PartyIdentification = new PartyIdentification();
                //CarrierParty.PartyIdentification.Add(PartyIdentification);
                //PartyIdentification.ID = new List<ID>();

                //ID idCarrierParty = new ID();

                //idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                //idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                //PartyIdentification.ID.Add(idCarrierParty);



                ////CARRIERPARTY - PARTYLEGALENTITY
                //CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                //CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                ////PARTYLEGALENTITY - REGISTRATIONAME
                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                ////{


                //partyLegalEntity.RegistrationName = new List<RegistrationName>();
                //RegistrationName CarrierRegistrionName = new RegistrationName();

                //CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                //partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                ////}
                //partyLegalEntity.CompanyID = new List<CompanyID>();

                ////PARTYLEGALENTITY - COMPANYID
                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                ////{
                //CompanyID CarrierPartyCompanyID = new CompanyID();

                //CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                //partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                ////}
                ////CARRIERPARTY - AGENTPARTY

                //CarrierParty.AgentParty = new List<AgentParty>();

                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"] != DBNull.Value)
                ////{
                //AgentParty CarrierPartyAgentParty = new AgentParty();
                //CarrierParty.AgentParty.Add(CarrierPartyAgentParty);

                //CarrierPartyAgentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity CarrierPartyLegalEntity = new PartyLegalEntity();
                //CarrierPartyAgentParty.PartyLegalEntity.Add(CarrierPartyLegalEntity);


                //CarrierPartyLegalEntity.CompanyID = new List<CompanyID>();
                //CompanyID CarrierCompanyID = new CompanyID();
                //CarrierCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierCompanyID.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierPartyLegalEntity.CompanyID.Add(CarrierCompanyID);
                ////}

                //shipmentStage.CarrierParty.Add(CarrierParty);

                ////END CARRIERPARTY


                //DESPATCHPARTY




                //END DESPATCHPARTY



                // END PUBLICO
                //ID
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                    TransportHandlingUnit shipmentTransportHandlingUnit = new TransportHandlingUnit();
                    shipment.TransportHandlingUnit.Add(shipmentTransportHandlingUnit);

                    shipmentTransportHandlingUnit.TransportEquipment = new List<TransportEquipment>();
                    TransportEquipment TransportEquipmentshipment = new TransportEquipment();

                    TransportEquipmentshipment.ID = new List<IDOnly>();
                    IDOnly IDTransport = new IDOnly();
                    IDTransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                    TransportEquipmentshipment.ID.Add(IDTransport);
                    shipmentTransportHandlingUnit.TransportEquipment.Add(TransportEquipmentshipment);

                }
                else
                {
                    ////DriverPerson
                    shipmentStage.DriverPerson = new List<DriverPerson>();
                    DriverPerson driverperson = new DriverPerson();



                    //ID             
                    ID iddriver = new ID();
                    if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"] != DBNull.Value)
                    {

                        driverperson.ID = new List<ID>();
                        iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                        iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                        driverperson.ID.Add(iddriver);

                    }

                    //else { shipmentStage.DriverPerson = null; }

                    if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"] != DBNull.Value)
                    {
                        //if (driverperson.FirstName != null)
                        //{

                        //}
                        driverperson.FirstName = new List<FirstName>();
                        FirstName firstname = new FirstName();
                        firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                        //{

                        driverperson.FirstName.Add(firstname);
                    }
                    //}

                    //Familiname
                    //string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                    if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"] != DBNull.Value)
                    {
                        if (driverperson.FirstName != null)
                        {
                            driverperson.FamilyName = new List<FamilyName>();
                        }
                        driverperson.FamilyName = new List<FamilyName>();
                        FamilyName familyname = new FamilyName();
                        familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                        driverperson.FamilyName.Add(familyname);
                    }
                    //JOBTITLE
                    if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"] != DBNull.Value)
                    {
                        driverperson.JobTitle = new List<JobTitle>();
                        JobTitle jobtitle = new JobTitle();
                        jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                        driverperson.JobTitle.Add(jobtitle);
                    }
                    //IdentityDocumentReference
                    if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"] != DBNull.Value)
                    {
                        driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                        IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                        driverperson.IdentityDocumentReference.Add(identitydocument);

                        identitydocument.ID = new List<IDOnly>();
                        IDOnly ididentity = new IDOnly();
                        ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                        identitydocument.ID.Add(ididentity);

                    }

                    shipmentStage.DriverPerson.Add(driverperson);
                }

                //13.6 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.6.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);

                //AddressTypeCode
                deliveryadrress.AddressTypeCode = new List<AddressTypeCode>();
                AddressTypeCode addressTypeCodedespatch = new AddressTypeCode();
                addressTypeCodedespatch._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressTypeCode__"].ToString();
                addressTypeCodedespatch.listID = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressTypeCode_listID"].ToString();
                deliveryadrress.AddressTypeCode.Add(addressTypeCodedespatch);

                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //CITYSUBDIVIONAME
                deliveryadrress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionname = new CitySubdivisionName();
                citysubdivionname._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CitySubdivisionName"].ToString();
                deliveryadrress.CitySubdivisionName.Add(citysubdivionname);

                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);

                //  13.6.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                //  13.6.2.1 DELIVERY DESPATCH 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                //CITYSUBDIVIONAME
                despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //DESPATCHPARTY 
                //despatchdelivery.DespatchParty = new List<DespatchParty>();
                //DespatchParty despatchparty = new DespatchParty();
                //despatchdelivery.DespatchParty.Add(despatchparty);



                ////if (dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                ////{
                //despatchparty.AgentParty = new List<AgentParty>();
                //AgentParty agentParty = new AgentParty();
                //despatchparty.AgentParty.Add(agentParty);

                //agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                //agentParty.PartyLegalEntity.Add(partylegalentityagent);

                //partylegalentityagent.CompanyID = new List<CompanyID>();
                //CompanyID companyid = new CompanyID();
                //companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                //companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //partylegalentityagent.CompanyID.Add(companyid);
                ////}


                //13.7 TransportHandlingUnit
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit transporthand = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(transporthand);
                //TRANSPORTEQUIPMENT
                transporthand.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment transportequipment = new TransportEquipment();
                transporthand.TransportEquipment.Add(transportequipment);
                //TRANSPORT ID 
                transportequipment.ID = new List<IDOnly>();
                IDOnly idtransport = new IDOnly();
                idtransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                transportequipment.ID.Add(idtransport);


                //PLACA SECUNDARIA
                transportequipment.AttachedTransportEquipment = new List<IDOnlyA>();
                IDOnlyA IDONLYA = new IDOnlyA();
                transportequipment.AttachedTransportEquipment.Add(IDONLYA);
                IDONLYA.ID = new List<IDOnly>();
                IDOnly OnlyID = new IDOnly();
                OnlyID._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_AttachedTransportEquipment_ID__"].ToString();
                IDONLYA.ID.Add(OnlyID);
                //TARJETA CER2 NO VA
                //IDONLYA.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //ApplicableTransportMeans ApplicableTransportMeansid = new ApplicableTransportMeans();
                //IDONLYA.ApplicableTransportMeans.Add(ApplicableTransportMeansid);
                //ApplicableTransportMeansid.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //RegistrationNationalityID RegistrationNationalityIDtransportPLACA2 = new RegistrationNationalityID();
                //RegistrationNationalityIDtransportPLACA2._ = "TARJETACER2";
                //ApplicableTransportMeansid.RegistrationNationalityID.Add(RegistrationNationalityIDtransportPLACA2);
                //END PLACA SECUNDARIA
                transporthand.Package = new List<Package>();
                Package package = new Package();
                transporthand.Package.Add(package);

                package.ID = new List<Package_>();
                Package_ package_ = new Package_();
                package_._ = dt.Rows[0]["Shipment_TransportHandlingUnit_Package_ID__"].ToString();
                package.ID.Add(package_);

                package.TraceID = new List<TraceID>();
                TraceID traceid = new TraceID();
                traceid._ = dt.Rows[0]["Shipment_TransportHandlingUnit_Package_TraceID_"].ToString();
                package.TraceID.Add(traceid);

                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);

                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);


                //Type tipoClaseAnidada = roo2.DespatchAdvice;
                //string jsonarreglado = RecorrerPropiedades(despatch);
                //RecorrerPropiedades(roo2);

            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }

        //CHECK
        //DEVOLUCION PRIVADA -- CHECK
        public void ConvertirJsonAClases_DevolucionPrivada(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);

                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();

                //NUEVO
                //ORDEN DE COMPRA

                Note noteordencompra = new Note();
                noteordencompra._ = dt.Rows[0]["Note_OCNRO"].ToString();
                noteordencompra.languageID = dt.Rows[0]["languageID_OCNRO"].ToString(); ;

                //MARCA 
                Note noteMARCA = new Note();
                noteMARCA._ = dt.Rows[0]["Note_MARCA"].ToString();
                noteMARCA.languageID = dt.Rows[0]["languageID_MARCA"].ToString(); ;

                //MARCA 2
                Note noteMARCA2 = new Note();
                noteMARCA2._ = dt.Rows[0]["Note_MARCA2"].ToString();
                noteMARCA2.languageID = dt.Rows[0]["languageID_MARCA2"].ToString(); ;
                //END 


                despatch.Note.Add(note);
                despatch.Note.Add(noteordencompra);
                despatch.Note.Add(noteMARCA);
                despatch.Note.Add(noteMARCA2);

                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);

                //9. AdditionalDocumentReference ***************
                despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                AdditionalDocumentReference additional = new AdditionalDocumentReference();

                //9.1 ID
                despatch.AdditionalDocumentReference.Add(additional);
                additional.ID = new List<IDOnly>();
                IDOnly idonly = new IDOnly();
                idonly._ = dt.Rows[0]["adref_id"].ToString();
                additional.ID.Add(idonly);
                //9.2 DocumentTypeCode
                additional.DocumentTypeCode = new List<DocumentTypeCode>();
                DocumentTypeCode documenttypecode = new DocumentTypeCode();
                documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                additional.DocumentTypeCode.Add(documenttypecode);
                //9.3 DocumentType 
                additional.DocumentType = new List<DocumentType>();
                DocumentType documentype = new DocumentType();
                documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                additional.DocumentType.Add(documentype);
                //9.4 IssueParty 
                additional.IssuerParty = new List<IssuerParty>();
                IssuerParty issuerparty = new IssuerParty();
                additional.IssuerParty.Add(issuerparty);
                //9.4.1
                issuerparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentification = new PartyIdentification();
                issuerparty.PartyIdentification.Add(partyidentification);
                //9.4.1.1
                partyidentification.ID = new List<ID>();
                //9.4.1.1.1
                ID idadditional = new ID();
                idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysub = new CitySubdivisionName();
                citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdress.CitySubdivisionName.Add(citysub);

                //CityName
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //DISTRICT
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(citynamedelivery);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentity = new CountrySubentity();
                countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);

                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                //13.5 TotalTransportHandlingUnitQuantity
                shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                TotalTransportHandlingUnitQuantity totaltransport = new TotalTransportHandlingUnitQuantity();
                totaltransport._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString();
                shipment.TotalTransportHandlingUnitQuantity.Add(totaltransport);
                //SpecialInstructions


                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.SpecialInstructions = new List<SpecialInstructions>();
                    SpecialInstructions specialinstructions = new SpecialInstructions();
                    specialinstructions._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(specialinstructions);
                }
                //END
                //13.5 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);


                //PUBLICO
                ////CARRIERPARTY - LISTA
                //shipmentStage.CarrierParty = new List<CarrierParty>();
                //CarrierParty CarrierParty = new CarrierParty();


                ////CARRIERPARTY - PARTYIDENTIFICATION


                //CarrierParty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification PartyIdentification = new PartyIdentification();
                //CarrierParty.PartyIdentification.Add(PartyIdentification);
                //PartyIdentification.ID = new List<ID>();

                //ID idCarrierParty = new ID();

                //idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                //idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                //PartyIdentification.ID.Add(idCarrierParty);



                ////CARRIERPARTY - PARTYLEGALENTITY
                //CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                //CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                ////PARTYLEGALENTITY - REGISTRATIONAME
                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                ////{


                //partyLegalEntity.RegistrationName = new List<RegistrationName>();
                //RegistrationName CarrierRegistrionName = new RegistrationName();

                //CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                //partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                ////}
                //partyLegalEntity.CompanyID = new List<CompanyID>();

                ////PARTYLEGALENTITY - COMPANYID
                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                ////{
                //CompanyID CarrierPartyCompanyID = new CompanyID();

                //CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                //partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                ////}
                ////CARRIERPARTY - AGENTPARTY

                //CarrierParty.AgentParty = new List<AgentParty>();

                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"] != DBNull.Value)
                ////{
                //AgentParty CarrierPartyAgentParty = new AgentParty();
                //CarrierParty.AgentParty.Add(CarrierPartyAgentParty);

                //CarrierPartyAgentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity CarrierPartyLegalEntity = new PartyLegalEntity();
                //CarrierPartyAgentParty.PartyLegalEntity.Add(CarrierPartyLegalEntity);


                //CarrierPartyLegalEntity.CompanyID = new List<CompanyID>();
                //CompanyID CarrierCompanyID = new CompanyID();
                //CarrierCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierCompanyID.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierPartyLegalEntity.CompanyID.Add(CarrierCompanyID);
                ////}

                //shipmentStage.CarrierParty.Add(CarrierParty);

                ////END CARRIERPARTY


                //DESPATCHPARTY




                //END DESPATCHPARTY



                // END PUBLICO
                //ID
                ////DriverPerson
                //shipmentStage.DriverPerson = new List<DriverPerson>();
                //DriverPerson driverperson = new DriverPerson();
                //shipmentStage.DriverPerson.Add(driverperson);
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                    TransportHandlingUnit shipmentTransportHandlingUnit = new TransportHandlingUnit();
                    shipment.TransportHandlingUnit.Add(shipmentTransportHandlingUnit);

                    shipmentTransportHandlingUnit.TransportEquipment = new List<TransportEquipment>();
                    TransportEquipment TransportEquipmentshipment = new TransportEquipment();

                    TransportEquipmentshipment.ID = new List<IDOnly>();
                    IDOnly IDTransport = new IDOnly();
                    IDTransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                    TransportEquipmentshipment.ID.Add(IDTransport);
                    shipmentTransportHandlingUnit.TransportEquipment.Add(TransportEquipmentshipment);

                }
                else
                {

                    shipmentStage.DriverPerson = new List<DriverPerson>();
                    DriverPerson driverperson = new DriverPerson();



                    //if (Exists(shipmentStage.DriverPerson))
                    //{
                    //    MessageBox.Show("El objeto existe");
                    //}
                    //else 
                    //{
                    //    MessageBox.Show("El objeto NO existe");
                    //}


                    //ID             
                    ID iddriver = new ID();
                    if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"] != DBNull.Value)
                    {

                        driverperson.ID = new List<ID>();
                        iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                        iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                        driverperson.ID.Add(iddriver);

                    }

                    //else { shipmentStage.DriverPerson = null; }

                    if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"] != DBNull.Value)
                    {
                        //if (driverperson.FirstName != null)
                        //{

                        //}
                        driverperson.FirstName = new List<FirstName>();
                        FirstName firstname = new FirstName();
                        firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                        //{

                        driverperson.FirstName.Add(firstname);
                    }
                    //}

                    //Familiname
                    //string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                    if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"] != DBNull.Value)
                    {
                        if (driverperson.FirstName != null)
                        {
                            driverperson.FamilyName = new List<FamilyName>();
                        }
                        driverperson.FamilyName = new List<FamilyName>();
                        FamilyName familyname = new FamilyName();
                        familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                        driverperson.FamilyName.Add(familyname);
                    }
                    //JOBTITLE
                    if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"] != DBNull.Value)
                    {
                        driverperson.JobTitle = new List<JobTitle>();
                        JobTitle jobtitle = new JobTitle();
                        jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                        driverperson.JobTitle.Add(jobtitle);
                    }
                    //IdentityDocumentReference
                    if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"] != DBNull.Value)
                    {
                        driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                        IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                        driverperson.IdentityDocumentReference.Add(identitydocument);

                        identitydocument.ID = new List<IDOnly>();
                        IDOnly ididentity = new IDOnly();
                        ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                        identitydocument.ID.Add(ididentity);

                    }

                    shipmentStage.DriverPerson.Add(driverperson);
                }

                //13.6 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.6.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //CITYSUBDIVIONAME
                deliveryadrress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionname = new CitySubdivisionName();
                citysubdivionname._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CitySubdivisionName"].ToString();
                deliveryadrress.CitySubdivisionName.Add(citysubdivionname);

                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);

                //  13.6.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                //  13.6.2.1 DELIVERY DESPATCH 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                //CITYSUBDIVIONAME
                despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //DESPATCHPARTY 
                //despatchdelivery.DespatchParty = new List<DespatchParty>();
                //DespatchParty despatchparty = new DespatchParty();
                //despatchdelivery.DespatchParty.Add(despatchparty);



                ////if (dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                ////{
                //despatchparty.AgentParty = new List<AgentParty>();
                //AgentParty agentParty = new AgentParty();
                //despatchparty.AgentParty.Add(agentParty);

                //agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                //agentParty.PartyLegalEntity.Add(partylegalentityagent);

                //partylegalentityagent.CompanyID = new List<CompanyID>();
                //CompanyID companyid = new CompanyID();
                //companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                //companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //partylegalentityagent.CompanyID.Add(companyid);
                ////}


                //13.7 TransportHandlingUnit
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit transporthand = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(transporthand);
                //TRANSPORTEQUIPMENT
                transporthand.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment transportequipment = new TransportEquipment();
                transporthand.TransportEquipment.Add(transportequipment);
                //TRANSPORT ID 
                transportequipment.ID = new List<IDOnly>();
                IDOnly idtransport = new IDOnly();
                idtransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                transportequipment.ID.Add(idtransport);


                //PLACA SECUNDARIA
                transportequipment.AttachedTransportEquipment = new List<IDOnlyA>();
                IDOnlyA IDONLYA = new IDOnlyA();
                transportequipment.AttachedTransportEquipment.Add(IDONLYA);
                IDONLYA.ID = new List<IDOnly>();
                IDOnly OnlyID = new IDOnly();
                OnlyID._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_AttachedTransportEquipment_ID__"].ToString();
                IDONLYA.ID.Add(OnlyID);
                //TARJETA CER2 NO VA
                //IDONLYA.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //ApplicableTransportMeans ApplicableTransportMeansid = new ApplicableTransportMeans();
                //IDONLYA.ApplicableTransportMeans.Add(ApplicableTransportMeansid);
                //ApplicableTransportMeansid.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //RegistrationNationalityID RegistrationNationalityIDtransportPLACA2 = new RegistrationNationalityID();
                //RegistrationNationalityIDtransportPLACA2._ = "TARJETACER2";
                //ApplicableTransportMeansid.RegistrationNationalityID.Add(RegistrationNationalityIDtransportPLACA2);
                //END PLACA SECUNDARIA


                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);

                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);


                //Type tipoClaseAnidada = roo2.DespatchAdvice;
                //string jsonarreglado = RecorrerPropiedades(despatch);
                //RecorrerPropiedades(roo2);

            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }

        //DEVOLUCION PUBLICA  --CHECK
        public void ConvertirJsonAClases_DevolucionPublica(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);

                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();

                //NUEVO
                //ORDEN DE COMPRA

                Note noteordencompra = new Note();
                noteordencompra._ = dt.Rows[0]["Note_OCNRO"].ToString();
                noteordencompra.languageID = dt.Rows[0]["languageID_OCNRO"].ToString(); ;

                //MARCA 
                Note noteMARCA = new Note();
                noteMARCA._ = dt.Rows[0]["Note_MARCA"].ToString();
                noteMARCA.languageID = dt.Rows[0]["languageID_MARCA"].ToString(); ;

                //MARCA 2
                Note noteMARCA2 = new Note();
                noteMARCA2._ = dt.Rows[0]["Note_MARCA2"].ToString();
                noteMARCA2.languageID = dt.Rows[0]["languageID_MARCA2"].ToString(); ;
                //END 


                despatch.Note.Add(note);
                despatch.Note.Add(noteordencompra);
                despatch.Note.Add(noteMARCA);
                despatch.Note.Add(noteMARCA2);

                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);

                //9. AdditionalDocumentReference ***************
                despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                AdditionalDocumentReference additional = new AdditionalDocumentReference();

                //9.1 ID
                despatch.AdditionalDocumentReference.Add(additional);
                additional.ID = new List<IDOnly>();
                IDOnly idonly = new IDOnly();
                idonly._ = dt.Rows[0]["adref_id"].ToString();
                additional.ID.Add(idonly);
                //9.2 DocumentTypeCode
                additional.DocumentTypeCode = new List<DocumentTypeCode>();
                DocumentTypeCode documenttypecode = new DocumentTypeCode();
                documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                additional.DocumentTypeCode.Add(documenttypecode);
                //9.3 DocumentType 
                additional.DocumentType = new List<DocumentType>();
                DocumentType documentype = new DocumentType();
                documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                additional.DocumentType.Add(documentype);
                //9.4 IssueParty 
                additional.IssuerParty = new List<IssuerParty>();
                IssuerParty issuerparty = new IssuerParty();
                additional.IssuerParty.Add(issuerparty);
                //9.4.1
                issuerparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentification = new PartyIdentification();
                issuerparty.PartyIdentification.Add(partyidentification);
                //9.4.1.1
                partyidentification.ID = new List<ID>();
                //9.4.1.1.1
                ID idadditional = new ID();
                idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysub = new CitySubdivisionName();
                citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdress.CitySubdivisionName.Add(citysub);

                //CityName
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //DISTRICT
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(citynamedelivery);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentity = new CountrySubentity();
                countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);

                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                //13.5 TotalTransportHandlingUnitQuantity
                shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                TotalTransportHandlingUnitQuantity totaltransport = new TotalTransportHandlingUnitQuantity();
                totaltransport._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString();
                shipment.TotalTransportHandlingUnitQuantity.Add(totaltransport);

                //SpecialInstructions
                shipment.SpecialInstructions = new List<SpecialInstructions>();
                // indicador m1
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {

                    SpecialInstructions specialinstructions = new SpecialInstructions();
                    specialinstructions._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(specialinstructions);
                }

                //indicador muestra chofer y vehiculo
                if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                {
                    SpecialInstructions SUNAT_Envio_IndicadorVehiculoConductoresTransp = new SpecialInstructions();
                    SUNAT_Envio_IndicadorVehiculoConductoresTransp._ = dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString();
                    shipment.SpecialInstructions.Add(SUNAT_Envio_IndicadorVehiculoConductoresTransp);
                }

                //END
                //13.5 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);


                //PUBLICO
                ////CARRIERPARTY - LISTA
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                    TransportHandlingUnit shipmentTransportHandlingUnit = new TransportHandlingUnit();
                    shipment.TransportHandlingUnit.Add(shipmentTransportHandlingUnit);

                    shipmentTransportHandlingUnit.TransportEquipment = new List<TransportEquipment>();
                    TransportEquipment TransportEquipmentshipment = new TransportEquipment();

                    TransportEquipmentshipment.ID = new List<IDOnly>();
                    IDOnly IDTransport = new IDOnly();
                    IDTransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                    TransportEquipmentshipment.ID.Add(IDTransport);
                    shipmentTransportHandlingUnit.TransportEquipment.Add(TransportEquipmentshipment);

                }
                else
                {
                    shipmentStage.CarrierParty = new List<CarrierParty>();
                    CarrierParty CarrierParty = new CarrierParty();


                    //CARRIERPARTY - PARTYIDENTIFICATION


                    CarrierParty.PartyIdentification = new List<PartyIdentification>();
                    PartyIdentification PartyIdentification = new PartyIdentification();
                    CarrierParty.PartyIdentification.Add(PartyIdentification);
                    PartyIdentification.ID = new List<ID>();

                    ID idCarrierParty = new ID();

                    idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                    idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                    PartyIdentification.ID.Add(idCarrierParty);



                    //CARRIERPARTY - PARTYLEGALENTITY
                    CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                    PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                    CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                    //PARTYLEGALENTITY - REGISTRATIONAME
                    //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                    //{


                    partyLegalEntity.RegistrationName = new List<RegistrationName>();
                    RegistrationName CarrierRegistrionName = new RegistrationName();

                    CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                    partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                    //}
                    partyLegalEntity.CompanyID = new List<CompanyID>();

                    //PARTYLEGALENTITY - COMPANYID
                    //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                    //{
                    CompanyID CarrierPartyCompanyID = new CompanyID();

                    CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                    partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                    //}
                    //CARRIERPARTY - AGENTPARTY

                    //CarrierParty.AgentParty = new List<AgentParty>();

                    ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"] != DBNull.Value)
                    ////{
                    //AgentParty CarrierPartyAgentParty = new AgentParty();
                    //CarrierParty.AgentParty.Add(CarrierPartyAgentParty);

                    //CarrierPartyAgentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                    //PartyLegalEntity CarrierPartyLegalEntity = new PartyLegalEntity();
                    //CarrierPartyAgentParty.PartyLegalEntity.Add(CarrierPartyLegalEntity);


                    //CarrierPartyLegalEntity.CompanyID = new List<CompanyID>();
                    //CompanyID CarrierCompanyID = new CompanyID();
                    //CarrierCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                    //CarrierCompanyID.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                    //CarrierPartyLegalEntity.CompanyID.Add(CarrierCompanyID);
                    //}

                    shipmentStage.CarrierParty.Add(CarrierParty);
                }
                ////END +


                //DESPATCHPARTY




                //END DESPATCHPARTY



                // END PUBLICO
                //ID
                ////DRIVERPERSON
                ////DriverPerson
                if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                {
                    shipmentStage.DriverPerson = new List<DriverPerson>();
                    DriverPerson driverperson = new DriverPerson();



                    //ID             
                    ID iddriver = new ID();


                    driverperson.ID = new List<ID>();
                    iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                    iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                    driverperson.ID.Add(iddriver);


                    //else { shipmentStage.DriverPerson = null; }


                    //if (driverperson.FirstName != null)
                    //{

                    //}
                    driverperson.FirstName = new List<FirstName>();
                    FirstName firstname = new FirstName();
                    firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                    //{

                    driverperson.FirstName.Add(firstname);

                    //}

                    //Familiname
                    //string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                    if (driverperson.FirstName != null)
                    {
                        driverperson.FamilyName = new List<FamilyName>();
                    }
                    driverperson.FamilyName = new List<FamilyName>();
                    FamilyName familyname = new FamilyName();
                    familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                    driverperson.FamilyName.Add(familyname);

                    //JOBTITLE

                    driverperson.JobTitle = new List<JobTitle>();
                    JobTitle jobtitle = new JobTitle();
                    jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                    driverperson.JobTitle.Add(jobtitle);

                    //IdentityDocumentReference

                    driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                    IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                    driverperson.IdentityDocumentReference.Add(identitydocument);

                    identitydocument.ID = new List<IDOnly>();
                    IDOnly ididentity = new IDOnly();
                    ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                    identitydocument.ID.Add(ididentity);



                    shipmentStage.DriverPerson.Add(driverperson);
                }

                ////13.6 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.6.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //CITYSUBDIVIONAME
                deliveryadrress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionname = new CitySubdivisionName();
                citysubdivionname._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CitySubdivisionName"].ToString();
                deliveryadrress.CitySubdivisionName.Add(citysubdivionname);

                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);

                ////  13.6.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                ////  13.6.2.1 DELIVERY DESPATCH 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                //CITYSUBDIVIONAME
                despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //DESPATCHPARTY 
                despatchdelivery.DespatchParty = new List<DespatchParty>();
                DespatchParty despatchparty = new DespatchParty();
                despatchdelivery.DespatchParty.Add(despatchparty);




                despatchparty.AgentParty = new List<AgentParty>();
                AgentParty agentParty = new AgentParty();
                despatchparty.AgentParty.Add(agentParty);

                agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                agentParty.PartyLegalEntity.Add(partylegalentityagent);

                partylegalentityagent.CompanyID = new List<CompanyID>();
                CompanyID companyid = new CompanyID();
                companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                partylegalentityagent.CompanyID.Add(companyid);


                //13.7 TransportHandlingUnit
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit transporthand = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(transporthand);
                //TRANSPORTEQUIPMENT
                transporthand.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment transportequipment = new TransportEquipment();
                transporthand.TransportEquipment.Add(transportequipment);
                //TRANSPORT ID 
                transportequipment.ID = new List<IDOnly>();
                IDOnly idtransport = new IDOnly();
                idtransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                transportequipment.ID.Add(idtransport);
                //PLACA 2 
                transportequipment.AttachedTransportEquipment = new List<IDOnlyA>();
                IDOnlyA IDONLYA = new IDOnlyA();
                transportequipment.AttachedTransportEquipment.Add(IDONLYA);
                IDONLYA.ID = new List<IDOnly>();
                IDOnly OnlyID = new IDOnly();
                OnlyID._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_AttachedTransportEquipment_ID__"].ToString();
                IDONLYA.ID.Add(OnlyID);
                //IDONLYA.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //ApplicableTransportMeans ApplicableTransportMeansid = new ApplicableTransportMeans();
                //IDONLYA.ApplicableTransportMeans.Add(ApplicableTransportMeansid);
                //ApplicableTransportMeansid.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //RegistrationNationalityID RegistrationNationalityIDtransportPLACA2 = new RegistrationNationalityID();
                //RegistrationNationalityIDtransportPLACA2._ = "TARJETACER2";
                //ApplicableTransportMeansid.RegistrationNationalityID.Add(RegistrationNationalityIDtransportPLACA2);
                ////END PLACA 2 
                //if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                //{
                //    //ApplicableTransportMeans
                //    transportequipment.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //    ApplicableTransportMeans ApplicableTransportMeanstransport = new ApplicableTransportMeans();
                //    transportequipment.ApplicableTransportMeans.Add(ApplicableTransportMeanstransport);

                //    ApplicableTransportMeanstransport.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //    RegistrationNationalityID RegistrationNationalityIDtransport = new RegistrationNationalityID();
                //    RegistrationNationalityIDtransport._ = dt.Rows[0]["TransportHandlingUnit_TransportEquipment_ApplicableTransportMeans_RegistrationNationalityID__"].ToString();

                //    ApplicableTransportMeanstransport.RegistrationNationalityID.Add(RegistrationNationalityIDtransport);
                //}



                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);

                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);


                //Type tipoClaseAnidada = roo2.DespatchAdvice;
                //string jsonarreglado = RecorrerPropiedades(despatch);
                //RecorrerPropiedades(roo2);

            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }

        //CHECK
        //TRASLADO PRIVADO
        public void ConvertirJsonAClases_TrasladoMismaEmpresaPrivada(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);

                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();

                //NUEVO
                //ORDEN DE COMPRA

                Note noteordencompra = new Note();
                noteordencompra._ = dt.Rows[0]["Note_OCNRO"].ToString();
                noteordencompra.languageID = dt.Rows[0]["languageID_OCNRO"].ToString(); ;

                //MARCA 
                Note noteMARCA = new Note();
                noteMARCA._ = dt.Rows[0]["Note_MARCA"].ToString();
                noteMARCA.languageID = dt.Rows[0]["languageID_MARCA"].ToString(); ;

                //MARCA 2
                Note noteMARCA2 = new Note();
                noteMARCA2._ = dt.Rows[0]["Note_MARCA2"].ToString();
                noteMARCA2.languageID = dt.Rows[0]["languageID_MARCA2"].ToString(); ;
                //END 


                despatch.Note.Add(note);
                despatch.Note.Add(noteordencompra);
                despatch.Note.Add(noteMARCA);
                despatch.Note.Add(noteMARCA2);

                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);

                //9. AdditionalDocumentReference ***************
                //despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                //AdditionalDocumentReference additional = new AdditionalDocumentReference();

                ////9.1 ID
                //despatch.AdditionalDocumentReference.Add(additional);
                //additional.ID = new List<IDOnly>();
                //IDOnly idonly = new IDOnly();
                //idonly._ = dt.Rows[0]["adref_id"].ToString();
                //additional.ID.Add(idonly);
                ////9.2 DocumentTypeCode
                //additional.DocumentTypeCode = new List<DocumentTypeCode>();
                //DocumentTypeCode documenttypecode = new DocumentTypeCode();
                //documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                //additional.DocumentTypeCode.Add(documenttypecode);
                ////9.3 DocumentType 
                //additional.DocumentType = new List<DocumentType>();
                //DocumentType documentype = new DocumentType();
                //documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                //additional.DocumentType.Add(documentype);
                ////9.4 IssueParty 
                //additional.IssuerParty = new List<IssuerParty>();
                //IssuerParty issuerparty = new IssuerParty();
                //additional.IssuerParty.Add(issuerparty);
                ////9.4.1
                //issuerparty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification partyidentification = new PartyIdentification();
                //issuerparty.PartyIdentification.Add(partyidentification);
                ////9.4.1.1
                //partyidentification.ID = new List<ID>();
                ////9.4.1.1.1
                //ID idadditional = new ID();
                //idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                //idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                //partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                //postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysub = new CitySubdivisionName();
                //citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                //postaladdress.CitySubdivisionName.Add(citysub);

                //CityName
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //DISTRICT
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                //postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                //citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                //postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(citynamedelivery);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentity = new CountrySubentity();
                countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);

                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                //13.5 TotalTransportHandlingUnitQuantity
                shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                TotalTransportHandlingUnitQuantity totaltransport = new TotalTransportHandlingUnitQuantity();
                totaltransport._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString();
                shipment.TotalTransportHandlingUnitQuantity.Add(totaltransport);


                //shipment.SpecialInstructions = new List<SpecialInstructions>();
                // indicador m1
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.SpecialInstructions = new List<SpecialInstructions>();
                    SpecialInstructions specialinstructionss = new SpecialInstructions();
                    specialinstructionss._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(specialinstructionss);
                }

                //END
                //13.5 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);


                //PUBLICO
                ////CARRIERPARTY - LISTA
                //shipmentStage.CarrierParty = new List<CarrierParty>();
                //CarrierParty CarrierParty = new CarrierParty();


                ////CARRIERPARTY - PARTYIDENTIFICATION


                //CarrierParty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification PartyIdentification = new PartyIdentification();
                //CarrierParty.PartyIdentification.Add(PartyIdentification);
                //PartyIdentification.ID = new List<ID>();

                //ID idCarrierParty = new ID();

                //idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                //idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                //PartyIdentification.ID.Add(idCarrierParty);



                ////CARRIERPARTY - PARTYLEGALENTITY
                //CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                //CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                ////PARTYLEGALENTITY - REGISTRATIONAME
                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                ////{


                //partyLegalEntity.RegistrationName = new List<RegistrationName>();
                //RegistrationName CarrierRegistrionName = new RegistrationName();

                //CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                //partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                ////}
                //partyLegalEntity.CompanyID = new List<CompanyID>();

                ////PARTYLEGALENTITY - COMPANYID
                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                ////{
                //CompanyID CarrierPartyCompanyID = new CompanyID();

                //CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                //partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                ////}
                ////CARRIERPARTY - AGENTPARTY

                //CarrierParty.AgentParty = new List<AgentParty>();

                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"] != DBNull.Value)
                ////{
                //AgentParty CarrierPartyAgentParty = new AgentParty();
                //CarrierParty.AgentParty.Add(CarrierPartyAgentParty);

                //CarrierPartyAgentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity CarrierPartyLegalEntity = new PartyLegalEntity();
                //CarrierPartyAgentParty.PartyLegalEntity.Add(CarrierPartyLegalEntity);


                //CarrierPartyLegalEntity.CompanyID = new List<CompanyID>();
                //CompanyID CarrierCompanyID = new CompanyID();
                //CarrierCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierCompanyID.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierPartyLegalEntity.CompanyID.Add(CarrierCompanyID);
                ////}

                //shipmentStage.CarrierParty.Add(CarrierParty);

                ////END CARRIERPARTY


                //DESPATCHPARTY




                //END DESPATCHPARTY



                // END PUBLICO
                //ID
                ////DriverPerson
                //shipmentStage.DriverPerson = new List<DriverPerson>();
                //DriverPerson driverperson = new DriverPerson();
                //shipmentStage.DriverPerson.Add(driverperson);
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                    TransportHandlingUnit shipmentTransportHandlingUnit = new TransportHandlingUnit();
                    shipment.TransportHandlingUnit.Add(shipmentTransportHandlingUnit);

                    shipmentTransportHandlingUnit.TransportEquipment = new List<TransportEquipment>();
                    TransportEquipment TransportEquipmentshipment = new TransportEquipment();

                    TransportEquipmentshipment.ID = new List<IDOnly>();
                    IDOnly IDTransport = new IDOnly();
                    IDTransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                    TransportEquipmentshipment.ID.Add(IDTransport);
                    shipmentTransportHandlingUnit.TransportEquipment.Add(TransportEquipmentshipment);

                }
                else
                {

                    shipmentStage.DriverPerson = new List<DriverPerson>();
                    DriverPerson driverperson = new DriverPerson();

                    //ID             
                    ID iddriver = new ID();


                    driverperson.ID = new List<ID>();
                    iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                    iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                    driverperson.ID.Add(iddriver);






                    driverperson.FirstName = new List<FirstName>();
                    FirstName firstname = new FirstName();
                    firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                    //{

                    driverperson.FirstName.Add(firstname);

                    //}

                    //Familiname
                    //string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();

                    if (driverperson.FirstName != null)
                    {
                        driverperson.FamilyName = new List<FamilyName>();
                    }
                    driverperson.FamilyName = new List<FamilyName>();
                    FamilyName familyname = new FamilyName();
                    familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                    driverperson.FamilyName.Add(familyname);

                    //JOBTITLE

                    driverperson.JobTitle = new List<JobTitle>();
                    JobTitle jobtitle = new JobTitle();
                    jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                    driverperson.JobTitle.Add(jobtitle);

                    //IdentityDocumentReference

                    driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                    IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                    driverperson.IdentityDocumentReference.Add(identitydocument);

                    identitydocument.ID = new List<IDOnly>();
                    IDOnly ididentity = new IDOnly();
                    ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                    identitydocument.ID.Add(ididentity);



                    shipmentStage.DriverPerson.Add(driverperson);

                }
                //13.6 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.6.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //ADDRESSTYPECODE
                deliveryadrress.AddressTypeCode = new List<AddressTypeCode>();
                AddressTypeCode addressTypecode = new AddressTypeCode();
                addressTypecode._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressTypeCode__"].ToString();
                addressTypecode.listID = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressTypeCode_listID"].ToString();
                deliveryadrress.AddressTypeCode.Add(addressTypecode);
                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);


                //  13.6.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                //  13.6.2.1 DELIVERY ADDRESS 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                //ADDRESSTYPECODE
                despatchaddress.AddressTypeCode = new List<AddressTypeCode>();
                AddressTypeCode addressTypecodedelivery = new AddressTypeCode();
                addressTypecodedelivery._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressTypeCode__"].ToString();
                addressTypecodedelivery.listID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_listID"].ToString();
                despatchaddress.AddressTypeCode.Add(addressTypecodedelivery);
                //CITYSUBDIVIONAME
                //despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                //citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                //despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //DESPATCHPARTY 
                //despatchdelivery.DespatchParty = new List<DespatchParty>();
                //DespatchParty despatchparty = new DespatchParty();
                //despatchdelivery.DespatchParty.Add(despatchparty);



                ////if (dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                ////{
                //despatchparty.AgentParty = new List<AgentParty>();
                //AgentParty agentParty = new AgentParty();
                //despatchparty.AgentParty.Add(agentParty);

                //agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                //agentParty.PartyLegalEntity.Add(partylegalentityagent);

                //partylegalentityagent.CompanyID = new List<CompanyID>();
                //CompanyID companyid = new CompanyID();
                //companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                //companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //partylegalentityagent.CompanyID.Add(companyid);
                ////}


                //13.7 TransportHandlingUnit
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit transporthand = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(transporthand);
                //TRANSPORTEQUIPMENT
                transporthand.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment transportequipment = new TransportEquipment();
                transporthand.TransportEquipment.Add(transportequipment);
                //TRANSPORT ID 
                transportequipment.ID = new List<IDOnly>();
                IDOnly idtransport = new IDOnly();
                idtransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                transportequipment.ID.Add(idtransport);


                //PLACA SECUNDARIA
                transportequipment.AttachedTransportEquipment = new List<IDOnlyA>();
                IDOnlyA IDONLYA = new IDOnlyA();
                transportequipment.AttachedTransportEquipment.Add(IDONLYA);
                IDONLYA.ID = new List<IDOnly>();
                IDOnly OnlyID = new IDOnly();
                OnlyID._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_AttachedTransportEquipment_ID__"].ToString();
                IDONLYA.ID.Add(OnlyID);
                //TARJETA CER2 NO VA
                //IDONLYA.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //ApplicableTransportMeans ApplicableTransportMeansid = new ApplicableTransportMeans();
                //IDONLYA.ApplicableTransportMeans.Add(ApplicableTransportMeansid);
                //ApplicableTransportMeansid.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //RegistrationNationalityID RegistrationNationalityIDtransportPLACA2 = new RegistrationNationalityID();
                //RegistrationNationalityIDtransportPLACA2._ = "TARJETACER2";
                //ApplicableTransportMeansid.RegistrationNationalityID.Add(RegistrationNationalityIDtransportPLACA2);
                //END PLACA SECUNDARIA


                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);

                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);


                //Type tipoClaseAnidada = roo2.DespatchAdvice;
                //string jsonarreglado = RecorrerPropiedades(despatch);
                //RecorrerPropiedades(roo2);

            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }
        //CHECK
        //TRASLADO PUBLICA
        public void ConvertirJsonAClases_TrasladoMismaEmpresaPublica(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);

                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();

                //NUEVO
                //ORDEN DE COMPRA

                Note noteordencompra = new Note();
                noteordencompra._ = dt.Rows[0]["Note_OCNRO"].ToString();
                noteordencompra.languageID = dt.Rows[0]["languageID_OCNRO"].ToString(); ;

                //MARCA 
                Note noteMARCA = new Note();
                noteMARCA._ = dt.Rows[0]["Note_MARCA"].ToString();
                noteMARCA.languageID = dt.Rows[0]["languageID_MARCA"].ToString(); ;

                //MARCA 2
                Note noteMARCA2 = new Note();
                noteMARCA2._ = dt.Rows[0]["Note_MARCA2"].ToString();
                noteMARCA2.languageID = dt.Rows[0]["languageID_MARCA2"].ToString(); ;
                //END 


                despatch.Note.Add(note);
                despatch.Note.Add(noteordencompra);
                despatch.Note.Add(noteMARCA);
                despatch.Note.Add(noteMARCA2);
                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);

                //9. AdditionalDocumentReference ***************
                //despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                //AdditionalDocumentReference additional = new AdditionalDocumentReference();

                ////9.1 ID
                //despatch.AdditionalDocumentReference.Add(additional);
                //additional.ID = new List<IDOnly>();
                //IDOnly idonly = new IDOnly();
                //idonly._ = dt.Rows[0]["adref_id"].ToString();
                //additional.ID.Add(idonly);
                ////9.2 DocumentTypeCode
                //additional.DocumentTypeCode = new List<DocumentTypeCode>();
                //DocumentTypeCode documenttypecode = new DocumentTypeCode();
                //documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                //additional.DocumentTypeCode.Add(documenttypecode);
                ////9.3 DocumentType 
                //additional.DocumentType = new List<DocumentType>();
                //DocumentType documentype = new DocumentType();
                //documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                //additional.DocumentType.Add(documentype);
                ////9.4 IssueParty 
                //additional.IssuerParty = new List<IssuerParty>();
                //IssuerParty issuerparty = new IssuerParty();
                //additional.IssuerParty.Add(issuerparty);
                ////9.4.1
                //issuerparty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification partyidentification = new PartyIdentification();
                //issuerparty.PartyIdentification.Add(partyidentification);
                ////9.4.1.1
                //partyidentification.ID = new List<ID>();
                ////9.4.1.1.1
                //ID idadditional = new ID();
                //idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                //idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                //partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                //postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysub = new CitySubdivisionName();
                //citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                //postaladdress.CitySubdivisionName.Add(citysub);

                //CityName
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //DISTRICT
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                //postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                //citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                //postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(citynamedelivery);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentity = new CountrySubentity();
                countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);

                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                //13.5 TotalTransportHandlingUnitQuantity
                shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                TotalTransportHandlingUnitQuantity totaltransport = new TotalTransportHandlingUnitQuantity();
                totaltransport._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString();
                shipment.TotalTransportHandlingUnitQuantity.Add(totaltransport);
                shipment.SpecialInstructions = new List<SpecialInstructions>();
                // indicador m1
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {

                    SpecialInstructions specialinstructions = new SpecialInstructions();
                    specialinstructions._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(specialinstructions);
                }
                //indicador muestra chofer y vehiculo
                if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                {
                    SpecialInstructions SUNAT_Envio_IndicadorVehiculoConductoresTransp = new SpecialInstructions();
                    SUNAT_Envio_IndicadorVehiculoConductoresTransp._ = dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString();
                    shipment.SpecialInstructions.Add(SUNAT_Envio_IndicadorVehiculoConductoresTransp);
                }
                //END
                //13.5 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);


                //PUBLICO
                ////CARRIERPARTY - LISTA
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                    TransportHandlingUnit shipmentTransportHandlingUnit = new TransportHandlingUnit();
                    shipment.TransportHandlingUnit.Add(shipmentTransportHandlingUnit);

                    shipmentTransportHandlingUnit.TransportEquipment = new List<TransportEquipment>();
                    TransportEquipment TransportEquipmentshipment = new TransportEquipment();

                    TransportEquipmentshipment.ID = new List<IDOnly>();
                    IDOnly IDTransport = new IDOnly();
                    IDTransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                    TransportEquipmentshipment.ID.Add(IDTransport);
                    shipmentTransportHandlingUnit.TransportEquipment.Add(TransportEquipmentshipment);

                }
                else
                {
                    shipmentStage.CarrierParty = new List<CarrierParty>();
                    CarrierParty CarrierParty = new CarrierParty();


                    //CARRIERPARTY - PARTYIDENTIFICATION


                    CarrierParty.PartyIdentification = new List<PartyIdentification>();
                    PartyIdentification PartyIdentification = new PartyIdentification();
                    CarrierParty.PartyIdentification.Add(PartyIdentification);
                    PartyIdentification.ID = new List<ID>();

                    ID idCarrierParty = new ID();

                    idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                    idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                    PartyIdentification.ID.Add(idCarrierParty);



                    //CARRIERPARTY - PARTYLEGALENTITY
                    CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                    PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                    CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                    //PARTYLEGALENTITY - REGISTRATIONAME
                    //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                    //{


                    partyLegalEntity.RegistrationName = new List<RegistrationName>();
                    RegistrationName CarrierRegistrionName = new RegistrationName();

                    CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                    partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                    //}
                    partyLegalEntity.CompanyID = new List<CompanyID>();

                    //PARTYLEGALENTITY - COMPANYID
                    //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                    //{
                    CompanyID CarrierPartyCompanyID = new CompanyID();

                    CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                    partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                    //}
                    //CARRIERPARTY - AGENTPARTY

                    //CarrierParty.AgentParty = new List<AgentParty>();

                    ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"] != DBNull.Value)
                    ////{
                    //AgentParty CarrierPartyAgentParty = new AgentParty();
                    //CarrierParty.AgentParty.Add(CarrierPartyAgentParty);

                    //CarrierPartyAgentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                    //PartyLegalEntity CarrierPartyLegalEntity = new PartyLegalEntity();
                    //CarrierPartyAgentParty.PartyLegalEntity.Add(CarrierPartyLegalEntity);


                    //CarrierPartyLegalEntity.CompanyID = new List<CompanyID>();
                    //CompanyID CarrierCompanyID = new CompanyID();
                    //CarrierCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                    //CarrierCompanyID.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                    //CarrierPartyLegalEntity.CompanyID.Add(CarrierCompanyID);
                    //}

                    shipmentStage.CarrierParty.Add(CarrierParty);

                    //DRIVERPERSON
                    if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                    {
                        shipmentStage.DriverPerson = new List<DriverPerson>();
                        DriverPerson driverperson = new DriverPerson();



                        //if (Exists(shipmentStage.DriverPerson))
                        //{
                        //    MessageBox.Show("El objeto existe");
                        //}
                        //else 
                        //{
                        //    MessageBox.Show("El objeto NO existe");
                        //}


                        //ID             
                        ID iddriver = new ID();
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"] != DBNull.Value)
                        {

                            driverperson.ID = new List<ID>();
                            iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                            iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                            driverperson.ID.Add(iddriver);

                        }

                        //else { shipmentStage.DriverPerson = null; }

                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"] != DBNull.Value)
                        {
                            //if (driverperson.FirstName != null)
                            //{

                            //}
                            driverperson.FirstName = new List<FirstName>();
                            FirstName firstname = new FirstName();
                            firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                            //{

                            driverperson.FirstName.Add(firstname);
                        }
                        //}

                        //Familiname
                        //string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"] != DBNull.Value)
                        {
                            if (driverperson.FirstName != null)
                            {
                                driverperson.FamilyName = new List<FamilyName>();
                            }
                            driverperson.FamilyName = new List<FamilyName>();
                            FamilyName familyname = new FamilyName();
                            familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                            driverperson.FamilyName.Add(familyname);
                        }
                        //JOBTITLE
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"] != DBNull.Value)
                        {
                            driverperson.JobTitle = new List<JobTitle>();
                            JobTitle jobtitle = new JobTitle();
                            jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                            driverperson.JobTitle.Add(jobtitle);
                        }
                        //IdentityDocumentReference
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"] != DBNull.Value)
                        {
                            driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                            IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                            driverperson.IdentityDocumentReference.Add(identitydocument);

                            identitydocument.ID = new List<IDOnly>();
                            IDOnly ididentity = new IDOnly();
                            ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                            identitydocument.ID.Add(ididentity);

                        }

                        shipmentStage.DriverPerson.Add(driverperson);
                    }
                    //END DRIVERPERSON
                }
                ////END CARRIERPARTY


                //DESPATCHPARTY




                //END DESPATCHPARTY



                // END PUBLICO
                //ID
                ////DriverPerson
                //shipmentStage.DriverPerson = new List<DriverPerson>();
                //DriverPerson driverperson = new DriverPerson();
                //shipmentStage.DriverPerson.Add(driverperson);


                //shipmentStage.DriverPerson = new List<DriverPerson>();
                //DriverPerson driverperson = new DriverPerson();

                ////ID             
                //ID iddriver = new ID();


                //driverperson.ID = new List<ID>();
                //iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                //iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                //driverperson.ID.Add(iddriver);






                //driverperson.FirstName = new List<FirstName>();
                //FirstName firstname = new FirstName();
                //firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                ////{

                //driverperson.FirstName.Add(firstname);

                ////}

                ////Familiname
                ////string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();

                //if (driverperson.FirstName != null)
                //{
                //    driverperson.FamilyName = new List<FamilyName>();
                //}
                //driverperson.FamilyName = new List<FamilyName>();
                //FamilyName familyname = new FamilyName();
                //familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                //driverperson.FamilyName.Add(familyname);

                ////JOBTITLE

                //driverperson.JobTitle = new List<JobTitle>();
                //JobTitle jobtitle = new JobTitle();
                //jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                //driverperson.JobTitle.Add(jobtitle);

                ////IdentityDocumentReference

                //driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                //IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                //driverperson.IdentityDocumentReference.Add(identitydocument);

                //identitydocument.ID = new List<IDOnly>();
                //IDOnly ididentity = new IDOnly();
                //ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                //identitydocument.ID.Add(ididentity);



                //shipmentStage.DriverPerson.Add(driverperson);


                //13.6 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.6.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);
                //1.0
                //ADDRESSTYPECODE
                deliveryadrress.AddressTypeCode = new List<AddressTypeCode>();
                AddressTypeCode addressTypecode = new AddressTypeCode();
                addressTypecode._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressTypeCode__"].ToString();
                addressTypecode.listID = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressTypeCode_listID"].ToString();
                deliveryadrress.AddressTypeCode.Add(addressTypecode);
                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);


                //  13.6.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                //  13.6.2.1 DELIVERY ADDRESS 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);
                //2.0
                //ADDRESSTYPECODE
                despatchaddress.AddressTypeCode = new List<AddressTypeCode>();
                AddressTypeCode addressTypecodedelivery = new AddressTypeCode();
                addressTypecodedelivery._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressTypeCode__"].ToString();
                addressTypecodedelivery.listID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_listID"].ToString();
                despatchaddress.AddressTypeCode.Add(addressTypecodedelivery);
                //CITYSUBDIVIONAME
                //despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                //citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                //despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //DESPATCHPARTY 
                despatchdelivery.DespatchParty = new List<DespatchParty>();
                DespatchParty despatchparty = new DespatchParty();
                despatchdelivery.DespatchParty.Add(despatchparty);



                //if (dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                //{
                despatchparty.AgentParty = new List<AgentParty>();
                AgentParty agentParty = new AgentParty();
                despatchparty.AgentParty.Add(agentParty);

                agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                agentParty.PartyLegalEntity.Add(partylegalentityagent);

                partylegalentityagent.CompanyID = new List<CompanyID>();
                CompanyID companyid = new CompanyID();
                companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                partylegalentityagent.CompanyID.Add(companyid);
                ////}


                //13.7 TransportHandlingUnit
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit transporthand = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(transporthand);
                //TRANSPORTEQUIPMENT
                transporthand.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment transportequipment = new TransportEquipment();
                transporthand.TransportEquipment.Add(transportequipment);
                //TRANSPORT ID 
                transportequipment.ID = new List<IDOnly>();
                IDOnly idtransport = new IDOnly();
                idtransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                transportequipment.ID.Add(idtransport);

                //PLACA 2
                transportequipment.AttachedTransportEquipment = new List<IDOnlyA>();
                IDOnlyA IDONLYA = new IDOnlyA();
                transportequipment.AttachedTransportEquipment.Add(IDONLYA);
                IDONLYA.ID = new List<IDOnly>();
                IDOnly OnlyID = new IDOnly();
                OnlyID._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_AttachedTransportEquipment_ID__"].ToString();
                IDONLYA.ID.Add(OnlyID);

                //IDONLYA.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //ApplicableTransportMeans ApplicableTransportMeansid = new ApplicableTransportMeans();
                //IDONLYA.ApplicableTransportMeans.Add(ApplicableTransportMeansid);
                //ApplicableTransportMeansid.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //RegistrationNationalityID RegistrationNationalityIDtransportPLACA2 = new RegistrationNationalityID();
                //RegistrationNationalityIDtransportPLACA2._ = "TARJETACER2";
                //ApplicableTransportMeansid.RegistrationNationalityID.Add(RegistrationNationalityIDtransportPLACA2);
                ////END PLACA 2 

                //if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                //{
                //    //APPLICABLETRANSPORT
                //    transportequipment.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //    ApplicableTransportMeans ApplicableTransportMeanstransport = new ApplicableTransportMeans();
                //    transportequipment.ApplicableTransportMeans.Add(ApplicableTransportMeanstransport);

                //    ApplicableTransportMeanstransport.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //    RegistrationNationalityID RegistrationNationalityIDapplicable = new RegistrationNationalityID();
                //    RegistrationNationalityIDapplicable._ = dt.Rows[0]["TransportHandlingUnit_TransportEquipment_ApplicableTransportMeans_RegistrationNationalityID__"].ToString();
                //    ApplicableTransportMeanstransport.RegistrationNationalityID.Add(RegistrationNationalityIDapplicable);
                //}



                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);

                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);


                //Type tipoClaseAnidada = roo2.DespatchAdvice;
                //string jsonarreglado = RecorrerPropiedades(despatch);
                //RecorrerPropiedades(roo2);

            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }

        //OTROS PUBLICA - CHECK
        public void ConvertirJsonAClases_OtrosPublica(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);

                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();

                //NUEVO
                //ORDEN DE COMPRA

                Note noteordencompra = new Note();
                noteordencompra._ = dt.Rows[0]["Note_OCNRO"].ToString();
                noteordencompra.languageID = dt.Rows[0]["languageID_OCNRO"].ToString(); ;

                //MARCA 
                Note noteMARCA = new Note();
                noteMARCA._ = dt.Rows[0]["Note_MARCA"].ToString();
                noteMARCA.languageID = dt.Rows[0]["languageID_MARCA"].ToString(); ;

                //MARCA 2
                Note noteMARCA2 = new Note();
                noteMARCA2._ = dt.Rows[0]["Note_MARCA2"].ToString();
                noteMARCA2.languageID = dt.Rows[0]["languageID_MARCA2"].ToString(); ;
                //END 


                despatch.Note.Add(note);
                despatch.Note.Add(noteordencompra);
                despatch.Note.Add(noteMARCA);
                despatch.Note.Add(noteMARCA2);

                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);

                //9. AdditionalDocumentReference ***************
                despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                AdditionalDocumentReference additional = new AdditionalDocumentReference();

                //9.1 ID
                despatch.AdditionalDocumentReference.Add(additional);
                additional.ID = new List<IDOnly>();
                IDOnly idonly = new IDOnly();
                idonly._ = dt.Rows[0]["adref_id"].ToString();
                additional.ID.Add(idonly);
                //9.2 DocumentTypeCode
                additional.DocumentTypeCode = new List<DocumentTypeCode>();
                DocumentTypeCode documenttypecode = new DocumentTypeCode();
                documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                additional.DocumentTypeCode.Add(documenttypecode);
                //9.3 DocumentType 
                additional.DocumentType = new List<DocumentType>();
                DocumentType documentype = new DocumentType();
                documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                additional.DocumentType.Add(documentype);
                //9.4 IssueParty 
                additional.IssuerParty = new List<IssuerParty>();
                IssuerParty issuerparty = new IssuerParty();
                additional.IssuerParty.Add(issuerparty);
                //9.4.1
                issuerparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentification = new PartyIdentification();
                issuerparty.PartyIdentification.Add(partyidentification);
                //9.4.1.1
                partyidentification.ID = new List<ID>();
                //9.4.1.1.1
                ID idadditional = new ID();
                idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysub = new CitySubdivisionName();
                citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdress.CitySubdivisionName.Add(citysub);

                //CityName
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //DISTRICT
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(citynamedelivery);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentity = new CountrySubentity();
                countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);

                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                //13.5 TotalTransportHandlingUnitQuantity
                shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                TotalTransportHandlingUnitQuantity totaltransport = new TotalTransportHandlingUnitQuantity();
                totaltransport._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString();
                shipment.TotalTransportHandlingUnitQuantity.Add(totaltransport);
                shipment.SpecialInstructions = new List<SpecialInstructions>();
                //SpecialInstructions
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {

                    SpecialInstructions specialinstructions = new SpecialInstructions();
                    specialinstructions._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(specialinstructions);
                }

                //indicador muestra chofer y vehiculo
                if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                {
                    SpecialInstructions SUNAT_Envio_IndicadorVehiculoConductoresTransp = new SpecialInstructions();
                    SUNAT_Envio_IndicadorVehiculoConductoresTransp._ = dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString();
                    shipment.SpecialInstructions.Add(SUNAT_Envio_IndicadorVehiculoConductoresTransp);
                }

                //13.5 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);


                //PUBLICO
                //CARRIERPARTY - LISTA
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                    TransportHandlingUnit shipmentTransportHandlingUnit = new TransportHandlingUnit();
                    shipment.TransportHandlingUnit.Add(shipmentTransportHandlingUnit);

                    shipmentTransportHandlingUnit.TransportEquipment = new List<TransportEquipment>();
                    TransportEquipment TransportEquipmentshipment = new TransportEquipment();

                    TransportEquipmentshipment.ID = new List<IDOnly>();
                    IDOnly IDTransport = new IDOnly();
                    IDTransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                    TransportEquipmentshipment.ID.Add(IDTransport);
                    shipmentTransportHandlingUnit.TransportEquipment.Add(TransportEquipmentshipment);

                }
                else
                {
                    shipmentStage.CarrierParty = new List<CarrierParty>();
                    CarrierParty CarrierParty = new CarrierParty();


                    //CARRIERPARTY - PARTYIDENTIFICATION


                    CarrierParty.PartyIdentification = new List<PartyIdentification>();
                    PartyIdentification PartyIdentification = new PartyIdentification();
                    CarrierParty.PartyIdentification.Add(PartyIdentification);
                    PartyIdentification.ID = new List<ID>();

                    ID idCarrierParty = new ID();

                    idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                    idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                    PartyIdentification.ID.Add(idCarrierParty);



                    //CARRIERPARTY - PARTYLEGALENTITY
                    CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                    PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                    CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                    //PARTYLEGALENTITY - REGISTRATIONAME
                    //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                    //{


                    partyLegalEntity.RegistrationName = new List<RegistrationName>();
                    RegistrationName CarrierRegistrionName = new RegistrationName();

                    CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                    partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                    //}
                    partyLegalEntity.CompanyID = new List<CompanyID>();

                    //PARTYLEGALENTITY - COMPANYID
                    //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                    //{
                    CompanyID CarrierPartyCompanyID = new CompanyID();

                    CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                    partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                    //}
                    //CARRIERPARTY - AGENTPARTY

                    CarrierParty.AgentParty = new List<AgentParty>();

                    //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"] != DBNull.Value)
                    //{
                    //AgentParty CarrierPartyAgentParty = new AgentParty();
                    //CarrierParty.AgentParty.Add(CarrierPartyAgentParty);

                    //CarrierPartyAgentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                    //PartyLegalEntity CarrierPartyLegalEntity = new PartyLegalEntity();
                    //CarrierPartyAgentParty.PartyLegalEntity.Add(CarrierPartyLegalEntity);


                    //CarrierPartyLegalEntity.CompanyID = new List<CompanyID>();
                    //CompanyID CarrierCompanyID = new CompanyID();
                    //CarrierCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                    //CarrierCompanyID.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                    //CarrierPartyLegalEntity.CompanyID.Add(CarrierCompanyID);
                    //}

                    shipmentStage.CarrierParty.Add(CarrierParty);
                    if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                    {
                        shipmentStage.DriverPerson = new List<DriverPerson>();
                        DriverPerson driverperson = new DriverPerson();



                        //if (Exists(shipmentStage.DriverPerson))
                        //{
                        //    MessageBox.Show("El objeto existe");
                        //}
                        //else 
                        //{
                        //    MessageBox.Show("El objeto NO existe");
                        //}


                        //ID             
                        ID iddriver = new ID();
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"] != DBNull.Value)
                        {

                            driverperson.ID = new List<ID>();
                            iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                            iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                            driverperson.ID.Add(iddriver);

                        }

                        //else { shipmentStage.DriverPerson = null; }

                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"] != DBNull.Value)
                        {
                            //if (driverperson.FirstName != null)
                            //{

                            //}
                            driverperson.FirstName = new List<FirstName>();
                            FirstName firstname = new FirstName();
                            firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                            //{

                            driverperson.FirstName.Add(firstname);
                        }
                        //}

                        //Familiname
                        //string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"] != DBNull.Value)
                        {
                            if (driverperson.FirstName != null)
                            {
                                driverperson.FamilyName = new List<FamilyName>();
                            }
                            driverperson.FamilyName = new List<FamilyName>();
                            FamilyName familyname = new FamilyName();
                            familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                            driverperson.FamilyName.Add(familyname);
                        }
                        //JOBTITLE
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"] != DBNull.Value)
                        {
                            driverperson.JobTitle = new List<JobTitle>();
                            JobTitle jobtitle = new JobTitle();
                            jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                            driverperson.JobTitle.Add(jobtitle);
                        }
                        //IdentityDocumentReference
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"] != DBNull.Value)
                        {
                            driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                            IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                            driverperson.IdentityDocumentReference.Add(identitydocument);

                            identitydocument.ID = new List<IDOnly>();
                            IDOnly ididentity = new IDOnly();
                            ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                            identitydocument.ID.Add(ididentity);

                        }

                        shipmentStage.DriverPerson.Add(driverperson);
                    }
                }

                //END CARRIERPARTY


                //DESPATCHPARTY




                //END DESPATCHPARTY



                // END PUBLICO
                //ID
                ////DriverPerson
                //shipmentStage.DriverPerson = new List<DriverPerson>();
                //DriverPerson driverperson = new DriverPerson();
                //shipmentStage.DriverPerson.Add(driverperson);




                //if (propiedades == null)
                //{
                //    shipmentStage.DriverPerson = null;
                //}

                //13.6 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.6.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //CITYSUBDIVIONAME
                deliveryadrress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionname = new CitySubdivisionName();
                citysubdivionname._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CitySubdivisionName"].ToString();
                deliveryadrress.CitySubdivisionName.Add(citysubdivionname);

                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);

                //  13.6.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                //  13.6.2.1 DELIVERY DESPATCH 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                //CITYSUBDIVIONAME
                despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //DESPATCHPARTY 
                despatchdelivery.DespatchParty = new List<DespatchParty>();
                DespatchParty despatchparty = new DespatchParty();
                despatchdelivery.DespatchParty.Add(despatchparty);



                //if (dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                //{
                despatchparty.AgentParty = new List<AgentParty>();
                AgentParty agentParty = new AgentParty();
                despatchparty.AgentParty.Add(agentParty);

                agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                agentParty.PartyLegalEntity.Add(partylegalentityagent);

                partylegalentityagent.CompanyID = new List<CompanyID>();
                CompanyID companyid = new CompanyID();
                companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                partylegalentityagent.CompanyID.Add(companyid);

                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit TransportHandlingUnit = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(TransportHandlingUnit);

                TransportHandlingUnit.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment transportequipment = new TransportEquipment();
                TransportHandlingUnit.TransportEquipment.Add(transportequipment);

                transportequipment.ID = new List<IDOnly>();
                IDOnly IDOnlytransport = new IDOnly();
                IDOnlytransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                transportequipment.ID.Add(IDOnlytransport);

                //PLACA 2 
                transportequipment.AttachedTransportEquipment = new List<IDOnlyA>();
                IDOnlyA IDONLYA = new IDOnlyA();
                transportequipment.AttachedTransportEquipment.Add(IDONLYA);
                IDONLYA.ID = new List<IDOnly>();
                IDOnly OnlyID = new IDOnly();
                OnlyID._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_AttachedTransportEquipment_ID__"].ToString();
                IDONLYA.ID.Add(OnlyID);
                //IDONLYA.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //ApplicableTransportMeans ApplicableTransportMeansid = new ApplicableTransportMeans();
                //IDONLYA.ApplicableTransportMeans.Add(ApplicableTransportMeansid);
                //ApplicableTransportMeansid.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //RegistrationNationalityID RegistrationNationalityIDtransportPLACA2 = new RegistrationNationalityID();
                //RegistrationNationalityIDtransportPLACA2._ = "TARJETACER2";
                //ApplicableTransportMeansid.RegistrationNationalityID.Add(RegistrationNationalityIDtransportPLACA2);
                ////END PLACA 2 

                //if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                //{
                //    transportequipment.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //    ApplicableTransportMeans ApplicableTransportMeanstransport = new ApplicableTransportMeans();
                //    transportequipment.ApplicableTransportMeans.Add(ApplicableTransportMeanstransport);

                //    ApplicableTransportMeanstransport.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //    RegistrationNationalityID RegistrationNationalityIDapplicable = new RegistrationNationalityID();
                //    RegistrationNationalityIDapplicable._ = dt.Rows[0]["TransportHandlingUnit_TransportEquipment_ApplicableTransportMeans_RegistrationNationalityID__"].ToString();
                //    ApplicableTransportMeanstransport.RegistrationNationalityID.Add(RegistrationNationalityIDapplicable);
                //}
                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);

                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);


            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }
        //OTROS PRIVADA - CHECK
        public void ConvertirJsonAClases_OtrosPrivada(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);

                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();

                //NUEVO
                //ORDEN DE COMPRA

                Note noteordencompra = new Note();
                noteordencompra._ = dt.Rows[0]["Note_OCNRO"].ToString();
                noteordencompra.languageID = dt.Rows[0]["languageID_OCNRO"].ToString(); ;

                //MARCA 
                Note noteMARCA = new Note();
                noteMARCA._ = dt.Rows[0]["Note_MARCA"].ToString();
                noteMARCA.languageID = dt.Rows[0]["languageID_MARCA"].ToString(); ;

                //MARCA 2
                Note noteMARCA2 = new Note();
                noteMARCA2._ = dt.Rows[0]["Note_MARCA2"].ToString();
                noteMARCA2.languageID = dt.Rows[0]["languageID_MARCA2"].ToString(); ;
                //END 


                despatch.Note.Add(note);
                despatch.Note.Add(noteordencompra);
                despatch.Note.Add(noteMARCA);
                despatch.Note.Add(noteMARCA2);

                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);

                //9. AdditionalDocumentReference ***************
                despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                AdditionalDocumentReference additional = new AdditionalDocumentReference();

                //9.1 ID
                despatch.AdditionalDocumentReference.Add(additional);
                additional.ID = new List<IDOnly>();
                IDOnly idonly = new IDOnly();
                idonly._ = dt.Rows[0]["adref_id"].ToString();
                additional.ID.Add(idonly);
                //9.2 DocumentTypeCode
                additional.DocumentTypeCode = new List<DocumentTypeCode>();
                DocumentTypeCode documenttypecode = new DocumentTypeCode();
                documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                additional.DocumentTypeCode.Add(documenttypecode);
                //9.3 DocumentType 
                additional.DocumentType = new List<DocumentType>();
                DocumentType documentype = new DocumentType();
                documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                additional.DocumentType.Add(documentype);
                //9.4 IssueParty 
                additional.IssuerParty = new List<IssuerParty>();
                IssuerParty issuerparty = new IssuerParty();
                additional.IssuerParty.Add(issuerparty);
                //9.4.1
                issuerparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentification = new PartyIdentification();
                issuerparty.PartyIdentification.Add(partyidentification);
                //9.4.1.1
                partyidentification.ID = new List<ID>();
                //9.4.1.1.1
                ID idadditional = new ID();
                idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysub = new CitySubdivisionName();
                citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdress.CitySubdivisionName.Add(citysub);

                //CityName
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //DISTRICT
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(citynamedelivery);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentity = new CountrySubentity();
                countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);

                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                //13.5 TotalTransportHandlingUnitQuantity
                shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                TotalTransportHandlingUnitQuantity totaltransport = new TotalTransportHandlingUnitQuantity();
                totaltransport._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString();
                shipment.TotalTransportHandlingUnitQuantity.Add(totaltransport);
                //SpecialInstructions
                // indicador m1
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.SpecialInstructions = new List<SpecialInstructions>();
                    SpecialInstructions specialinstructions = new SpecialInstructions();
                    specialinstructions._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(specialinstructions);
                }


                //13.5 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);


                //PUBLICO
                //CARRIERPARTY - LISTA
                //shipmentStage.CarrierParty = new List<CarrierParty>();
                //CarrierParty CarrierParty = new CarrierParty();


                ////CARRIERPARTY - PARTYIDENTIFICATION


                //CarrierParty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification PartyIdentification = new PartyIdentification();
                //CarrierParty.PartyIdentification.Add(PartyIdentification);
                //PartyIdentification.ID = new List<ID>();

                //ID idCarrierParty = new ID();

                //idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                //idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                //PartyIdentification.ID.Add(idCarrierParty);



                ////CARRIERPARTY - PARTYLEGALENTITY
                //CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                //CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                ////PARTYLEGALENTITY - REGISTRATIONAME
                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                ////{


                //partyLegalEntity.RegistrationName = new List<RegistrationName>();
                //RegistrationName CarrierRegistrionName = new RegistrationName();

                //CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                //partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                ////}
                //partyLegalEntity.CompanyID = new List<CompanyID>();

                ////PARTYLEGALENTITY - COMPANYID
                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                ////{
                //CompanyID CarrierPartyCompanyID = new CompanyID();

                //CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                //partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                ////}
                ////CARRIERPARTY - AGENTPARTY

                //CarrierParty.AgentParty = new List<AgentParty>();

                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"] != DBNull.Value)
                ////{
                //AgentParty CarrierPartyAgentParty = new AgentParty();
                //CarrierParty.AgentParty.Add(CarrierPartyAgentParty);

                //CarrierPartyAgentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity CarrierPartyLegalEntity = new PartyLegalEntity();
                //CarrierPartyAgentParty.PartyLegalEntity.Add(CarrierPartyLegalEntity);


                //CarrierPartyLegalEntity.CompanyID = new List<CompanyID>();
                //CompanyID CarrierCompanyID = new CompanyID();
                //CarrierCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierCompanyID.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierPartyLegalEntity.CompanyID.Add(CarrierCompanyID);
                ////}

                //shipmentStage.CarrierParty.Add(CarrierParty);




                //END CARRIERPARTY


                //DESPATCHPARTY




                //END DESPATCHPARTY



                // END PUBLICO
                //ID
                ////DriverPerson
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                    TransportHandlingUnit shipmentTransportHandlingUnit = new TransportHandlingUnit();
                    shipment.TransportHandlingUnit.Add(shipmentTransportHandlingUnit);

                    shipmentTransportHandlingUnit.TransportEquipment = new List<TransportEquipment>();
                    TransportEquipment TransportEquipmentshipment = new TransportEquipment();

                    TransportEquipmentshipment.ID = new List<IDOnly>();
                    IDOnly IDTransport = new IDOnly();
                    IDTransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                    TransportEquipmentshipment.ID.Add(IDTransport);
                    shipmentTransportHandlingUnit.TransportEquipment.Add(TransportEquipmentshipment);

                }
                else
                {
                    shipmentStage.DriverPerson = new List<DriverPerson>();
                    DriverPerson driverperson = new DriverPerson();


                    //ID             
                    driverperson.ID = new List<ID>();
                    ID iddriver = new ID();
                    iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                    iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                    driverperson.ID.Add(iddriver);

                    driverperson.FirstName = new List<FirstName>();
                    FirstName firstname = new FirstName();
                    firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                    driverperson.FirstName.Add(firstname);


                    driverperson.FamilyName = new List<FamilyName>();
                    FamilyName familyname = new FamilyName();
                    familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                    driverperson.FamilyName.Add(familyname);

                    //JOBTITLE
                    //PRIMER JOBTITLE 
                    driverperson.JobTitle = new List<JobTitle>();
                    JobTitle jobtitle = new JobTitle();
                    jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                    driverperson.JobTitle.Add(jobtitle);

                    //IdentityDocumentReference

                    driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                    IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                    driverperson.IdentityDocumentReference.Add(identitydocument);

                    identitydocument.ID = new List<IDOnly>();
                    IDOnly ididentity = new IDOnly();
                    ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                    identitydocument.ID.Add(ididentity);


                    //AGREGA TODA LA LISTA COMPLETA DE DRIVERPERSON
                    shipmentStage.DriverPerson.Add(driverperson);

                }

                //if (propiedades == null)
                //{
                //    shipmentStage.DriverPerson = null;
                //}

                //13.6 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.6.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //CITYSUBDIVIONAME
                deliveryadrress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionname = new CitySubdivisionName();
                citysubdivionname._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CitySubdivisionName"].ToString();
                deliveryadrress.CitySubdivisionName.Add(citysubdivionname);

                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);

                //  13.6.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                //  13.6.2.1 DELIVERY DESPATCH 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                //CITYSUBDIVIONAME
                despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //DESPATCHPARTY 
                //despatchdelivery.DespatchParty = new List<DespatchParty>();
                //DespatchParty despatchparty = new DespatchParty();
                //despatchdelivery.DespatchParty.Add(despatchparty);



                ////if (dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                ////{
                //despatchparty.AgentParty = new List<AgentParty>();
                //AgentParty agentParty = new AgentParty();
                //despatchparty.AgentParty.Add(agentParty);

                //agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                //agentParty.PartyLegalEntity.Add(partylegalentityagent);

                //partylegalentityagent.CompanyID = new List<CompanyID>();
                //CompanyID companyid = new CompanyID();
                //companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                //companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //partylegalentityagent.CompanyID.Add(companyid);

                //13.7 TransportHandlingUnit
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit transporthand = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(transporthand);
                //TRANSPORTEQUIPMENT
                transporthand.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment transportequipment = new TransportEquipment();
                transporthand.TransportEquipment.Add(transportequipment);
                //TRANSPORT ID 
                transportequipment.ID = new List<IDOnly>();
                IDOnly idtransport = new IDOnly();
                idtransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                transportequipment.ID.Add(idtransport);

                //PLACA SECUNDARIA
                transportequipment.AttachedTransportEquipment = new List<IDOnlyA>();
                IDOnlyA IDONLYA = new IDOnlyA();
                transportequipment.AttachedTransportEquipment.Add(IDONLYA);
                IDONLYA.ID = new List<IDOnly>();
                IDOnly OnlyID = new IDOnly();
                OnlyID._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_AttachedTransportEquipment_ID__"].ToString();
                IDONLYA.ID.Add(OnlyID);
                //TARJETA CER2 NO VA
                //IDONLYA.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //ApplicableTransportMeans ApplicableTransportMeansid = new ApplicableTransportMeans();
                //IDONLYA.ApplicableTransportMeans.Add(ApplicableTransportMeansid);
                //ApplicableTransportMeansid.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //RegistrationNationalityID RegistrationNationalityIDtransportPLACA2 = new RegistrationNationalityID();
                //RegistrationNationalityIDtransportPLACA2._ = "TARJETACER2";
                //ApplicableTransportMeansid.RegistrationNationalityID.Add(RegistrationNationalityIDtransportPLACA2);
                //END PLACA SECUNDARIA


                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);

                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);


            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }

        //CHECK VentaSujetaAConfirmarPublica
        public void ConvertirJsonAClases_VentaSujetaAConfirmarPublica(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);

                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();

                //NUEVO
                //ORDEN DE COMPRA

                Note noteordencompra = new Note();
                noteordencompra._ = dt.Rows[0]["Note_OCNRO"].ToString();
                noteordencompra.languageID = dt.Rows[0]["languageID_OCNRO"].ToString(); ;

                //MARCA 
                Note noteMARCA = new Note();
                noteMARCA._ = dt.Rows[0]["Note_MARCA"].ToString();
                noteMARCA.languageID = dt.Rows[0]["languageID_MARCA"].ToString(); ;

                //MARCA 2
                Note noteMARCA2 = new Note();
                noteMARCA2._ = dt.Rows[0]["Note_MARCA2"].ToString();
                noteMARCA2.languageID = dt.Rows[0]["languageID_MARCA2"].ToString(); ;
                //END 


                despatch.Note.Add(note);
                despatch.Note.Add(noteordencompra);
                despatch.Note.Add(noteMARCA);
                despatch.Note.Add(noteMARCA2);

                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);

                //9. AdditionalDocumentReference ***************
                //despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                //AdditionalDocumentReference additional = new AdditionalDocumentReference();

                ////9.1 ID
                //despatch.AdditionalDocumentReference.Add(additional);
                //additional.ID = new List<IDOnly>();
                //IDOnly idonly = new IDOnly();
                //idonly._ = dt.Rows[0]["adref_id"].ToString();
                //additional.ID.Add(idonly);
                ////9.2 DocumentTypeCode
                //additional.DocumentTypeCode = new List<DocumentTypeCode>();
                //DocumentTypeCode documenttypecode = new DocumentTypeCode();
                //documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                //additional.DocumentTypeCode.Add(documenttypecode);
                ////9.3 DocumentType 
                //additional.DocumentType = new List<DocumentType>();
                //DocumentType documentype = new DocumentType();
                //documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                //additional.DocumentType.Add(documentype);
                ////9.4 IssueParty 
                //additional.IssuerParty = new List<IssuerParty>();
                //IssuerParty issuerparty = new IssuerParty();
                //additional.IssuerParty.Add(issuerparty);
                ////9.4.1
                //issuerparty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification partyidentification = new PartyIdentification();
                //issuerparty.PartyIdentification.Add(partyidentification);
                ////9.4.1.1
                //partyidentification.ID = new List<ID>();
                ////9.4.1.1.1
                //ID idadditional = new ID();
                //idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                //idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                //partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                //postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysub = new CitySubdivisionName();
                //citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                //postaladdress.CitySubdivisionName.Add(citysub);

                //CityName
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //DISTRICT
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                //postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                //citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                //postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(citynamedelivery);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentity = new CountrySubentity();
                countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);

                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                //13.5 TotalTransportHandlingUnitQuantity
                shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                TotalTransportHandlingUnitQuantity totaltransport = new TotalTransportHandlingUnitQuantity();
                totaltransport._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString();
                shipment.TotalTransportHandlingUnitQuantity.Add(totaltransport);
                //SpecialInstructions
                shipment.SpecialInstructions = new List<SpecialInstructions>();
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    SpecialInstructions shipmentSpecialInstrucions = new SpecialInstructions();
                    shipmentSpecialInstrucions._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(shipmentSpecialInstrucions);
                }
                //indicador muestra chofer y vehiculo
                if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                {
                    SpecialInstructions SUNAT_Envio_IndicadorVehiculoConductoresTransp = new SpecialInstructions();
                    SUNAT_Envio_IndicadorVehiculoConductoresTransp._ = dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString();
                    shipment.SpecialInstructions.Add(SUNAT_Envio_IndicadorVehiculoConductoresTransp);
                }

                //13.5 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);

                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                    TransportHandlingUnit shipmentTransportHandlingUnit = new TransportHandlingUnit();
                    shipment.TransportHandlingUnit.Add(shipmentTransportHandlingUnit);

                    shipmentTransportHandlingUnit.TransportEquipment = new List<TransportEquipment>();
                    TransportEquipment TransportEquipmentshipment = new TransportEquipment();

                    TransportEquipmentshipment.ID = new List<IDOnly>();
                    IDOnly IDTransport = new IDOnly();
                    IDTransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                    TransportEquipmentshipment.ID.Add(IDTransport);
                    shipmentTransportHandlingUnit.TransportEquipment.Add(TransportEquipmentshipment);

                }
                else
                {
                    //PUBLICO
                    //   CARRIERPARTY - LISTA
                    shipmentStage.CarrierParty = new List<CarrierParty>();
                    CarrierParty CarrierParty = new CarrierParty();


                    // CARRIERPARTY - PARTYIDENTIFICATION


                    CarrierParty.PartyIdentification = new List<PartyIdentification>();
                    PartyIdentification PartyIdentification = new PartyIdentification();
                    CarrierParty.PartyIdentification.Add(PartyIdentification);
                    PartyIdentification.ID = new List<ID>();

                    ID idCarrierParty = new ID();

                    idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                    idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                    PartyIdentification.ID.Add(idCarrierParty);



                    // CARRIERPARTY - PARTYLEGALENTITY
                    CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                    PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                    CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                    //PARTYLEGALENTITY - REGISTRATIONAME
                    //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                    //{


                    partyLegalEntity.RegistrationName = new List<RegistrationName>();
                    RegistrationName CarrierRegistrionName = new RegistrationName();

                    CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                    partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                    //}
                    partyLegalEntity.CompanyID = new List<CompanyID>();

                    //PARTYLEGALENTITY - COMPANYID
                    //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                    //{
                    CompanyID CarrierPartyCompanyID = new CompanyID();

                    CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                    partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                    //}
                    //CARRIERPARTY - AGENTPARTY

                    //CarrierParty.AgentParty = new List<AgentParty>();

                    ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"] != DBNull.Value)
                    ////{
                    //AgentParty CarrierPartyAgentParty = new AgentParty();
                    //CarrierParty.AgentParty.Add(CarrierPartyAgentParty);

                    //CarrierPartyAgentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                    //PartyLegalEntity CarrierPartyLegalEntity = new PartyLegalEntity();
                    //CarrierPartyAgentParty.PartyLegalEntity.Add(CarrierPartyLegalEntity);


                    //CarrierPartyLegalEntity.CompanyID = new List<CompanyID>();
                    //CompanyID CarrierCompanyID = new CompanyID();
                    //CarrierCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                    //CarrierCompanyID.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                    //CarrierPartyLegalEntity.CompanyID.Add(CarrierCompanyID);
                    //}

                    shipmentStage.CarrierParty.Add(CarrierParty);

                    if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                    {
                        //DRIVERPERSON
                        shipmentStage.DriverPerson = new List<DriverPerson>();
                        DriverPerson driverperson = new DriverPerson();



                        //if (Exists(shipmentStage.DriverPerson))
                        //{
                        //    MessageBox.Show("El objeto existe");
                        //}
                        //else 
                        //{
                        //    MessageBox.Show("El objeto NO existe");
                        //}


                        //ID             
                        ID iddriver = new ID();
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"] != DBNull.Value)
                        {

                            driverperson.ID = new List<ID>();
                            iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                            iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                            driverperson.ID.Add(iddriver);

                        }

                        //else { shipmentStage.DriverPerson = null; }

                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"] != DBNull.Value)
                        {
                            //if (driverperson.FirstName != null)
                            //{

                            //}
                            driverperson.FirstName = new List<FirstName>();
                            FirstName firstname = new FirstName();
                            firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                            //{

                            driverperson.FirstName.Add(firstname);
                        }
                        //}

                        //Familiname
                        //string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"] != DBNull.Value)
                        {
                            if (driverperson.FirstName != null)
                            {
                                driverperson.FamilyName = new List<FamilyName>();
                            }
                            driverperson.FamilyName = new List<FamilyName>();
                            FamilyName familyname = new FamilyName();
                            familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                            driverperson.FamilyName.Add(familyname);
                        }
                        //JOBTITLE
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"] != DBNull.Value)
                        {
                            driverperson.JobTitle = new List<JobTitle>();
                            JobTitle jobtitle = new JobTitle();
                            jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                            driverperson.JobTitle.Add(jobtitle);
                        }
                        //IdentityDocumentReference
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"] != DBNull.Value)
                        {
                            driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                            IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                            driverperson.IdentityDocumentReference.Add(identitydocument);

                            identitydocument.ID = new List<IDOnly>();
                            IDOnly ididentity = new IDOnly();
                            ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                            identitydocument.ID.Add(ididentity);

                        }

                        shipmentStage.DriverPerson.Add(driverperson);
                    }
                }

                //END CARRIERPARTY


                //DESPATCHPARTY




                //END DESPATCHPARTY



                // END PUBLICO
                //ID
                ////DriverPerson
                //shipmentStage.DriverPerson = new List<DriverPerson>();
                //DriverPerson driverperson = new DriverPerson();
                //shipmentStage.DriverPerson.Add(driverperson);

                //shipmentStage.DriverPerson = new List<DriverPerson>();
                //DriverPerson driverperson = new DriverPerson();



                ////if (Exists(shipmentStage.DriverPerson))
                ////{
                ////    MessageBox.Show("El objeto existe");
                ////}
                ////else 
                ////{
                ////    MessageBox.Show("El objeto NO existe");
                ////}


                ////ID             
                //ID iddriver = new ID();
                //if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"] != DBNull.Value)
                //{

                //    driverperson.ID = new List<ID>();
                //    iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                //    iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                //    driverperson.ID.Add(iddriver);

                //}

                ////else { shipmentStage.DriverPerson = null; }

                //if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"] != DBNull.Value)
                //{
                //    //if (driverperson.FirstName != null)
                //    //{

                //    //}
                //    driverperson.FirstName = new List<FirstName>();
                //    FirstName firstname = new FirstName();
                //    firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                //    //{

                //    driverperson.FirstName.Add(firstname);
                //}
                ////}

                ////Familiname
                ////string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                //if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"] != DBNull.Value)
                //{
                //    if (driverperson.FirstName != null)
                //    {
                //        driverperson.FamilyName = new List<FamilyName>();
                //    }
                //    driverperson.FamilyName = new List<FamilyName>();
                //    FamilyName familyname = new FamilyName();
                //    familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                //    driverperson.FamilyName.Add(familyname);
                //}
                ////JOBTITLE
                //if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"] != DBNull.Value)
                //{
                //    driverperson.JobTitle = new List<JobTitle>();
                //    JobTitle jobtitle = new JobTitle();
                //    jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                //    driverperson.JobTitle.Add(jobtitle);
                //}
                ////IdentityDocumentReference
                //if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"] != DBNull.Value)
                //{
                //    driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                //    IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                //    driverperson.IdentityDocumentReference.Add(identitydocument);

                //    identitydocument.ID = new List<IDOnly>();
                //    IDOnly ididentity = new IDOnly();
                //    ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                //    identitydocument.ID.Add(ididentity);

                //}

                //shipmentStage.DriverPerson.Add(driverperson);


                //if (propiedades == null)
                //{
                //    shipmentStage.DriverPerson = null;
                //}

                //13.6 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.6.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //CITYSUBDIVIONAME
                deliveryadrress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionname = new CitySubdivisionName();
                citysubdivionname._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CitySubdivisionName"].ToString();
                deliveryadrress.CitySubdivisionName.Add(citysubdivionname);

                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);

                //  13.6.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                //  13.6.2.1 DELIVERY DESPATCH 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                //CITYSUBDIVIONAME
                despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //DESPATCHPARTY 
                despatchdelivery.DespatchParty = new List<DespatchParty>();
                DespatchParty despatchparty = new DespatchParty();



                //if (dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                //{
                despatchparty.AgentParty = new List<AgentParty>();
                AgentParty agentParty = new AgentParty();
                despatchparty.AgentParty.Add(agentParty);

                agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                agentParty.PartyLegalEntity.Add(partylegalentityagent);

                partylegalentityagent.CompanyID = new List<CompanyID>();
                CompanyID companyid = new CompanyID();
                companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();

                partylegalentityagent.CompanyID.Add(companyid);
                //}
                despatchdelivery.DespatchParty.Add(despatchparty);

                //13.7 TransportHandlingUnit
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit transporthand = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(transporthand);

                transporthand.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment transportequipment = new TransportEquipment();
                transporthand.TransportEquipment.Add(transportequipment);

                transportequipment.ID = new List<IDOnly>();
                IDOnly idtransport = new IDOnly();
                idtransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                transportequipment.ID.Add(idtransport);

                //PLACA 2
                transportequipment.AttachedTransportEquipment = new List<IDOnlyA>();
                IDOnlyA IDONLYA = new IDOnlyA();
                transportequipment.AttachedTransportEquipment.Add(IDONLYA);
                IDONLYA.ID = new List<IDOnly>();
                IDOnly OnlyID = new IDOnly();
                OnlyID._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_AttachedTransportEquipment_ID__"].ToString();
                IDONLYA.ID.Add(OnlyID);
                //IDONLYA.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //ApplicableTransportMeans ApplicableTransportMeansid = new ApplicableTransportMeans();
                //IDONLYA.ApplicableTransportMeans.Add(ApplicableTransportMeansid);
                //ApplicableTransportMeansid.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //RegistrationNationalityID RegistrationNationalityIDtransportPLACA2 = new RegistrationNationalityID();
                //RegistrationNationalityIDtransportPLACA2._ = "TARJETACER2";
                //ApplicableTransportMeansid.RegistrationNationalityID.Add(RegistrationNationalityIDtransportPLACA2);
                ////END PLACA 2

                //if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                //{
                //    transportequipment.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //    ApplicableTransportMeans ApplicableTransportMeanstransport = new ApplicableTransportMeans();
                //    transportequipment.ApplicableTransportMeans.Add(ApplicableTransportMeanstransport);

                //    ApplicableTransportMeanstransport.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //    RegistrationNationalityID RegistrationNationalityIDapplicable = new RegistrationNationalityID();
                //    RegistrationNationalityIDapplicable._ = dt.Rows[0]["TransportHandlingUnit_TransportEquipment_ApplicableTransportMeans_RegistrationNationalityID__"].ToString();
                //    ApplicableTransportMeanstransport.RegistrationNationalityID.Add(RegistrationNationalityIDapplicable);
                //}
                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);

                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);


                //Type tipoClaseAnidada = roo2.DespatchAdvice;
                //string jsonarreglado = RecorrerPropiedades(despatch);
                //Assembly ensamblado = Assembly.GetExecutingAssembly();
                //RecorrerPropiedades(roo2);

            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }

        //CHECK VentaSujetaAConfirmarPrivada
        public void ConvertirJsonAClases_VentaSujetaAConfirmarPrivada(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);

                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();

                //NUEVO
                //ORDEN DE COMPRA

                Note noteordencompra = new Note();
                noteordencompra._ = dt.Rows[0]["Note_OCNRO"].ToString();
                noteordencompra.languageID = dt.Rows[0]["languageID_OCNRO"].ToString(); ;

                //MARCA 
                Note noteMARCA = new Note();
                noteMARCA._ = dt.Rows[0]["Note_MARCA"].ToString();
                noteMARCA.languageID = dt.Rows[0]["languageID_MARCA"].ToString(); ;

                //MARCA 2
                Note noteMARCA2 = new Note();
                noteMARCA2._ = dt.Rows[0]["Note_MARCA2"].ToString();
                noteMARCA2.languageID = dt.Rows[0]["languageID_MARCA2"].ToString(); ;
                //END 


                despatch.Note.Add(note);
                despatch.Note.Add(noteordencompra);
                despatch.Note.Add(noteMARCA);
                despatch.Note.Add(noteMARCA2);

                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);

                //9. AdditionalDocumentReference ***************
                //despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                //AdditionalDocumentReference additional = new AdditionalDocumentReference();

                ////9.1 ID
                //despatch.AdditionalDocumentReference.Add(additional);
                //additional.ID = new List<IDOnly>();
                //IDOnly idonly = new IDOnly();
                //idonly._ = dt.Rows[0]["adref_id"].ToString();
                //additional.ID.Add(idonly);
                ////9.2 DocumentTypeCode
                //additional.DocumentTypeCode = new List<DocumentTypeCode>();
                //DocumentTypeCode documenttypecode = new DocumentTypeCode();
                //documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                //additional.DocumentTypeCode.Add(documenttypecode);
                ////9.3 DocumentType 
                //additional.DocumentType = new List<DocumentType>();
                //DocumentType documentype = new DocumentType();
                //documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                //additional.DocumentType.Add(documentype);
                ////9.4 IssueParty 
                //additional.IssuerParty = new List<IssuerParty>();
                //IssuerParty issuerparty = new IssuerParty();
                //additional.IssuerParty.Add(issuerparty);
                ////9.4.1
                //issuerparty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification partyidentification = new PartyIdentification();
                //issuerparty.PartyIdentification.Add(partyidentification);
                ////9.4.1.1
                //partyidentification.ID = new List<ID>();
                ////9.4.1.1.1
                //ID idadditional = new ID();
                //idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                //idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                //partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                //postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysub = new CitySubdivisionName();
                //citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                //postaladdress.CitySubdivisionName.Add(citysub);

                //CityName
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //DISTRICT
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                //postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                //citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                //postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(citynamedelivery);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentity = new CountrySubentity();
                countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);

                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                //13.5 TotalTransportHandlingUnitQuantity
                shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                TotalTransportHandlingUnitQuantity totaltransport = new TotalTransportHandlingUnitQuantity();
                totaltransport._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString();
                shipment.TotalTransportHandlingUnitQuantity.Add(totaltransport);
                //SpecialInstructions
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {

                    shipment.SpecialInstructions = new List<SpecialInstructions>();
                    SpecialInstructions shipmentSpecialInstrucions = new SpecialInstructions();
                    shipmentSpecialInstrucions._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(shipmentSpecialInstrucions);
                }

                //13.5 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);


                //PUBLICO
                //   CARRIERPARTY - LISTA
                //shipmentStage.CarrierParty = new List<CarrierParty>();
                //CarrierParty CarrierParty = new CarrierParty();


                //// CARRIERPARTY - PARTYIDENTIFICATION


                //CarrierParty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification PartyIdentification = new PartyIdentification();
                //CarrierParty.PartyIdentification.Add(PartyIdentification);
                //PartyIdentification.ID = new List<ID>();

                //ID idCarrierParty = new ID();

                //idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                //idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                //PartyIdentification.ID.Add(idCarrierParty);



                // CARRIERPARTY - PARTYLEGALENTITY
                //CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                //CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                ////PARTYLEGALENTITY - REGISTRATIONAME
                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                ////{


                //partyLegalEntity.RegistrationName = new List<RegistrationName>();
                //RegistrationName CarrierRegistrionName = new RegistrationName();

                //CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                //partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                ////}
                //partyLegalEntity.CompanyID = new List<CompanyID>();

                ////PARTYLEGALENTITY - COMPANYID
                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                ////{
                //CompanyID CarrierPartyCompanyID = new CompanyID();

                //CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                //partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                ////}
                ////CARRIERPARTY - AGENTPARTY

                //CarrierParty.AgentParty = new List<AgentParty>();

                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"] != DBNull.Value)
                ////{
                //AgentParty CarrierPartyAgentParty = new AgentParty();
                //CarrierParty.AgentParty.Add(CarrierPartyAgentParty);

                //CarrierPartyAgentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity CarrierPartyLegalEntity = new PartyLegalEntity();
                //CarrierPartyAgentParty.PartyLegalEntity.Add(CarrierPartyLegalEntity);


                //CarrierPartyLegalEntity.CompanyID = new List<CompanyID>();
                //CompanyID CarrierCompanyID = new CompanyID();
                //CarrierCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierCompanyID.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierPartyLegalEntity.CompanyID.Add(CarrierCompanyID);
                ////}

                //shipmentStage.CarrierParty.Add(CarrierParty);



                //END CARRIERPARTY


                //DESPATCHPARTY




                //END DESPATCHPARTY



                // END PUBLICO
                //ID
                ////DriverPerson
                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                    TransportHandlingUnit shipmentTransportHandlingUnit = new TransportHandlingUnit();
                    shipment.TransportHandlingUnit.Add(shipmentTransportHandlingUnit);

                    shipmentTransportHandlingUnit.TransportEquipment = new List<TransportEquipment>();
                    TransportEquipment TransportEquipmentshipment = new TransportEquipment();

                    TransportEquipmentshipment.ID = new List<IDOnly>();
                    IDOnly IDTransport = new IDOnly();
                    IDTransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                    TransportEquipmentshipment.ID.Add(IDTransport);
                    shipmentTransportHandlingUnit.TransportEquipment.Add(TransportEquipmentshipment);

                }
                else
                {
                    shipmentStage.DriverPerson = new List<DriverPerson>();
                    DriverPerson driverperson = new DriverPerson();



                    ////ID             
                    ID iddriver = new ID();


                    driverperson.ID = new List<ID>();
                    iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                    iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                    driverperson.ID.Add(iddriver);






                    //if (driverperson.FirstName != null)
                    //{

                    //}
                    driverperson.FirstName = new List<FirstName>();
                    FirstName firstname = new FirstName();
                    firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                    //{

                    driverperson.FirstName.Add(firstname);


                    //Familiname
                    //string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();

                    if (driverperson.FirstName != null)
                    {
                        driverperson.FamilyName = new List<FamilyName>();
                    }
                    driverperson.FamilyName = new List<FamilyName>();
                    FamilyName familyname = new FamilyName();
                    familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                    driverperson.FamilyName.Add(familyname);

                    //JOBTITLE

                    driverperson.JobTitle = new List<JobTitle>();
                    JobTitle jobtitle = new JobTitle();
                    jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                    driverperson.JobTitle.Add(jobtitle);

                    //IdentityDocumentReference
                    driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                    IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                    driverperson.IdentityDocumentReference.Add(identitydocument);

                    identitydocument.ID = new List<IDOnly>();
                    IDOnly ididentity = new IDOnly();
                    ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                    identitydocument.ID.Add(ididentity);



                    shipmentStage.DriverPerson.Add(driverperson);

                }
                //if (propiedades == null)
                //{
                //    shipmentStage.DriverPerson = null;
                //}

                //13.6 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.6.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //CITYSUBDIVIONAME
                //deliveryadrress.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysubdivionname = new CitySubdivisionName();
                //citysubdivionname._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CitySubdivisionName"].ToString();
                //deliveryadrress.CitySubdivisionName.Add(citysubdivionname);

                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);

                //  13.6.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                //  13.6.2.1 DELIVERY DESPATCH 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                //CITYSUBDIVIONAME
                //despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                //citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                //despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //DESPATCHPARTY 
                //despatchdelivery.DespatchParty = new List<DespatchParty>();
                //DespatchParty despatchparty = new DespatchParty();



                ////if (dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                ////{
                //despatchparty.AgentParty = new List<AgentParty>();
                //AgentParty agentParty = new AgentParty();
                //despatchparty.AgentParty.Add(agentParty);

                //agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                //agentParty.PartyLegalEntity.Add(partylegalentityagent);

                //partylegalentityagent.CompanyID = new List<CompanyID>();
                //CompanyID companyid = new CompanyID();
                //companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                //companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();

                //partylegalentityagent.CompanyID.Add(companyid);
                ////}
                //despatchdelivery.DespatchParty.Add(despatchparty);


                //13.7 TransportHandlingUnit
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit transporthand = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(transporthand);

                transporthand.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment transportequipment = new TransportEquipment();
                transporthand.TransportEquipment.Add(transportequipment);

                transportequipment.ID = new List<IDOnly>();
                IDOnly idtransport = new IDOnly();
                idtransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                transportequipment.ID.Add(idtransport);


                //PLACA SECUNDARIA
                transportequipment.AttachedTransportEquipment = new List<IDOnlyA>();
                IDOnlyA IDONLYA = new IDOnlyA();
                transportequipment.AttachedTransportEquipment.Add(IDONLYA);
                IDONLYA.ID = new List<IDOnly>();
                IDOnly OnlyID = new IDOnly();
                OnlyID._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_AttachedTransportEquipment_ID__"].ToString();
                IDONLYA.ID.Add(OnlyID);
                //TARJETA CER2 NO VA
                //IDONLYA.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //ApplicableTransportMeans ApplicableTransportMeansid = new ApplicableTransportMeans();
                //IDONLYA.ApplicableTransportMeans.Add(ApplicableTransportMeansid);
                //ApplicableTransportMeansid.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //RegistrationNationalityID RegistrationNationalityIDtransportPLACA2 = new RegistrationNationalityID();
                //RegistrationNationalityIDtransportPLACA2._ = "TARJETACER2";
                //ApplicableTransportMeansid.RegistrationNationalityID.Add(RegistrationNationalityIDtransportPLACA2);
                //END PLACA SECUNDARIA

                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);

                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);


                //Type tipoClaseAnidada = roo2.DespatchAdvice;
                //string jsonarreglado = RecorrerPropiedades(despatch);
                //Assembly ensamblado = Assembly.GetExecutingAssembly();
                //RecorrerPropiedades(roo2);

            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }






        //AUN NO TERMINADO ------------------------
        //COMPRAS
        //Compra Privada
        public void ConvertirJsonAClases_CompraPrivada(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);

                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();
                if (note._ != "")
                {
                    despatch.Note.Add(note);
                }
                else
                {
                    despatch.Note = null;
                }

                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);

                //9. AdditionalDocumentReference ***************
                despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                AdditionalDocumentReference additional = new AdditionalDocumentReference();

                //9.1 ID
                despatch.AdditionalDocumentReference.Add(additional);
                additional.ID = new List<IDOnly>();
                IDOnly idonly = new IDOnly();
                idonly._ = dt.Rows[0]["adref_id"].ToString();
                additional.ID.Add(idonly);
                //9.2 DocumentTypeCode
                additional.DocumentTypeCode = new List<DocumentTypeCode>();
                DocumentTypeCode documenttypecode = new DocumentTypeCode();
                documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                additional.DocumentTypeCode.Add(documenttypecode);
                //9.3 DocumentType 
                additional.DocumentType = new List<DocumentType>();
                DocumentType documentype = new DocumentType();
                documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                additional.DocumentType.Add(documentype);
                //9.4 IssueParty 
                additional.IssuerParty = new List<IssuerParty>();
                IssuerParty issuerparty = new IssuerParty();
                additional.IssuerParty.Add(issuerparty);
                //9.4.1
                issuerparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentification = new PartyIdentification();
                issuerparty.PartyIdentification.Add(partyidentification);
                //9.4.1.1
                partyidentification.ID = new List<ID>();
                //9.4.1.1.1
                ID idadditional = new ID();
                idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysub = new CitySubdivisionName();
                citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdress.CitySubdivisionName.Add(citysub);

                //CityName
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //DISTRICT
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(cityname);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentity = new CountrySubentity();
                countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);

                //NEW SellerSupplierParty
                despatch.SellerSupplierParty = new List<SellerSupplierParty>();
                SellerSupplierParty SellerSuplier = new SellerSupplierParty();
                despatch.SellerSupplierParty.Add(SellerSuplier);
                //PARTY
                SellerSuplier.Party = new List<Party>();
                Party partySeller = new Party();
                SellerSuplier.Party.Add(partySeller);
                //PARTY IDENTIFICATION
                partySeller.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partysellerPartyIdentification = new PartyIdentification();
                partySeller.PartyIdentification.Add(partysellerPartyIdentification);

                partysellerPartyIdentification.ID = new List<ID>();
                ID idpartysellerPartyIdenti = new ID();
                idpartysellerPartyIdenti._ = dt.Rows[0]["SellerSupplierParty_Party_PartyIdentification_ID__"].ToString();
                idpartysellerPartyIdenti.schemeID = dt.Rows[0]["SellerSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partysellerPartyIdentification.ID.Add(idpartysellerPartyIdenti);
                //END PARTY IDENTIFICATION

                //POSTALADDRESS
                partySeller.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly partySellerPostaladdress = new PostalAddress_IDOnly();
                partySeller.PostalAddress.Add(partySellerPostaladdress);
                //ID
                partySellerPostaladdress.ID = new List<IDOnly>();
                IDOnly idpartyseller = new IDOnly();
                idpartyseller._ = dt.Rows[0]["SellerSupplierParty_Party_PostalAddress_ID__"].ToString();
                partySellerPostaladdress.ID.Add(idpartyseller);

                //STREETNAME
                partySellerPostaladdress.StreetName = new List<StreetName>();
                StreetName partySellerStreetname = new StreetName();
                partySellerStreetname._ = dt.Rows[0]["SellerSupplierParty_Party_PostalAddress_StreetName__"].ToString();
                partySellerPostaladdress.StreetName.Add(partySellerStreetname);

                //CITYSUBDIVISIONAME
                partySellerPostaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName partySellerCitySubdivisionName = new CitySubdivisionName();
                partySellerCitySubdivisionName._ = dt.Rows[0]["SellerSupplierParty_Party_PostalAddress_CitySubdivisionName__"].ToString();

                //CITYNAME
                partySellerPostaladdress.CityName = new List<CityName>();
                CityName partySellerCityName = new CityName();
                partySellerCityName._ = dt.Rows[0]["SellerSupplierParty_Party_PostalAddress_CityName__"].ToString();
                partySellerPostaladdress.CityName.Add(partySellerCityName);

                //COUNTRYSUBENTITY
                partySellerPostaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity partySellerCountrySubentity = new CountrySubentity();
                partySellerCountrySubentity._ = dt.Rows[0]["SellerSupplierParty_Party_PostalAddress_CountrySubentity__"].ToString();
                partySellerPostaladdress.CountrySubentity.Add(partySellerCountrySubentity);

                //DISTRICT 
                partySellerPostaladdress.District = new List<District>();
                District partySellerDistrict = new District();
                partySellerDistrict._ = dt.Rows[0]["SellerSupplierParty_Party_PostalAddress_District__"].ToString();
                partySellerPostaladdress.District.Add(partySellerDistrict);

                //COUNTRY
                partySellerPostaladdress.Country = new List<Country>();
                Country partySellerCountry = new Country();
                partySellerPostaladdress.Country.Add(partySellerCountry);

                partySellerCountry.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode partySellerCountryIdentificationCode = new IdentificationCode();
                partySellerCountryIdentificationCode._ = dt.Rows[0]["SellerSupplierParty_Party_PostalAddress_Country_IdentificationCode__"].ToString();
                partySellerCountry.IdentificationCode.Add(partySellerCountryIdentificationCode);
                //END POSTALADDRESS

                //PARTYLEGALENTITY
                partySeller.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partySellerPartyLegalEntity = new PartyLegalEntity();
                partySeller.PartyLegalEntity.Add(partySellerPartyLegalEntity);

                partySellerPartyLegalEntity.RegistrationName = new List<RegistrationName>();
                RegistrationName partySellerPartyLegalEntityRegistrationName = new RegistrationName();
                partySellerPartyLegalEntityRegistrationName._ = dt.Rows[0]["SellerSupplierParty_Party_PartyLegalEntity_RegistrationName_"].ToString();
                //END PARTYLEGALENTITY



                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                //SpecialInstructions
                if (dt.Rows[0]["INDICADORTRASLADOVEHICATM1"].ToString() == "1")
                {

                    shipment.SpecialInstructions = new List<SpecialInstructions>();
                    SpecialInstructions shipmentSpecialInstrucions = new SpecialInstructions();
                    shipmentSpecialInstrucions._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(shipmentSpecialInstrucions);
                }

                //END
                //13.5 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);


                //PUBLICO
                ////CARRIERPARTY - LISTA
                //shipmentStage.CarrierParty = new List<CarrierParty>();
                //CarrierParty CarrierParty = new CarrierParty();


                ////CARRIERPARTY - PARTYIDENTIFICATION


                //CarrierParty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification PartyIdentification = new PartyIdentification();
                //CarrierParty.PartyIdentification.Add(PartyIdentification);
                //PartyIdentification.ID = new List<ID>();

                //ID idCarrierParty = new ID();

                //idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                //idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                //PartyIdentification.ID.Add(idCarrierParty);



                ////CARRIERPARTY - PARTYLEGALENTITY
                //CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                //CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                ////PARTYLEGALENTITY - REGISTRATIONAME
                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                ////{


                //partyLegalEntity.RegistrationName = new List<RegistrationName>();
                //RegistrationName CarrierRegistrionName = new RegistrationName();

                //CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                //partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                ////}
                //partyLegalEntity.CompanyID = new List<CompanyID>();

                ////PARTYLEGALENTITY - COMPANYID
                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                ////{
                //CompanyID CarrierPartyCompanyID = new CompanyID();

                //CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                //partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                ////}
                ////CARRIERPARTY - AGENTPARTY

                //CarrierParty.AgentParty = new List<AgentParty>();

                ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"] != DBNull.Value)
                ////{
                //AgentParty CarrierPartyAgentParty = new AgentParty();
                //CarrierParty.AgentParty.Add(CarrierPartyAgentParty);

                //CarrierPartyAgentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity CarrierPartyLegalEntity = new PartyLegalEntity();
                //CarrierPartyAgentParty.PartyLegalEntity.Add(CarrierPartyLegalEntity);


                //CarrierPartyLegalEntity.CompanyID = new List<CompanyID>();
                //CompanyID CarrierCompanyID = new CompanyID();
                //CarrierCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierCompanyID.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //CarrierPartyLegalEntity.CompanyID.Add(CarrierCompanyID);
                ////}

                //shipmentStage.CarrierParty.Add(CarrierParty);

                ////END CARRIERPARTY


                //DESPATCHPARTY




                //END DESPATCHPARTY



                // END PUBLICO


                ////DriverPerson
                //PRIMARIO
                shipmentStage.DriverPerson = new List<DriverPerson>();
                DriverPerson driverperson = new DriverPerson();
                //ID             
                ID iddriver = new ID();
                driverperson.ID = new List<ID>();
                iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                driverperson.ID.Add(iddriver);
                //FIRSTNAME
                driverperson.FirstName = new List<FirstName>();
                FirstName firstname = new FirstName();
                firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                driverperson.FirstName.Add(firstname);

                //FAMILYNAME
                driverperson.FamilyName = new List<FamilyName>();
                FamilyName familyname = new FamilyName();
                familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                driverperson.FamilyName.Add(familyname);

                //JOBTITLE
                driverperson.JobTitle = new List<JobTitle>();
                JobTitle jobtitle = new JobTitle();
                jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                driverperson.JobTitle.Add(jobtitle);

                //IdentityDocumentReference
                driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                driverperson.IdentityDocumentReference.Add(identitydocument);

                identitydocument.ID = new List<IDOnly>();
                IDOnly ididentity = new IDOnly();
                ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                identitydocument.ID.Add(ididentity);
                //AGREGAR PRIMARIO 
                shipmentStage.DriverPerson.Add(driverperson);

                ////DriverPerson
                //SECUNDARIO
                //shipmentStage.DriverPerson = new List<DriverPerson>();
                //DriverPerson driverpersonsecundario = new DriverPerson();
                ////ID             
                //ID iddriversecundario = new ID();
                //driverpersonsecundario.ID = new List<ID>();
                //iddriversecundario._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                //iddriversecundario.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                //driverpersonsecundario.ID.Add(iddriversecundario);
                ////FIRSTNAME
                //driverpersonsecundario.FirstName = new List<FirstName>();
                //FirstName firstnamesecundario = new FirstName();
                //firstnamesecundario._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                //driverpersonsecundario.FirstName.Add(firstnamesecundario);

                ////FAMILYNAME
                //driverpersonsecundario.FamilyName = new List<FamilyName>();
                //FamilyName familynamesecundario = new FamilyName();
                //familynamesecundario._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                //driverpersonsecundario.FamilyName.Add(familynamesecundario);

                ////JOBTITLE
                //driverpersonsecundario.JobTitle = new List<JobTitle>();
                //JobTitle jobtitlesecundario = new JobTitle();
                //jobtitlesecundario._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                //driverpersonsecundario.JobTitle.Add(jobtitlesecundario);

                ////IdentityDocumentReference
                //driverpersonsecundario.IdentityDocumentReference = new List<IdentityDocumentReference>();
                //IdentityDocumentReference identitydocumentsecundario = new IdentityDocumentReference();
                //driverpersonsecundario.IdentityDocumentReference.Add(identitydocumentsecundario);

                //identitydocumentsecundario.ID = new List<IDOnly>();
                //IDOnly ididentitysecundario = new IDOnly();
                //ididentitysecundario._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                //identitydocumentsecundario.ID.Add(ididentitysecundario);
                ////AGREGAR SECUNDARIO 
                //shipmentStage.DriverPerson.Add(driverpersonsecundario);
                //END SECUNDARIO


                //13.6 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.6.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //CITYSUBDIVIONAME
                deliveryadrress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionname = new CitySubdivisionName();
                citysubdivionname._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CitySubdivisionName"].ToString();
                deliveryadrress.CitySubdivisionName.Add(citysubdivionname);

                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);

                //  13.6.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                //  13.6.2.1 DELIVERY DESPATCH 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                //CITYSUBDIVIONAME
                despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //DESPATCHPARTY 
                //despatchdelivery.DespatchParty = new List<DespatchParty>();
                //DespatchParty despatchparty = new DespatchParty();
                //despatchdelivery.DespatchParty.Add(despatchparty);



                ////if (dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                ////{
                //despatchparty.AgentParty = new List<AgentParty>();
                //AgentParty agentParty = new AgentParty();
                //despatchparty.AgentParty.Add(agentParty);

                //agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                //PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                //agentParty.PartyLegalEntity.Add(partylegalentityagent);

                //partylegalentityagent.CompanyID = new List<CompanyID>();
                //CompanyID companyid = new CompanyID();
                //companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                //companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                //partylegalentityagent.CompanyID.Add(companyid);
                ////}

                //PRIMARIO
                //13.7 TransportHandlingUnit
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit transporthand = new TransportHandlingUnit();
                //TRANSPORTEQUIPMENT
                transporthand.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment transportequipment = new TransportEquipment();
                transporthand.TransportEquipment.Add(transportequipment);

                //TRANSPORT ID 
                transportequipment.ID = new List<IDOnly>();
                IDOnly idtransport = new IDOnly();
                idtransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                transportequipment.ID.Add(idtransport);

                //PRIMERA INSTANCIA
                shipment.TransportHandlingUnit.Add(transporthand);
                //END PRIMARIO

                ////SECUNDARIO
                //13.7 TransportHandlingUnit
                //shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                //TransportHandlingUnit transportsecundario = new TransportHandlingUnit();

                ////TRANSPORTEQUIPMENT
                //transportsecundario.TransportEquipment = new List<TransportEquipment>();
                //TransportEquipment transportequipmentsecundario = new TransportEquipment();
                //transportsecundario.TransportEquipment.Add(transportequipmentsecundario);

                //transportequipmentsecundario.AttachedTransportEquipment = new List<IDOnly>();
                //IDOnly IDAttachedTransportEquipment = new IDOnly();
                ////SECUNDARIO
                //IDAttachedTransportEquipment._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_AttachedTransportEquipment_ID__"].ToString();
                //transportequipmentsecundario.AttachedTransportEquipment.Add(IDAttachedTransportEquipment);
                ////SEGUNDA INSTANCIA
                //shipment.TransportHandlingUnit.Add(transportsecundario);
                // END SECUNDARIO

                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);

                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);


                //Type tipoClaseAnidada = roo2.DespatchAdvice;
                //string jsonarreglado = RecorrerPropiedades(despatch);
                //RecorrerPropiedades(roo2);

            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }
        //Compra Publica
        public void ConvertirJsonAClases_CompraPublica(DataTable dt)
        {

            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);

                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();

                //NUEVO
                //ORDEN DE COMPRA

                Note noteordencompra = new Note();
                noteordencompra._ = dt.Rows[0]["Note_OCNRO"].ToString();
                noteordencompra.languageID = dt.Rows[0]["languageID_OCNRO"].ToString(); ;

                //MARCA 
                Note noteMARCA = new Note();
                noteMARCA._ = dt.Rows[0]["Note_MARCA"].ToString();
                noteMARCA.languageID = dt.Rows[0]["languageID_MARCA"].ToString(); ;

                //MARCA 2
                Note noteMARCA2 = new Note();
                noteMARCA2._ = dt.Rows[0]["Note_MARCA2"].ToString();
                noteMARCA2.languageID = dt.Rows[0]["languageID_MARCA2"].ToString(); ;
                //END 


                despatch.Note.Add(note);
                despatch.Note.Add(noteordencompra);
                despatch.Note.Add(noteMARCA);
                despatch.Note.Add(noteMARCA2);

                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);

                //9. AdditionalDocumentReference ***************
                //despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                //AdditionalDocumentReference additional = new AdditionalDocumentReference();

                ////9.1 ID
                //despatch.AdditionalDocumentReference.Add(additional);
                //additional.ID = new List<IDOnly>();
                //IDOnly idonly = new IDOnly();
                //idonly._ = dt.Rows[0]["adref_id"].ToString();
                //additional.ID.Add(idonly);
                ////9.2 DocumentTypeCode
                //additional.DocumentTypeCode = new List<DocumentTypeCode>();
                //DocumentTypeCode documenttypecode = new DocumentTypeCode();
                //documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                //additional.DocumentTypeCode.Add(documenttypecode);
                ////9.3 DocumentType 
                //additional.DocumentType = new List<DocumentType>();
                //DocumentType documentype = new DocumentType();
                //documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                //additional.DocumentType.Add(documentype);
                ////9.4 IssueParty 
                //additional.IssuerParty = new List<IssuerParty>();
                //IssuerParty issuerparty = new IssuerParty();
                //additional.IssuerParty.Add(issuerparty);
                ////9.4.1
                //issuerparty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification partyidentification = new PartyIdentification();
                //issuerparty.PartyIdentification.Add(partyidentification);
                ////9.4.1.1
                //partyidentification.ID = new List<ID>();
                ////9.4.1.1.1
                //ID idadditional = new ID();
                //idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                //idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                //partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                //postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysub = new CitySubdivisionName();
                //citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                //postaladdress.CitySubdivisionName.Add(citysub);

                //COUNTRYSUBENTITY -- DEpartamento
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //CityName -- Provincia
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //DISTRICT -- Distrito
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                //postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                //CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                //citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                //postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(citynamedelivery);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentity = new CountrySubentity();
                countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);


                //ULTIMA ETIQUETA AGREGADA SellerSupplierParty
                despatch.SellerSupplierParty = new List<SellerSupplierParty>();
                SellerSupplierParty SellerSupplierPartyclass = new SellerSupplierParty();
                despatch.SellerSupplierParty.Add(SellerSupplierPartyclass);

                SellerSupplierPartyclass.Party = new List<Party>();
                Party partyclass = new Party();
                SellerSupplierPartyclass.Party.Add(partyclass);
                //PARTYIDENTIFICATION
                partyclass.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification PartyIdentificationclass = new PartyIdentification();
                partyclass.PartyIdentification.Add(PartyIdentificationclass);

                PartyIdentificationclass.ID = new List<ID>();
                ID idsubclass = new ID();
                idsubclass._ = dt.Rows[0]["SellerSupplierParty_Party_PartyIdentification_ID__"].ToString();
                idsubclass.schemeID = dt.Rows[0]["SellerSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                PartyIdentificationclass.ID.Add(idsubclass);
                //END PARTYIDENTIFICATION

                //POSTALADDRESS
                partyclass.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly PostalAddress_IDOnlyclass = new PostalAddress_IDOnly();
                partyclass.PostalAddress.Add(PostalAddress_IDOnlyclass);

                //ID
                PostalAddress_IDOnlyclass.ID = new List<IDOnly>();
                IDOnly idOnlyclass = new IDOnly();
                idOnlyclass._ = dt.Rows[0]["SellerSupplierParty_Party_PostalAddress_ID__"].ToString();
                PostalAddress_IDOnlyclass.ID.Add(idOnlyclass);
                //END ID 
                //STREETNANE
                PostalAddress_IDOnlyclass.StreetName = new List<StreetName>();
                StreetName StreetNameclass = new StreetName();
                StreetNameclass._ = dt.Rows[0]["SellerSupplierParty_Party_PostalAddress_StreetName__"].ToString();
                PostalAddress_IDOnlyclass.StreetName.Add(StreetNameclass);
                //END STREETNAME 
                
                //CITYSUBDIVISIONNAME
                PostalAddress_IDOnlyclass.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName CitySubdivisionNameclass = new CitySubdivisionName();
                CitySubdivisionNameclass._ = dt.Rows[0]["SellerSupplierParty_Party_PostalAddress_CitySubdivisionName__"].ToString();
                PostalAddress_IDOnlyclass.CitySubdivisionName.Add(CitySubdivisionNameclass);
                //END CITYSUBDIVISIONNAME

                //CITYNAME
                PostalAddress_IDOnlyclass.CityName = new List<CityName>();
                CityName CityNameclass = new CityName();
                CityNameclass._ = dt.Rows[0]["SellerSupplierParty_Party_PostalAddress_CityName__"].ToString();
                PostalAddress_IDOnlyclass.CityName.Add(CityNameclass); 
                //END CITYNAME 

                //CountrySubentity
                PostalAddress_IDOnlyclass.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity CountrySubentityclass = new CountrySubentity();
                CountrySubentityclass._ = dt.Rows[0]["SellerSupplierParty_Party_PostalAddress_CountrySubentity__"].ToString();
                PostalAddress_IDOnlyclass.CountrySubentity.Add(CountrySubentityclass);
                //END CountrySubentity

                //District
                PostalAddress_IDOnlyclass.District = new List<District>();
                District Districtclass = new District();
                Districtclass._ = dt.Rows[0]["SellerSupplierParty_Party_PostalAddress_District__"].ToString();
                PostalAddress_IDOnlyclass.District.Add(Districtclass);
                //END DISTRICT

                //COUNTRY
                PostalAddress_IDOnlyclass.Country = new List<Country>();
                Country countryclass = new Country();
                countryclass.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode IdentificationCodeclass = new IdentificationCode();
                IdentificationCodeclass._ = dt.Rows[0]["SellerSupplierParty_Party_PostalAddress_Country_IdentificationCode__"].ToString();
                countryclass.IdentificationCode.Add(IdentificationCodeclass);
                PostalAddress_IDOnlyclass.Country.Add(countryclass);
                //END COUNTRY

                //END POSTALADDRESS


                //PARTYLEGALENTITY
                partyclass.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity PartyLegalEntityclass = new PartyLegalEntity();
                partyclass.PartyLegalEntity.Add(PartyLegalEntityclass);
                
                PartyLegalEntityclass.RegistrationName = new List<RegistrationName>();
                RegistrationName RegistrationNameclass = new RegistrationName();
                RegistrationNameclass._ = dt.Rows[0]["SellerSupplierParty_Party_PartyLegalEntity_RegistrationName_"].ToString();
                PartyLegalEntityclass.RegistrationName.Add(RegistrationNameclass);

                //END PARTYLEGALENTITY




                //END SellerSupplierParty


                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);

                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                //13.5 TotalTransportHandlingUnitQuantity
                shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                TotalTransportHandlingUnitQuantity totaltransport = new TotalTransportHandlingUnitQuantity();
                totaltransport._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString();
                shipment.TotalTransportHandlingUnitQuantity.Add(totaltransport);

                //SpecialInstructions
                shipment.SpecialInstructions = new List<SpecialInstructions>();

                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {

                    SpecialInstructions specialinstructions = new SpecialInstructions();
                    specialinstructions._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(specialinstructions);
                }
                //indicador muestra chofer y vehiculo
                if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                {
                    SpecialInstructions SUNAT_Envio_IndicadorVehiculoConductoresTransp = new SpecialInstructions();
                    SUNAT_Envio_IndicadorVehiculoConductoresTransp._ = dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString();
                    shipment.SpecialInstructions.Add(SUNAT_Envio_IndicadorVehiculoConductoresTransp);
                }

                //13.5 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);

                if (dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString() != "")
                {
                    shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                    TransportHandlingUnit shipmentTransportHandlingUnit = new TransportHandlingUnit();
                    shipment.TransportHandlingUnit.Add(shipmentTransportHandlingUnit);

                    shipmentTransportHandlingUnit.TransportEquipment = new List<TransportEquipment>();
                    TransportEquipment TransportEquipmentshipment = new TransportEquipment();

                    TransportEquipmentshipment.ID = new List<IDOnly>();
                    IDOnly IDTransport = new IDOnly();
                    IDTransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                    TransportEquipmentshipment.ID.Add(IDTransport);
                    shipmentTransportHandlingUnit.TransportEquipment.Add(TransportEquipmentshipment);

                }
                else
                {
                    //PUBLICO
                    //   CARRIERPARTY - LISTA
                    shipmentStage.CarrierParty = new List<CarrierParty>();
                    CarrierParty CarrierParty = new CarrierParty();


                    // CARRIERPARTY - PARTYIDENTIFICATION


                    CarrierParty.PartyIdentification = new List<PartyIdentification>();
                    PartyIdentification PartyIdentification = new PartyIdentification();
                    CarrierParty.PartyIdentification.Add(PartyIdentification);
                    PartyIdentification.ID = new List<ID>();

                    ID idCarrierParty = new ID();

                    idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                    idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                    PartyIdentification.ID.Add(idCarrierParty);



                    // CARRIERPARTY - PARTYLEGALENTITY
                    CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                    PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                    CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                    //PARTYLEGALENTITY - REGISTRATIONAME
                    //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                    //{


                    partyLegalEntity.RegistrationName = new List<RegistrationName>();
                    RegistrationName CarrierRegistrionName = new RegistrationName();

                    CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                    partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                    //}
                    partyLegalEntity.CompanyID = new List<CompanyID>();

                    //PARTYLEGALENTITY - COMPANYID
                    //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                    //{
                    CompanyID CarrierPartyCompanyID = new CompanyID();

                    CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                    partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                    //}
                    //CARRIERPARTY - AGENTPARTY

                    //CarrierParty.AgentParty = new List<AgentParty>();

                    ////if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"] != DBNull.Value)
                    ////{
                    //AgentParty CarrierPartyAgentParty = new AgentParty();
                    //CarrierParty.AgentParty.Add(CarrierPartyAgentParty);

                    //CarrierPartyAgentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                    //PartyLegalEntity CarrierPartyLegalEntity = new PartyLegalEntity();
                    //CarrierPartyAgentParty.PartyLegalEntity.Add(CarrierPartyLegalEntity);


                    //CarrierPartyLegalEntity.CompanyID = new List<CompanyID>();
                    //CompanyID CarrierCompanyID = new CompanyID();
                    //CarrierCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                    //CarrierCompanyID.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                    //CarrierPartyLegalEntity.CompanyID.Add(CarrierCompanyID);
                    //}

                    shipmentStage.CarrierParty.Add(CarrierParty);

                    if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                    {
                        //DRIVERPERSON 
                        shipmentStage.DriverPerson = new List<DriverPerson>();
                        DriverPerson driverperson = new DriverPerson();
                        //ID             
                        ID iddriver = new ID();
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"] != DBNull.Value)
                        {

                            driverperson.ID = new List<ID>();
                            iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                            iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                            driverperson.ID.Add(iddriver);

                        }

                        //else { shipmentStage.DriverPerson = null; }

                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"] != DBNull.Value)
                        {
                            //if (driverperson.FirstName != null)
                            //{

                            //}
                            driverperson.FirstName = new List<FirstName>();
                            FirstName firstname = new FirstName();
                            firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                            //{

                            driverperson.FirstName.Add(firstname);
                        }
                        //}

                        //Familiname
                        //string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"] != DBNull.Value)
                        {
                            if (driverperson.FirstName != null)
                            {
                                driverperson.FamilyName = new List<FamilyName>();
                            }
                            driverperson.FamilyName = new List<FamilyName>();
                            FamilyName familyname = new FamilyName();
                            familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                            driverperson.FamilyName.Add(familyname);
                        }
                        //JOBTITLE
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"] != DBNull.Value)
                        {
                            driverperson.JobTitle = new List<JobTitle>();
                            JobTitle jobtitle = new JobTitle();
                            jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                            driverperson.JobTitle.Add(jobtitle);
                        }
                        //IdentityDocumentReference
                        if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"] != DBNull.Value)
                        {
                            driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                            IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                            driverperson.IdentityDocumentReference.Add(identitydocument);

                            identitydocument.ID = new List<IDOnly>();
                            IDOnly ididentity = new IDOnly();
                            ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                            identitydocument.ID.Add(ididentity);

                        }

                        shipmentStage.DriverPerson.Add(driverperson);
                    }
                }
                //Obtenemos propiedades

                //FOREACH SI VERIFICA SI HAY DATOS EN EL driverPerson
                //foreach (PropertyInfo propiedad in propiedadesCarrierParty)
                //{
                //    object valor = propiedad.GetValue(idCarrierParty, null);
                //    //if (propiedad.PropertyType.IsClass && propiedad.PropertyType != typeof(string))
                //    //{
                //    //    RecorrerPropiedades(propiedad.PropertyType, nombre + ".");
                //    //}

                //    if (valor != null)
                //    {
                //        //NO SE HACE NADA
                //    }
                //    else
                //    {
                //        //LA CLASE SE CONVIERTE EN NULL Y EL NETWONJSON ELIMINA LA CLASE
                //        shipmentStage.CarrierParty = null;
                //    }

                //}

                //END CARRIERPARTY


                //DESPATCHPARTY




                //END DESPATCHPARTY



                // END PUBLICO
                //ID
                ////DriverPerson
                //shipmentStage.DriverPerson = new List<DriverPerson>();
                //DriverPerson driverperson = new DriverPerson();
                //shipmentStage.DriverPerson.Add(driverperson);

                //shipmentStage.DriverPerson = new List<DriverPerson>();
                //DriverPerson driverperson = new DriverPerson();



                ////if (Exists(shipmentStage.DriverPerson))
                ////{
                ////    MessageBox.Show("El objeto existe");
                ////}
                ////else 
                ////{
                ////    MessageBox.Show("El objeto NO existe");
                ////}


                ////ID             
                //ID iddriver = new ID();
                //if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"] != DBNull.Value)
                //{

                //    driverperson.ID = new List<ID>();
                //    iddriver._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_"].ToString();
                //    iddriver.schemeID = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_ID_schemeID"].ToString();
                //    driverperson.ID.Add(iddriver);

                //}

                ////else { shipmentStage.DriverPerson = null; }

                //if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"] != DBNull.Value)
                //{
                //    //if (driverperson.FirstName != null)
                //    //{

                //    //}
                //    driverperson.FirstName = new List<FirstName>();
                //    FirstName firstname = new FirstName();
                //    firstname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FirstName"].ToString();
                //    //{

                //    driverperson.FirstName.Add(firstname);
                //}
                ////}

                ////Familiname
                ////string familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                //if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"] != DBNull.Value)
                //{
                //    if (driverperson.FirstName != null)
                //    {
                //        driverperson.FamilyName = new List<FamilyName>();
                //    }
                //    driverperson.FamilyName = new List<FamilyName>();
                //    FamilyName familyname = new FamilyName();
                //    familyname._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_FamilyName"].ToString();
                //    driverperson.FamilyName.Add(familyname);
                //}
                ////JOBTITLE
                //if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"] != DBNull.Value)
                //{
                //    driverperson.JobTitle = new List<JobTitle>();
                //    JobTitle jobtitle = new JobTitle();
                //    jobtitle._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_JobTitle"].ToString();
                //    driverperson.JobTitle.Add(jobtitle);
                //}
                ////IdentityDocumentReference
                //if (dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"] != DBNull.Value)
                //{
                //    driverperson.IdentityDocumentReference = new List<IdentityDocumentReference>();
                //    IdentityDocumentReference identitydocument = new IdentityDocumentReference();
                //    driverperson.IdentityDocumentReference.Add(identitydocument);

                //    identitydocument.ID = new List<IDOnly>();
                //    IDOnly ididentity = new IDOnly();
                //    ididentity._ = dt.Rows[0]["Shipment_ShipmentStage_DriverPerson_IdentityDocumentReference_ID"].ToString();
                //    identitydocument.ID.Add(ididentity);

                //}

                //shipmentStage.DriverPerson.Add(driverperson);


                //if (propiedades == null)
                //{
                //    shipmentStage.DriverPerson = null;
                //}

                //13.6 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.6.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //CITYSUBDIVIONAME
                deliveryadrress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionname = new CitySubdivisionName();
                citysubdivionname._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CitySubdivisionName"].ToString();
                deliveryadrress.CitySubdivisionName.Add(citysubdivionname);

                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);

                //  13.6.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                //  13.6.2.1 DELIVERY DESPATCH 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                //CITYSUBDIVIONAME
                despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //DESPATCHPARTY 
                despatchdelivery.DespatchParty = new List<DespatchParty>();
                DespatchParty despatchparty = new DespatchParty();



                //if (dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                //{
                despatchparty.AgentParty = new List<AgentParty>();
                AgentParty agentParty = new AgentParty();
                despatchparty.AgentParty.Add(agentParty);

                agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                agentParty.PartyLegalEntity.Add(partylegalentityagent);

                partylegalentityagent.CompanyID = new List<CompanyID>();
                CompanyID companyid = new CompanyID();
                companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();

                partylegalentityagent.CompanyID.Add(companyid);
                //}
                despatchdelivery.DespatchParty.Add(despatchparty);

                //13.7 TransportHandlingUnit
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit transporthand = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(transporthand);

                transporthand.TransportEquipment = new List<TransportEquipment>();
                TransportEquipment transportequipment = new TransportEquipment();
                transporthand.TransportEquipment.Add(transportequipment);


                transportequipment.ID = new List<IDOnly>();
                IDOnly idtransport = new IDOnly();
                idtransport._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_ID__"].ToString();
                transportequipment.ID.Add(idtransport);


                //TUCE - TARJETA UNICA DE CIRCULACION VEHICULAR
                transportequipment.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                ApplicableTransportMeans ApplicableTransportMeansclass = new ApplicableTransportMeans();
                transportequipment.ApplicableTransportMeans.Add(ApplicableTransportMeansclass);

                ApplicableTransportMeansclass.RegistrationNationalityID = new List<RegistrationNationalityID>();
                RegistrationNationalityID RegistrationNationalityIDclass = new RegistrationNationalityID();
                RegistrationNationalityIDclass._ = dt.Rows[0]["TransportHandlingUnit_TransportEquipment_ApplicableTransportMeans_RegistrationNationalityID__"].ToString();
                ApplicableTransportMeansclass.RegistrationNationalityID.Add(RegistrationNationalityIDclass);

                //PLACA SECUNDARIA
                transportequipment.AttachedTransportEquipment = new List<IDOnlyA>();
                IDOnlyA IDONLYA = new IDOnlyA();
                transportequipment.AttachedTransportEquipment.Add(IDONLYA);
                IDONLYA.ID = new List<IDOnly>();
                IDOnly OnlyID = new IDOnly();
                OnlyID._ = dt.Rows[0]["Shipment_TransportHandlingUnit_TransportEquipment_AttachedTransportEquipment_ID__"].ToString();
                IDONLYA.ID.Add(OnlyID);

             


                //END TUCE

                //IDONLYA.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //ApplicableTransportMeans ApplicableTransportMeansid = new ApplicableTransportMeans();
                //IDONLYA.ApplicableTransportMeans.Add(ApplicableTransportMeansid);
                //ApplicableTransportMeansid.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //RegistrationNationalityID RegistrationNationalityIDtransportPLACA2 = new RegistrationNationalityID();
                //RegistrationNationalityIDtransportPLACA2._ = "TARJETACER2";
                //ApplicableTransportMeansid.RegistrationNationalityID.Add(RegistrationNationalityIDtransportPLACA2);

                //if (dt.Rows[0]["Shipment_SpecialInstructions_RegistroTransportista__"].ToString() != "")
                //{
                //    //transportequipment.ApplicableTransportMeans = new List<ApplicableTransportMeans>();
                //    //ApplicableTransportMeans ApplicableTransportMeanstransport = new ApplicableTransportMeans();
                //    //transportequipment.ApplicableTransportMeans.Add(ApplicableTransportMeanstransport);

                //    //ApplicableTransportMeanstransport.RegistrationNationalityID = new List<RegistrationNationalityID>();
                //    //RegistrationNationalityID RegistrationNationalityIDapplicable = new RegistrationNationalityID();
                //    //RegistrationNationalityIDapplicable._ = dt.Rows[0]["TransportHandlingUnit_TransportEquipment_ApplicableTransportMeans_RegistrationNationalityID__"].ToString();
                //    //ApplicableTransportMeanstransport.RegistrationNationalityID.Add(RegistrationNationalityIDapplicable);
                //}
                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);

                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                }

                //string RUCMinera = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);


                //Type tipoClaseAnidada = roo2.DespatchAdvice;
                //string jsonarreglado = RecorrerPropiedades(despatch);
                //Assembly ensamblado = Assembly.GetExecutingAssembly();
                //RecorrerPropiedades(roo2);

            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }

        //IMPORTACION

        //IMPORTACION PRIVADA
        //PENDIENTE

        //IMPORTACION PUBLICA
        public void ConvertirJsonAClases_ImportacionPublica(DataTable dt)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_id = guia_tipo + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string guia_serie = txtserie.Text;
            //ARMAR EL NOMBRE DE LA GUIA
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_serie + "-" + guia_numero;

            try
            {

                Root roo2 = new Root();
                roo2._D = dt.Rows[0]["_D"].ToString();
                roo2._A = dt.Rows[0]["_A"].ToString();
                roo2._B = dt.Rows[0]["_B"].ToString();
                roo2._E = dt.Rows[0]["_E"].ToString();



                //DespatchAdvice
                roo2.DespatchAdvice = new List<DespatchAdvice>();
                DespatchAdvice despatch = new DespatchAdvice();
                roo2.DespatchAdvice.Add(despatch);



                //1.UBLVersionID ***************
                despatch.UBLVersionID = new List<UBLVersionID>();
                UBLVersionID UBL = new UBLVersionID();
                UBL._ = dt.Rows[0]["UBLVersionID"].ToString();
                despatch.UBLVersionID.Add(UBL);

                //2. CustomizationID ***************
                despatch.CustomizationID = new List<CustomizationID>();
                CustomizationID customization = new CustomizationID();
                customization._ = dt.Rows[0]["CustomizationID"].ToString();
                despatch.CustomizationID.Add(customization);

                //3. ID ***************
                despatch.ID = new List<IDOnly>();
                IDOnly id = new IDOnly();
                id._ = dt.Rows[0]["ID"].ToString();
                despatch.ID.Add(id);

                //4. IssueDate ***************
                despatch.IssueDate = new List<IssueDate>();
                IssueDate issuedate = new IssueDate();
                issuedate._ = dt.Rows[0]["IssueDate"].ToString();
                despatch.IssueDate.Add(issuedate);

                //5. IssueTime ***************
                despatch.IssueTime = new List<IssueTime>();
                IssueTime issuetime = new IssueTime();
                issuetime._ = dt.Rows[0]["IssueTime"].ToString();

                //6. DespatchAdviceTypeCode ***************
                despatch.IssueTime.Add(issuetime);
                despatch.DespatchAdviceTypeCode = new List<DespatchAdviceTypeCode>();
                DespatchAdviceTypeCode despatchadviceTypeCode = new DespatchAdviceTypeCode();
                despatchadviceTypeCode._ = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();
                despatch.DespatchAdviceTypeCode.Add(despatchadviceTypeCode);

                //7. Note ***************
                despatch.Note = new List<Note>();
                Note note = new Note();
                note._ = dt.Rows[0]["Note"].ToString();
                if (note._ != "")
                {
                    despatch.Note.Add(note);
                }
                else
                {
                    despatch.Note = null;
                }

                //8. LineCount  ***************
                despatch.LineCountNumeric = new List<LineCountNumeric>();
                LineCountNumeric linecountnumeric = new LineCountNumeric();
                linecountnumeric._ = dt.Rows[0]["LineCountNumeric"].ToString(); ;
                despatch.LineCountNumeric.Add(linecountnumeric);

                //9. AdditionalDocumentReference ***************
                despatch.AdditionalDocumentReference = new List<AdditionalDocumentReference>();
                AdditionalDocumentReference additional = new AdditionalDocumentReference();

                //9.1 ID
                despatch.AdditionalDocumentReference.Add(additional);
                additional.ID = new List<IDOnly>();
                IDOnly idonly = new IDOnly();
                idonly._ = dt.Rows[0]["adref_id"].ToString();
                additional.ID.Add(idonly);
                //9.2 DocumentTypeCode
                additional.DocumentTypeCode = new List<DocumentTypeCode>();
                DocumentTypeCode documenttypecode = new DocumentTypeCode();
                documenttypecode._ = dt.Rows[0]["adref_DocumentTypeCode"].ToString();
                additional.DocumentTypeCode.Add(documenttypecode);
                //9.3 DocumentType 
                additional.DocumentType = new List<DocumentType>();
                DocumentType documentype = new DocumentType();
                documentype._ = dt.Rows[0]["adref_DocumentType"].ToString();
                additional.DocumentType.Add(documentype);

                //9.4 IssueParty 
                //additional.IssuerParty = new List<IssuerParty>();
                //IssuerParty issuerparty = new IssuerParty();
                //additional.IssuerParty.Add(issuerparty);
                ////9.4.1
                //issuerparty.PartyIdentification = new List<PartyIdentification>();
                //PartyIdentification partyidentification = new PartyIdentification();
                //issuerparty.PartyIdentification.Add(partyidentification);
                ////9.4.1.1
                //partyidentification.ID = new List<ID>();
                ////9.4.1.1.1
                //ID idadditional = new ID();
                //idadditional._ = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID"].ToString();
                //idadditional.schemeID = dt.Rows[0]["AdditionalDocumentReference_IssuerParty_PartyIdentification_ID_schemeID"].ToString(); ;
                //partyidentification.ID.Add(idadditional);
                //END ADDITIONALDOCUMENTREFERENCE


                //10 SIGNATURE *******
                despatch.Signature = new List<Signature>();
                Signature signature = new Signature();
                despatch.Signature.Add(signature);
                //10.1 ID SIGNATURE
                signature.ID = new List<IDOnly>();
                IDOnly idsignature = new IDOnly();
                idsignature._ = dt.Rows[0]["Signature_ID"].ToString();
                signature.ID.Add(idsignature);
                //10.2 SIGNATORYPARTY 
                signature.SignatoryParty = new List<SignatoryParty>();
                SignatoryParty signatoryparty = new SignatoryParty();
                signature.SignatoryParty.Add(signatoryparty);
                //10.2.1 PARTYIDENTIFICATION
                signatoryparty.PartyIdentification = new List<PartyIdentificationSignatoryParty>();
                PartyIdentificationSignatoryParty partyidentificationsignatory = new PartyIdentificationSignatoryParty();
                signatoryparty.PartyIdentification.Add(partyidentificationsignatory);
                //10.2.1.1 ID
                partyidentificationsignatory.ID = new List<IDOnly>();
                IDOnly idsignatory = new IDOnly();
                idsignatory._ = dt.Rows[0]["Signature_SignatoryParty_PartyIdentification_ID"].ToString();
                partyidentificationsignatory.ID.Add(idsignatory);

                //10.2.2 PartyName
                signatoryparty.PartyName = new List<PartyName>();
                PartyName partyname = new PartyName();
                signatoryparty.PartyName.Add(partyname);
                partyname.Name = new List<Name>();
                Name name = new Name();
                name._ = dt.Rows[0]["Signature_SignatoryParty_PartyName_Name"].ToString();
                partyname.Name.Add(name);

                //10.3 DigitalSignatureAttachment ********
                signature.DigitalSignatureAttachment = new List<DigitalSignatureAttachment>();
                DigitalSignatureAttachment digitalsignature = new DigitalSignatureAttachment();
                signature.DigitalSignatureAttachment.Add(digitalsignature);
                //10.3.1 ExternalReference
                digitalsignature.ExternalReference = new List<ExternalReference>();
                ExternalReference external = new ExternalReference();
                digitalsignature.ExternalReference.Add(external);
                //10.3.1.1 ExternalReference
                external.URI = new List<URI>();
                URI uri = new URI();
                uri._ = dt.Rows[0]["Signature_DigitalSignatureAttachment_ExternalReference_URI"].ToString();
                external.URI.Add(uri);


                //11 DespatchSupplierParty ************
                despatch.DespatchSupplierParty = new List<DespatchSupplierParty>();
                DespatchSupplierParty Despatchsupplier = new DespatchSupplierParty();
                despatch.DespatchSupplierParty.Add(Despatchsupplier);

                //11.1 PARTY
                Despatchsupplier.Party = new List<Party_IDOnly>();
                Party_IDOnly party = new Party_IDOnly();
                Despatchsupplier.Party.Add(party);

                //11.1.1 PARTYIDENTIFICATION
                party.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdespatch = new PartyIdentification();
                party.PartyIdentification.Add(partyidentificationdespatch);

                partyidentificationdespatch.ID = new List<ID>();
                ID iddespatch = new ID();
                iddespatch._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID__"].ToString();
                iddespatch.schemeID = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                partyidentificationdespatch.ID.Add(iddespatch);

                //11.1.2 POSTALADDRESS
                party.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdress = new PostalAddress_IDOnly();
                party.PostalAddress.Add(postaladdress);

                postaladdress.ID = new List<IDOnly>();
                IDOnly idpostal = new IDOnly();
                idpostal._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_ID"].ToString();
                postaladdress.ID.Add(idpostal);

                //StreetName
                postaladdress.StreetName = new List<StreetName>();
                StreetName streetName = new StreetName();
                streetName._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_StreetName"].ToString();
                postaladdress.StreetName.Add(streetName);

                //CitySubdivisionName
                postaladdress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysub = new CitySubdivisionName();
                citysub._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdress.CitySubdivisionName.Add(citysub);

                //CityName
                postaladdress.CityName = new List<CityName>();
                CityName cityname = new CityName();
                cityname._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CityName"].ToString();
                postaladdress.CityName.Add(cityname);

                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubenti = new CountrySubentity();
                countrysubenti._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubenti);

                //DISTRICT
                postaladdress.District = new List<District>();
                District district = new District();
                district._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_District"].ToString();
                postaladdress.District.Add(district);

                //COUNTRY
                postaladdress.Country = new List<Country>();
                Country country = new Country();
                postaladdress.Country.Add(country);

                country.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountry = new IdentificationCode();
                identificationcountry._ = dt.Rows[0]["DespatchSupplierParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                country.IdentificationCode.Add(identificationcountry);

                //11.1.3 PARTYLEGALENTITY
                party.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegal = new PartyLegalEntity();
                party.PartyLegalEntity.Add(partylegal);

                //11.1.3.1 REGISTRATIONNAME
                partylegal.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationame = new RegistrationName();
                registrationame._ = dt.Rows[0]["DespatchSupplierParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegal.RegistrationName.Add(registrationame);



                //12 DELIVERYCUSTOMERPARTY ***************
                despatch.DeliveryCustomerParty = new List<DeliveryCustomerParty>();
                DeliveryCustomerParty deliveryCustomer = new DeliveryCustomerParty();
                despatch.DeliveryCustomerParty.Add(deliveryCustomer);
                //12.1 PARTY
                deliveryCustomer.Party = new List<Party>();
                Party deliveryparty = new Party();
                deliveryCustomer.Party.Add(deliveryparty);
                //12.1.1 PARTYIDENTIFICATION
                deliveryparty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification partyidentificationdelivery = new PartyIdentification();
                deliveryparty.PartyIdentification.Add(partyidentificationdelivery);
                //ID
                partyidentificationdelivery.ID = new List<ID>();
                ID idonlydelivery = new ID();
                idonlydelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_ID__"].ToString();
                idonlydelivery.schemeID = dt.Rows[0]["DeliveryCustomerParty_Party_PartyIdentification_schemeID"].ToString(); ;
                //id.schemeID = "";
                partyidentificationdelivery.ID.Add(idonlydelivery);

                //12.1.2 PostalAdrress
                deliveryparty.PostalAddress = new List<PostalAddress_IDOnly>();
                PostalAddress_IDOnly postaladdressdelivery = new PostalAddress_IDOnly();
                deliveryparty.PostalAddress.Add(postaladdressdelivery);
                //ID
                postaladdressdelivery.ID = new List<IDOnly>();
                IDOnly iddelivery = new IDOnly();
                iddelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_ID"].ToString();
                //iddelivery.schemeID = "";
                postaladdressdelivery.ID.Add(iddelivery);

                //StreetName
                postaladdressdelivery.StreetName = new List<StreetName>();
                StreetName streetNamedelivery = new StreetName();
                streetNamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_StreetName"].ToString();
                postaladdressdelivery.StreetName.Add(streetNamedelivery);

                //CitySubdivisionName
                postaladdressdelivery.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdelivery = new CitySubdivisionName();
                citysubdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CitySubdivisionName"].ToString();
                postaladdressdelivery.CitySubdivisionName.Add(citysubdelivery);

                //CityName
                postaladdressdelivery.CityName = new List<CityName>();
                CityName citynamedelivery = new CityName();
                citynamedelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CityName"].ToString();
                postaladdressdelivery.CityName.Add(cityname);
                //COUNTRYSUBENTITY
                postaladdressdelivery.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentidelivery = new CountrySubentity();
                countrysubentidelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdressdelivery.CountrySubentity.Add(countrysubentidelivery);

                //DISTRICT
                postaladdressdelivery.District = new List<District>();
                District districtdelivery = new District();
                districtdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_District"].ToString();
                postaladdressdelivery.District.Add(districtdelivery);

                //COUNTRY
                postaladdressdelivery.Country = new List<Country>();
                Country countrydelivery = new Country();
                postaladdressdelivery.Country.Add(countrydelivery);

                countrydelivery.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationdelivery = new IdentificationCode();
                identificationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_Country_IdentificationCode"].ToString();
                countrydelivery.IdentificationCode.Add(identificationdelivery);

                //ERROR O EQUIVOCACION - ID 2006
                //COUNTRYSUBENTITY
                postaladdress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentity = new CountrySubentity();
                countrysubentity._ = dt.Rows[0]["DeliveryCustomerParty_Party_PostalAddress_CountrySubentity"].ToString();
                postaladdress.CountrySubentity.Add(countrysubentity);

                //12.1.3 PARTYLEGALENTITY
                deliveryparty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegaldelivery = new PartyLegalEntity();
                deliveryparty.PartyLegalEntity.Add(partylegaldelivery);

                partylegaldelivery.RegistrationName = new List<RegistrationName>();
                RegistrationName registrationdelivery = new RegistrationName();
                registrationdelivery._ = dt.Rows[0]["DeliveryCustomerParty_Party_PartyLegalEntity_RegistrationName"].ToString();
                partylegaldelivery.RegistrationName.Add(registrationdelivery);

                //12.1.4 CONTACT 
                deliveryparty.Contact = new List<Contact>();
                Contact contanctdelivery = new Contact();
                deliveryparty.Contact.Add(contanctdelivery);

                contanctdelivery.ElectronicMail = new List<ElectronicMail>();
                ElectronicMail electromail = new ElectronicMail();
                electromail._ = dt.Rows[0]["DeliveryCustomerParty_Party_Contact_ElectronicMail"].ToString();
                contanctdelivery.ElectronicMail.Add(electromail);

                //13 SHIPMENT ****************
                despatch.Shipment = new List<Shipment>();
                Shipment shipment = new Shipment();
                despatch.Shipment.Add(shipment);

                shipment.SpecialInstructions = new List<SpecialInstructions>();
                SpecialInstructions SpecialInstructionsshipment = new SpecialInstructions();
                SpecialInstructionsshipment._ = dt.Rows[0]["Shipment_SpecialInstructions__"].ToString();
                shipment.SpecialInstructions.Add(SpecialInstructionsshipment);

                //13.1 ID
                shipment.ID = new List<IDOnly>();
                IDOnly idshipment = new IDOnly();
                idshipment._ = dt.Rows[0]["Shipment_ID"].ToString();
                shipment.ID.Add(idshipment);

                //13.2 HANDLINGCODE
                shipment.HandlingCode = new List<HandlingCode>();
                HandlingCode handlingcode = new HandlingCode();
                handlingcode._ = dt.Rows[0]["Shipment_HandlingCode"].ToString();
                shipment.HandlingCode.Add(handlingcode);

                //13.3 HANDLINGINSTRUNCTIONS
                shipment.HandlingInstructions = new List<HandlingInstruction>();
                HandlingInstruction handlinginstruction = new HandlingInstruction();
                handlinginstruction._ = "ETC";//dt.Rows[0]["Shipment_HandlingInstructions"].ToString();
                shipment.HandlingInstructions.Add(handlinginstruction);
                //13.4 NEW INFORMATION
                shipment.Information = new List<_ONLY>();
                _ONLY Information_ = new _ONLY();
                Information_._ = dt.Rows[0]["Shipment_Information__"].ToString();
                shipment.Information.Add(Information_);


                //13.4 GrossWeightMeasure
                shipment.GrossWeightMeasure = new List<GrossWeightMeasure>();
                GrossWeightMeasure gross = new GrossWeightMeasure();
                gross._ = dt.Rows[0]["Shipment_GrossWeightMeasure__"].ToString();
                gross.unitCode = dt.Rows[0]["Shipment_GrossWeightMeasure_unitCode"].ToString();
                shipment.GrossWeightMeasure.Add(gross);

                //NetWeightMeasure
                shipment.NetWeightMeasure = new List<NetWeightMeasure>();
                NetWeightMeasure NetWeightMeasure_ = new NetWeightMeasure();
                NetWeightMeasure_._ = dt.Rows[0]["Shipment_NetWeightMeasure__"].ToString();
                NetWeightMeasure_.unitCode = dt.Rows[0]["Shipment_NetWeightMeasure_unitCode"].ToString();
                shipment.NetWeightMeasure.Add(NetWeightMeasure_);

                //TotalTransportHandlingUnitQuantity
                shipment.TotalTransportHandlingUnitQuantity = new List<TotalTransportHandlingUnitQuantity>();
                TotalTransportHandlingUnitQuantity TotalTransportHandlingUnitQuantity_shipment = new TotalTransportHandlingUnitQuantity();
                TotalTransportHandlingUnitQuantity_shipment._ = dt.Rows[0]["Shipment_TotalTransportHandlingUnitQuantity__"].ToString();
                shipment.TotalTransportHandlingUnitQuantity.Add(TotalTransportHandlingUnitQuantity_shipment);

                //SpecialInstructions
                if (dt.Rows[0]["INDICADORTRASLADOVEHICATM1"].ToString() == "1")
                {

                    shipment.SpecialInstructions = new List<SpecialInstructions>();
                    SpecialInstructions shipmentSpecialInstrucions = new SpecialInstructions();
                    shipmentSpecialInstrucions._ = dt.Rows[0]["Shipment_SpecialInstructions_VehiculoM1oL__"].ToString();
                    shipment.SpecialInstructions.Add(shipmentSpecialInstrucions);
                }

                //13.5 SHIPMENTSTAGE
                shipment.ShipmentStage = new List<ShipmentStage>();
                ShipmentStage shipmentStage = new ShipmentStage();
                shipment.ShipmentStage.Add(shipmentStage);

                //TransportModeCode
                shipmentStage.TransportModeCode = new List<TransportModeCode>();
                TransportModeCode transportmodecode = new TransportModeCode();
                transportmodecode._ = dt.Rows[0]["Shipment_ShipmentStage_TransportModeCode"].ToString();
                shipmentStage.TransportModeCode.Add(transportmodecode);
                //TransitPeriod

                shipmentStage.TransitPeriod = new List<TransitPeriod>();
                TransitPeriod transitPeriod = new TransitPeriod();
                shipmentStage.TransitPeriod.Add(transitPeriod);

                //STARTDATE
                transitPeriod.StartDate = new List<StartDate>();
                StartDate date = new StartDate();
                date._ = dt.Rows[0]["Shipment_ShipmentStage_TransitPeriod_StartDate"].ToString();
                transitPeriod.StartDate.Add(date);


                //PUBLICO
                //CARRIERPARTY - LISTA
                shipmentStage.CarrierParty = new List<CarrierParty>();
                CarrierParty CarrierParty = new CarrierParty();


                //CARRIERPARTY - PARTYIDENTIFICATION


                CarrierParty.PartyIdentification = new List<PartyIdentification>();
                PartyIdentification PartyIdentification = new PartyIdentification();
                CarrierParty.PartyIdentification.Add(PartyIdentification);
                PartyIdentification.ID = new List<ID>();

                ID idCarrierParty = new ID();

                idCarrierParty._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID__"].ToString();
                idCarrierParty.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyIdentification_ID_schemeID"].ToString();
                PartyIdentification.ID.Add(idCarrierParty);



                //CARRIERPARTY - PARTYLEGALENTITY
                CarrierParty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partyLegalEntity = new PartyLegalEntity();
                CarrierParty.PartyLegalEntity.Add(partyLegalEntity);
                //PARTYLEGALENTITY - REGISTRATIONAME
                //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"] != DBNull.Value)
                //{


                partyLegalEntity.RegistrationName = new List<RegistrationName>();
                RegistrationName CarrierRegistrionName = new RegistrationName();

                CarrierRegistrionName._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_RegistrationName__"].ToString();
                partyLegalEntity.RegistrationName.Add(CarrierRegistrionName);
                //}
                partyLegalEntity.CompanyID = new List<CompanyID>();

                //PARTYLEGALENTITY - COMPANYID
                //if (dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                //{
                CompanyID CarrierPartyCompanyID = new CompanyID();

                CarrierPartyCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_PartyLegalEntity_CompanyID__"].ToString();
                partyLegalEntity.CompanyID.Add(CarrierPartyCompanyID);
                //}
                //CARRIERPARTY - AGENTPARTY

                CarrierParty.AgentParty = new List<AgentParty>();


                AgentParty CarrierPartyAgentParty = new AgentParty();
                CarrierParty.AgentParty.Add(CarrierPartyAgentParty);

                CarrierPartyAgentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity CarrierPartyLegalEntity = new PartyLegalEntity();
                CarrierPartyAgentParty.PartyLegalEntity.Add(CarrierPartyLegalEntity);


                CarrierPartyLegalEntity.CompanyID = new List<CompanyID>();
                CompanyID CarrierCompanyID = new CompanyID();
                CarrierCompanyID._ = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                CarrierCompanyID.schemeID = dt.Rows[0]["Shipment_ShipmentStage_CarrierParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                CarrierPartyLegalEntity.CompanyID.Add(CarrierCompanyID);

                shipmentStage.CarrierParty.Add(CarrierParty);

                //END CARRIERPARTY


                //DESPATCHPARTY




                //END DESPATCHPARTY



                // END PUBLICO
                //ID
                ////DriverPerson
                //shipmentStage.DriverPerson = new List<DriverPerson>();
                //DriverPerson driverperson = new DriverPerson();
                //shipmentStage.DriverPerson.Add(driverperson);




                //if (propiedades == null)
                //{
                //    shipmentStage.DriverPerson = null;
                //}

                //13.6 DELIVERY
                shipment.Delivery = new List<Delivery>();
                Delivery delivery = new Delivery();
                shipment.Delivery.Add(delivery);

                //13.6.1 DELIVERYADDRESS
                delivery.DeliveryAddress = new List<DeliveryAddress>();
                DeliveryAddress deliveryadrress = new DeliveryAddress();
                delivery.DeliveryAddress.Add(deliveryadrress);
                //ID
                deliveryadrress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrress = new IDOnly();
                iddeliveryadrress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_ID"].ToString();
                deliveryadrress.ID.Add(iddeliveryadrress);

                //CITYSUBDIVIONAME
                deliveryadrress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionname = new CitySubdivisionName();
                citysubdivionname._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CitySubdivisionName"].ToString();
                deliveryadrress.CitySubdivisionName.Add(citysubdivionname);

                //CITYNAME
                deliveryadrress.CityName = new List<CityName>();
                CityName citynamedeliveryadress = new CityName();
                citynamedeliveryadress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CityName"].ToString();
                deliveryadrress.CityName.Add(citynamedeliveryadress);

                //COUNTRYSubEntity
                deliveryadrress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentity = new CountrySubentity();
                countrysubentityidentity._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_CountrySubentity"].ToString();
                deliveryadrress.CountrySubentity.Add(countrysubentityidentity);

                //DISTRICT
                deliveryadrress.District = new List<District>();
                District districtdeliveryaddress = new District();
                districtdeliveryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_District"].ToString();
                deliveryadrress.District.Add(districtdeliveryaddress);

                //ADDRESSLINE
                deliveryadrress.AddressLine = new List<AddressLine>();
                AddressLine addressline = new AddressLine();
                deliveryadrress.AddressLine.Add(addressline);

                addressline.Line = new List<Line>();
                Line line = new Line();
                line._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressLine_Line"].ToString();
                addressline.Line.Add(line);

                //COUNTRY
                deliveryadrress.Country = new List<Country>();
                Country countrydeliveryaddress = new Country();
                deliveryadrress.Country.Add(countrydeliveryaddress);

                //IDENTIFICATIONCODE
                countrydeliveryaddress.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddress = new IdentificationCode();
                identificationcountryaddress._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddress.IdentificationCode.Add(identificationcountryaddress);

                //  13.6.2 DELIVERY DESPATCH 
                delivery.Despatch = new List<Despatch>();
                Despatch despatchdelivery = new Despatch();
                delivery.Despatch.Add(despatchdelivery);
                //  13.6.2.1 DELIVERY DESPATCH 
                despatchdelivery.DespatchAddress = new List<DespatchAddress_IDOnly>();
                DespatchAddress_IDOnly despatchaddress = new DespatchAddress_IDOnly();
                despatchdelivery.DespatchAddress.Add(despatchaddress);

                //ID
                despatchaddress.ID = new List<IDOnly>();
                IDOnly iddeliveryadrressonly = new IDOnly();
                iddeliveryadrressonly._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_ID"].ToString();
                despatchaddress.ID.Add(iddeliveryadrressonly);

                ////CITYSUBDIVIONAME
                despatchaddress.CitySubdivisionName = new List<CitySubdivisionName>();
                CitySubdivisionName citysubdivionnamedes = new CitySubdivisionName();
                citysubdivionnamedes._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CitySubdivisionName"].ToString();
                despatchaddress.CitySubdivisionName.Add(citysubdivionnamedes);

                //CITYNAME
                despatchaddress.CityName = new List<CityName>();
                CityName citynamedeliveryadressdespatch = new CityName();
                citynamedeliveryadressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CityName"].ToString();
                despatchaddress.CityName.Add(citynamedeliveryadressdespatch);

                //COUNTRYSubEntity
                despatchaddress.CountrySubentity = new List<CountrySubentity>();
                CountrySubentity countrysubentityidentitydespatch = new CountrySubentity();
                countrysubentityidentitydespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_CountrySubentity"].ToString();
                despatchaddress.CountrySubentity.Add(countrysubentityidentitydespatch);
                //DISTRICT
                despatchaddress.District = new List<District>();
                District districtdeliveryaddressdespatch = new District();
                districtdeliveryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_District"].ToString();
                despatchaddress.District.Add(districtdeliveryaddressdespatch);

                //ADDRESSLINE
                despatchaddress.AddressLine = new List<AddressLine>();
                AddressLine addresslinedespatch = new AddressLine();
                despatchaddress.AddressLine.Add(addresslinedespatch);
                //LINE
                addresslinedespatch.Line = new List<Line>();
                Line linedespatch = new Line();
                linedespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_AddressLine_Line"].ToString();
                addresslinedespatch.Line.Add(linedespatch);

                //COUNTRY
                despatchaddress.Country = new List<Country>();
                Country countrydeliveryaddressdespatch = new Country();
                despatchaddress.Country.Add(countrydeliveryaddressdespatch);
                //IDENTIFICATIONCODE
                countrydeliveryaddressdespatch.IdentificationCode = new List<IdentificationCode>();
                IdentificationCode identificationcountryaddressdespatch = new IdentificationCode();
                identificationcountryaddressdespatch._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchAddress_Country_IdentificationCode"].ToString();
                countrydeliveryaddressdespatch.IdentificationCode.Add(identificationcountryaddressdespatch);

                //despatchaddress.AddressTypeCode = new List<AddressTypeCode>();
                //AddressTypeCode AddressTypeCodedespatch = new AddressTypeCode();
                //AddressTypeCodedespatch.listID = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressTypeCode_listID"].ToString();
                //AddressTypeCodedespatch._ = dt.Rows[0]["Shipment_Delivery_DeliveryAddress_AddressTypeCode__"].ToString();
                //despatchaddress.AddressTypeCode.Add(AddressTypeCodedespatch);
                //DESPATCHPARTY 
                despatchdelivery.DespatchParty = new List<DespatchParty>();
                DespatchParty despatchparty = new DespatchParty();
                despatchdelivery.DespatchParty.Add(despatchparty);


                // 13.7 TransportHandlingUnit
                shipment.TransportHandlingUnit = new List<TransportHandlingUnit>();
                TransportHandlingUnit TransportHandlingUnit_shipment = new TransportHandlingUnit();
                shipment.TransportHandlingUnit.Add(TransportHandlingUnit_shipment);

                TransportHandlingUnit_shipment.Package = new List<Package>();
                Package Package_Transport = new Package();
                TransportHandlingUnit_shipment.Package.Add(Package_Transport);
                Package_Transport.ID = new List<Package_>();
                Package_ Package_ = new Package_();
                Package_._ = "12345678912";//dt.Rows[0]["Shipment_TransportHandlingUnit_Package_ID__"].ToString();
                Package_Transport.ID.Add(Package_);

                Package_Transport.TraceID = new List<TraceID>();
                TraceID Package_Transport_TRACEID = new TraceID();
                Package_Transport_TRACEID._ = "12345678912"; //dt.Rows[0]["Shipment_TransportHandlingUnit_Package_TraceID_"].ToString();
                Package_Transport.TraceID.Add(Package_Transport_TRACEID);

                //13.8 FirstArrivalPortLocation
                shipment.FirstArrivalPortLocation = new List<FirstArrivalPortLocation>();
                FirstArrivalPortLocation FirstArrivalPortLocation_shipment = new FirstArrivalPortLocation();
                shipment.FirstArrivalPortLocation.Add(FirstArrivalPortLocation_shipment);

                //ID
                FirstArrivalPortLocation_shipment.ID = new List<_ONLY>();
                _ONLY FirstArrivalPortLocation_shipment_id = new _ONLY();
                FirstArrivalPortLocation_shipment_id._ = dt.Rows[0]["Shipment_FirstArrivalPortLocation_ID_"].ToString();
                FirstArrivalPortLocation_shipment.ID.Add(FirstArrivalPortLocation_shipment_id);

                //LOCATIONTYPECODE
                FirstArrivalPortLocation_shipment.LocationTypeCode = new List<_ONLY>();
                _ONLY FirstArrivalPortLocation_shipment__ = new _ONLY();
                FirstArrivalPortLocation_shipment__._ = dt.Rows[0]["Shipment_FirstArrivalPortLocation_LocationTypeCode_"].ToString();
                FirstArrivalPortLocation_shipment.LocationTypeCode.Add(FirstArrivalPortLocation_shipment__);

                //Name
                FirstArrivalPortLocation_shipment.Name = new List<_ONLY>();
                _ONLY Name__ = new _ONLY();
                Name__._ = dt.Rows[0]["Shipment_FirstArrivalPortLocation_Name_"].ToString();
                FirstArrivalPortLocation_shipment.Name.Add(Name__);
                //if (dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"] != DBNull.Value)
                //{
                despatchparty.AgentParty = new List<AgentParty>();
                AgentParty agentParty = new AgentParty();
                despatchparty.AgentParty.Add(agentParty);

                agentParty.PartyLegalEntity = new List<PartyLegalEntity>();
                PartyLegalEntity partylegalentityagent = new PartyLegalEntity();
                agentParty.PartyLegalEntity.Add(partylegalentityagent);

                partylegalentityagent.CompanyID = new List<CompanyID>();
                CompanyID companyid = new CompanyID();
                companyid._ = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID__"].ToString();
                companyid.schemeID = dt.Rows[0]["Shipment_Delivery_Despatch_DespatchParty_AgentParty_PartyLegalEntity_CompanyID_schemeID"].ToString();
                partylegalentityagent.CompanyID.Add(companyid);

                //14 DESPATCHLINE *************
                despatch.DespatchLine = new List<DespatchLine>();


                foreach (DataRow row in dt.Rows)
                {
                    DespatchLine despatchline = new DespatchLine();
                    //CAMBIO
                    despatch.DespatchLine.Add(despatchline);
                    despatchline.ID = new List<IDOnly>();
                    //14.1 id
                    IDOnly ID = new IDOnly();
                    ID._ = row["DespatchLine_ID"].ToString();
                    despatchline.ID.Add(ID);

                    //14.2 Note
                    despatchline.Note = new List<Note>();
                    Note notedespatchline = new Note();
                    notedespatchline._ = row["DespatchLine_Note"].ToString();
                    despatchline.Note.Add(notedespatchline);

                    //14.3 DeliveredQuantity
                    despatchline.DeliveredQuantity = new List<DeliveredQuantity>();
                    DeliveredQuantity delivered = new DeliveredQuantity();
                    delivered._ = row["DespatchLine_DeliveredQuantity_"].ToString();
                    delivered.unitCode = "CAJ";//row["DespatchLine_DeliveredQuantity_unitCode"].ToString();
                    despatchline.DeliveredQuantity.Add(delivered);
                    //14.4 ORDERLINEREFERENCE
                    despatchline.OrderLineReference = new List<OrderLineReference>();
                    OrderLineReference orderLine = new OrderLineReference();
                    despatchline.OrderLineReference.Add(orderLine);

                    orderLine.LineID = new List<LineID>();
                    LineID lineid = new LineID();
                    lineid._ = Convert.ToInt32(row["DespatchLine_OrderLineReference_LineID"]);
                    orderLine.LineID.Add(lineid);

                    //14.5 ITEM
                    despatchline.Item = new List<Item>();
                    Item item = new Item();
                    despatchline.Item.Add(item);

                    item.Description = new List<Description>();
                    Description descripcion = new Description();
                    descripcion._ = row["DespatchLine_Item_Description"].ToString();
                    item.Description.Add(descripcion);

                    item.SellersItemIdentification = new List<SellersItemIdentification>();
                    SellersItemIdentification seller = new SellersItemIdentification();
                    item.SellersItemIdentification.Add(seller);

                    seller.ID = new List<IDOnly>();
                    IDOnly idseller = new IDOnly();
                    idseller._ = row["DespatchLine_Item_SellersItemIdentification_ID"].ToString();
                    seller.ID.Add(idseller);

                    //AdditionalItemProperty
                    item.AdditionalItemProperty = new List<AdditionalItemProperty>();
                    AdditionalItemProperty itemAdditionalItemProperty = new AdditionalItemProperty();
                    item.AdditionalItemProperty.Add(itemAdditionalItemProperty);
                    //NAME
                    itemAdditionalItemProperty.Name = new List<_ONLY>();
                    _ONLY Name_ = new _ONLY();
                    //CAMPO FALTANTE A AGREGAR - NAME
                    Name_._ = "Numero de declaracion aduanera (DAM)";//dt.Rows[0]["DespatchLine_Item_AdditionalItemProperty_Name_"].ToString();
                    itemAdditionalItemProperty.Name.Add(Name_);

                    //NAMECODE 
                    itemAdditionalItemProperty.NameCode = new List<_ONLY>();
                    _ONLY NameCode__ = new _ONLY();
                    //CAMPO FALTANTE A AGREGAR - NAMECODE
                    NameCode__._ = "7021";//dt.Rows[0]["DespatchLine_Item_AdditionalItemProperty_NameCode__"].ToString();
                    itemAdditionalItemProperty.NameCode.Add(NameCode__);
                    //Value
                    itemAdditionalItemProperty.Value = new List<_ONLY>();
                    _ONLY Valueitem = new _ONLY();
                    //CAMPO FALTANTE - Value
                    Valueitem._ = dt.Rows[0]["DespatchLine_Item_AdditionalItemProperty_Value__"].ToString();
                    itemAdditionalItemProperty.Value.Add(Valueitem);


                }
                string IDdt = dt.Rows[0]["ID"].ToString();
                string tipodocumentoEmisor = dt.Rows[0]["DespatchSupplierParty_Party_PartyIdentification_ID_schemeID"].ToString();
                string tipoDocumento = dt.Rows[0]["DespatchAdviceTypeCode"].ToString();

                //string FileName = Logueo.RucEmpresa + "-" + tipoDocumento + "-" + IDdt;
                string filepathtemp = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia + ".json";
                //para eliminar los NULOS
                JsonSerializerSettings setting = new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore,

                };

                string serializarcabecera = JsonConvert.SerializeObject(roo2, Newtonsoft.Json.Formatting.Indented, setting);
                File.WriteAllText(filepathtemp, serializarcabecera);


            }
            catch (Exception ex)
            {
                MessageBox.Show("=====>   " + ex);
            }

        }

        public class ResponseSinXML
        {
            public string tipodocumentoEmisor { get; set; }
            public string numeroDocumentoEmisor { get; set; }
            public string tipoDocumento { get; set; }
            public string serieNumero { get; set; }
            public string ticket { get; set; }

        }
        private string LeerXml(string rutaArchivo, string nombreNodo)
        {
            XmlDocument xml;
            XmlNode nodo;
            string valor = "";

            try
            {
                xml = new XmlDocument();
                xml.Load(rutaArchivo);
                //Util.ShowMessage("Ruta archivo:" + rutaArchivo, 1);
                //Util.ShowMessage("nombre nodo:" + nombreNodo, 1);
                nodo = xml.DocumentElement.SelectSingleNode("//configuration/appSettings/add[@key='" + nombreNodo + "']").Attributes["value"];

                valor = nodo.Value.ToString();
                //Util.ShowMessage("valor nodo:" + valor, 1);
            }
            catch (IOException exIO)
            {
                MessageBox.Show("Error al leer nodo del config : " + rutaArchivo + nombreNodo + valor + exIO.Message);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error al leer nodo del config  : " + rutaArchivo + nombreNodo + valor + ex.Message);
            }

            return valor;
        }
        public string POST_DOCUMENT()
        {
            //string ruta = @"C:\Users\sistemas\Desktop\PRUEBA_APIREST\Traver_v2\Fac.UI.Win\bin\Debug\";

            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guia_serie = txtserie.Text;
            string guia_id = guia_serie + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            //ARMA EL NOMBRE DE LA GUIA, PARA MANDAR COMO PARAMETRO A ARCHIVO
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_id;

            // Generar token
            string access_token = POST_TOKEN();
            ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072;


            DataTable dt = Efact_GuiaLogic.Instance.Traer_EFACT_SERVICIOSAPI("URL_metodo_para_enviar_documento_obtener_ticket");
            string url_POST2 = dt.Rows[0]["URL"].ToString();



            string token = "Bearer " + access_token;

            // Autenticar con el token creado
            string description = "";
            string code = "";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url_POST2);
            request.Method = "POST";
            request.Headers.Add("Authorization", token);
            request.ContentType = "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW";


            //OBTIENE ruta y nombre del archivo
            Archivo archivo = ObtenerRutaYNombre(Guia);
            //OBTIENE TODA LA RUTA DONDE ESTA EL ARCHIVO
            string archivoruta = archivo.ruta + ".json";
            // string nombrearchivo = archivo.Nombre;
            //lee contenido del archivo 
            string jsonContent = File.ReadAllText(archivoruta);

            //Arma body del document -- NO CAPTURABA EL NOMBRE -- SOLUCIONADO
            string requestBody = string.Format(
            "------WebKitFormBoundary7MA4YWxkTrZu0gW\r\n" +
            "Content-Disposition: form-data; name=\"file\";filename=\"" + archivo.Nombre + ".json\"\r\n" +
            "Content-Type: application/json\r\n\r\n" +
            "{0}\r\n" +
            "------WebKitFormBoundary7MA4YWxkTrZu0gW--", jsonContent);
            //Convertir body en bytes
            byte[] requestBytes = Encoding.UTF8.GetBytes(requestBody);
            request.ContentLength = requestBytes.Length;

            // enviar metodo post
            using (Stream requestStream = request.GetRequestStream())
            {
                requestStream.Write(requestBytes, 0, requestBytes.Length);
                requestStream.Close();
            }


            int flag = 1;
            string Mensaje = "";
            try
            {

                HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                using (Stream responseStream = response.GetResponseStream())
                {
                    using (StreamReader reader = new StreamReader(responseStream))
                    {
                        string responseFromServer = reader.ReadToEnd();

                        string token_String = responseFromServer.ToString();
                        Code deserealizar = JsonConvert.DeserializeObject<Code>(token_String);
                        //string mensajesunat = token_String;
                        //NOMBRE ARCHIVO
                        code = deserealizar.code;
                        description = deserealizar.description;

                        if (code == "0") // si el json esta correcto, retorna ticket y se guarda en tabla response
                        {
                            string mensajesunat = "Pendiente";
                            Efact_GuiaLogic.Instance.Insertar_EfactResponse(tipdocemisor, numerodumentoemisor, guia_tipo, guia_id, code, description, mensajesunat, "", "POST", "", out flag, out Mensaje);
                            //MessageBox.Show(description);
                        }

                    }
                }

            }
            catch (WebException ex)  // No retornara ticket, ya que hay error de Estructura - EFACT
            {
                if (ex.Response != null)
                {
                    using (HttpWebResponse response = (HttpWebResponse)ex.Response)
                    {
                        using (Stream responseStream = response.GetResponseStream())
                        {
                            using (StreamReader reader = new StreamReader(responseStream))
                            {
                                string responseFromServer = reader.ReadToEnd();
                                string token_String = responseFromServer.ToString();
                                Code deserealizar = JsonConvert.DeserializeObject<Code>(token_String);
                                code = deserealizar.code;
                                description = deserealizar.description;
                                string date = DateTime.Now.ToString();
                                string metodo = "POST";
                                Efact_GuiaLogic.Instance.Insertar_EfactErrorLog(numerodumentoemisor, guia_id, guia_tipo, tipdocemisor, code, description, date, metodo, out flag, out Mensaje);
                                Efact_GuiaLogic.Instance.Insertar_EfactResponse(tipdocemisor, numerodumentoemisor, guia_tipo, guia_id, code, description, "ERROR:: POST_DOCUMENT", "", "POST", "ERROR EN EFACT", out flag, out Mensaje);
                                //MessageBox.Show(""description);
                                Util.ShowMessage("Error :: " + description, 1);
                                return String.Empty;
                                //MessageBox.Show(Mensaje);
                            }
                        }
                    }
                }
            }


            return description;
        }
        public int TicketVerdadero_GETCDR()
        {
            // poner un parametro para el 0 y 1 
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string serie = txtserie.Text;
            string guia_id = serie + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            DataTable ticket = Efact_GuiaLogic.Instance.Spu_Fac_EFACT_RESPONSE_LOG(guia_id, numerodumentoemisor, guia_tipo);

            string code = "";
            string description = "";
            string mensaje = "";
            int flag = 1;
            string mensajesunat = "";

            string date = DateTime.Now.ToString();
            Code deserealizar = new Code();
            int valorestado = 0;


            //FOREACH PARA ENCONTRAR EL TICKET VERDADERO 
            foreach (DataRow row in ticket.Rows)
            {
                string ticket_true = row["ticket"].ToString();

                try
                {

                    DataTable dt = Efact_GuiaLogic.Instance.Traer_EFACT_SERVICIOSAPI("URL_metodo_para_obtener_el_CDR");
                    string url = dt.Rows[0]["URL"].ToString() + ticket_true;
                    //string url = "https://ose-qa-rest.efact.pe/api-efact-ose/v1/cdr/" + ticket;
                    ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072; //TLS 1.2
                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                    string access_token = POST_TOKEN();
                    request.Method = "GET";
                    request.Accept = "*/*";
                    request.Headers.Add("Authorization", "Bearer " + access_token);



                    using (HttpWebResponse respuesta = (HttpWebResponse)request.GetResponse())
                    {
                        using (Stream respuestaStream = respuesta.GetResponseStream())
                        {
                            StreamReader reader = new StreamReader(respuestaStream);
                            string contenido = reader.ReadToEnd();
                            string responseserver = contenido.ToString();
                            //VER ESTADOS :: EFACT
                            HttpStatusCode statuscode = ((HttpWebResponse)respuesta).StatusCode;
                            int estadoapi = (int)statuscode;
                            if (estadoapi == 200)
                            {
                                code = GetXmlValue(contenido, "cbc:ResponseCode");
                                mensajesunat = GetXmlValue(contenido, "cbc:Description");
                                deserealizar.description = mensajesunat;
                                deserealizar.code = code;
                                string XmlSunat = responseserver;
                                string Metodo = "GET_CDR";

                                MessageBox.Show(mensajesunat);
                                Efact_GuiaLogic.Instance.Insertar_EfactResponse(tipdocemisor, numerodumentoemisor, guia_tipo, guia_id, code, ticket_true, mensajesunat, XmlSunat, Metodo, "ACEPTADA", out flag, out mensaje);
                                Efact_GuiaLogic.Instance.Insertar_EfactErrorLog(numerodumentoemisor, guia_id, guia_tipo, tipdocemisor, code, description, date, Metodo, out flag, out mensaje);
                                return valorestado = 1;

                            }
                        }
                    }
                }
                catch (WebException ex)
                {
                    if (ex.Response != null)
                    {
                        using (HttpWebResponse response = (HttpWebResponse)ex.Response)
                        {
                            using (Stream responseStream = response.GetResponseStream())
                            {
                                using (StreamReader reader = new StreamReader(responseStream))
                                {
                                    string responseFromServer = reader.ReadToEnd();
                                    string token_String = responseFromServer.ToString();
                                    deserealizar = JsonConvert.DeserializeObject<Code>(token_String);
                                    code = deserealizar.code;
                                    description = deserealizar.description;
                                    string metodo = "GET_CDR";
                                    date = DateTime.Now.ToString();
                                    string Mensaje = "";
                                    //MessageBox.Show(exdescription);
                                    //Util.ShowError(description);
                                    //Util.ShowMessage(description, 1);

                                    //return valorestado;

                                }
                            }
                        }
                    }
                }


            }
            return valorestado;
        }
        //END DOCUMENT
        public class Code
        {
            public string code { get; set; }
            public string description { get; set; }

        }
        public static string GetXmlValue(string xml, string elementName)
        {
            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.LoadXml(xml);

            XmlNodeList nodeList = xmlDoc.GetElementsByTagName(elementName);
            if (nodeList.Count > 0)
            {
                XmlNode node = nodeList[0];
                return node.InnerText;
            }

            return null;
        }
        //GET CDR
        public Code GET_CDR(string ticket)
        {
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string serie = txtserie.Text;
            string guia_id = serie + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;

            string code = "";
            string description = "";
            string mensaje = "";
            int flag = 1;
            string mensajesunat = "";

            string date = "";
            Code deserealizar = new Code();


            try
            {
                DataTable dt = Efact_GuiaLogic.Instance.Traer_EFACT_SERVICIOSAPI("URL_metodo_para_obtener_el_CDR");
                string url = dt.Rows[0]["URL"].ToString() + ticket;
                //string url = "https://ose-qa-rest.efact.pe/api-efact-ose/v1/cdr/" + ticket;
                ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072; //TLS 1.2
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                string access_token = POST_TOKEN();
                request.Method = "GET";
                request.Accept = "*/*";
                request.Headers.Add("Authorization", "Bearer " + access_token);



                using (HttpWebResponse respuesta = (HttpWebResponse)request.GetResponse())
                {
                    using (Stream respuestaStream = respuesta.GetResponseStream())
                    {
                        StreamReader reader = new StreamReader(respuestaStream);
                        string contenido = reader.ReadToEnd();
                        string responseserver = contenido.ToString();
                        //VER ESTADOS :: EFACT
                        HttpStatusCode statuscode = ((HttpWebResponse)respuesta).StatusCode;
                        int estadoapi = (int)statuscode;

                        if (estadoapi == 200)//GUIA ACEPTADA ::OK
                        {
                            code = GetXmlValue(contenido, "cbc:ResponseCode");
                            mensajesunat = GetXmlValue(contenido, "cbc:Description");
                            // deserealizar.code = estadoapi.ToString();
                            deserealizar.description = description;
                            deserealizar.code = code;
                            string XmlSunat = responseserver;
                            //(exdescription, 1);
                            string Metodo = "GET_CDR";
                            Efact_GuiaLogic.Instance.Insertar_EfactResponse(tipdocemisor, numerodumentoemisor, guia_tipo, guia_id, code, ticket, mensajesunat, XmlSunat, Metodo, "ACEPTADA", out flag, out mensaje);

                            MessageBox.Show(mensajesunat);

                        }


                        else // registrar estado en proceso
                        {
                            deserealizar = JsonConvert.DeserializeObject<Code>(responseserver);
                            code = deserealizar.code;
                            description = deserealizar.description;
                            date = DateTime.Now.ToString();
                            string metodo = "GET_CDR";
                            Efact_GuiaLogic.Instance.Insertar_EfactErrorLog(numerodumentoemisor, guia_id, guia_tipo, tipdocemisor, code, description, date, metodo, out flag, out mensaje);
                            Efact_GuiaLogic.Instance.Insertar_EfactResponse(tipdocemisor, numerodumentoemisor, guia_tipo, guia_id, code, ticket, "ERROR:: GET_CDR", "", metodo, "EN PROCESO", out flag, out mensaje);

                            //Util.ShowMessage(exdescription, 1);
                            MessageBox.Show(description);
                        }
                    }
                }

            }

            catch (WebException ex)
            {
                if (ex.Response != null)
                {
                    using (HttpWebResponse response = (HttpWebResponse)ex.Response)
                    {
                        using (Stream responseStream = response.GetResponseStream())
                        {
                            using (StreamReader reader = new StreamReader(responseStream))
                            {
                                string responseFromServer = reader.ReadToEnd();
                                string token_String = responseFromServer.ToString();
                                deserealizar = JsonConvert.DeserializeObject<Code>(token_String);
                                code = deserealizar.code;
                                description = deserealizar.description;
                                string metodo = "GET_CDR";
                                date = DateTime.Now.ToString();
                                string Mensaje = "";

                                if (code == "1033")
                                {

                                    int valorestado = TicketVerdadero_GETCDR();

                                    if (valorestado == 1)
                                    {
                                        //Util.ShowMessage("El comprobante ha sido aceptada",1);
                                        return deserealizar;
                                    }

                                }
                                Efact_GuiaLogic.Instance.Insertar_EfactErrorLog(numerodumentoemisor, guia_id, guia_tipo, tipdocemisor, code, description, date, metodo, out flag, out Mensaje);
                                Efact_GuiaLogic.Instance.Insertar_EfactResponse(tipdocemisor, numerodumentoemisor, guia_tipo, guia_id, code, ticket, "ERROR:: GET_CDR", "", metodo, "ERROR EN SUNAT", out flag, out mensaje);

                                //MessageBox.Show(exdescription);
                                Util.ShowMessage(description, 1);

                            }
                        }
                    }
                }

            }
            return deserealizar;
        }

        //END GET CDR

        //GET PDF

        public void GET_PDF()
        {
            //LAS GUIAS SELECCIONADAS POR EL USUARIO
            //DataTable traer_Response = Efact_GuiaLogic.Instance.Traer_EFACTRESPONSE();
            string guia_tipo = txttipdoc.Text.ToString();
            string guia_numero = txtnrodocumento.Text.ToString();
            string guiaserie = txtserie.Text;
            string guia_id = guiaserie + "-" + guia_numero;
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string Guia = Logueo.RucEmpresa + "-" + guia_tipo + "-" + guia_id + ".pdf";
            try
            {
                //
                DataTable dt = Efact_GuiaLogic.Instance.Traer_EFACTRESPONSE(tipdocemisor, numerodumentoemisor, guia_tipo, guia_id);

                //data extraida de EFACT_RESPONSE

                if (dt.Rows.Count == 0)
                {
                    Util.ShowError("ERROR ::La guia no ha sido generada en SUNAT");
                    return;
                }
                string ticket = dt.Rows[0]["description"].ToString();
                //string ticket = "9fefd92b-9a30-495d-8542-8cefbfe30d72";
                string nombre_pdf = tipdocemisor + numerodumentoemisor + guia_id;

                string token = POST_TOKEN();

                DataTable ServicioDT = Efact_GuiaLogic.Instance.Traer_EFACT_SERVICIOSAPI("URL_metodo_para_obtener_el_PDF");
                string url = ServicioDT.Rows[0]["URL"].ToString() + ticket;

                ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072; //TLS 1.2
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                request.Method = "GET";
                request.Accept = "*/*";
                request.Headers.Add("Authorization", "Bearer " + token);

                using (WebResponse respuesta = request.GetResponse())
                {
                    using (Stream respuestaStream = respuesta.GetResponseStream())
                    {
                        using (StreamReader reader = new StreamReader(respuestaStream))
                        {
                            string filename = respuesta.Headers["filename"];
                            Archivo archivo = ObtenerRutaYNombre(nombre_pdf);
                            //string nombrearchivo = archivo.Nombre;
                            //string archivoruta = archivo.ruta;
                            string archivonombre = archivo.Nombre;
                            //string nombrepdf = "620420310383T111-0020624.pdf";
                            string rutaarchivo = Environment.GetEnvironmentVariable("TEMP") + "\\" + Guia;
                            using (FileStream filestream = File.Create(rutaarchivo))
                            {
                                respuestaStream.CopyTo(filestream);
                            }
                            System.Diagnostics.Process.Start(rutaarchivo);
                        }
                    }
                }


            }
            catch (WebException ex)
            {
                if (ex.Response != null)
                {
                    using (HttpWebResponse response = (HttpWebResponse)ex.Response)
                    {
                        using (Stream responseStream = response.GetResponseStream())
                        {
                            using (StreamReader reader = new StreamReader(responseStream))
                            {
                                string responseFromServer = reader.ReadToEnd();
                                string token_String = responseFromServer.ToString();
                                Code deserealizar = JsonConvert.DeserializeObject<Code>(token_String);
                                string code = deserealizar.code;
                                string description = deserealizar.description;
                                string metodo = "GET_CDR";
                                //Datetime date = DateTime.Now.ToString();
                                //string Mensaje = "";
                                //Efact_GuiaLogic.Instance.Insertar_EfactErrorLog(numerodumentoemisor, guia_id, guia_tipo, tipdocemisor, code, description, date, metodo, out flag, out Mensaje);
                                //MessageBox.Show(exdescription  );
                                if (code == "-9998")
                                {
                                    Util.ShowMessage("La guia esta en Proceso", 1);
                                }
                                else
                                {
                                    Util.ShowMessage(description, 1);
                                }
                            }
                        }
                    }
                }
            }
        }
        //END GETPDF

        protected override void OnDarBaja()
        {
            MostrarDarBajaGuiaRemision();

        }
        void cargarEntidad()
        {
            //LBLHELP7 --- DOMI PARTIDA
            //LBLHELP4 --- DESTINATARIO
            //LBLHELP5 --- DOMI DESTINO
            //LBLHELP1 --- TRANSPORTISTA
            //LBLHELP3 --- CONDUCTOR
            //LBLHELP6 --- MOTIVO

            _guia.FAC34CODEMP = Logueo.CodigoEmpresa;
            _guia.FAC01COD = txttipdoc.Text;


            _guia.FAC34NROGUIA = txtserie.Text + "-" + txtnrodocumento.Text;
            _guia.FAC34SERIEGUIA = txtserie.Text;
            _guia.FAC34CORRELATIVOGUIA = txtnrodocumento.Text;
            _guia.FAC34AA = Logueo.Anio;
            _guia.FAC34MM = Logueo.Mes;
            _guia.FAC03COD = txtsubplantilla.Text;
            _guia.FAC02COD = txtcodplantilla.Text;
            _guia.FAC03TIPART = txttipoarticulo.Text;
            _guia.FAC34FECHA = dtpFechaDoc.Value;

            _guia.FAC34ORICODEMP = txtrucorigen.Text;
            _guia.FAC34ORICODESTAB = txtcodorigen.Text;
            _guia.FAC34ORIDESESTAB = txtorigenDes.Text;
            _guia.FAC34ORIDOMPARTIDA = txtOriDirPartida.Text;
            _guia.FAC34DESCODEMP = txtrucdestino.Text;
            //lblhelp4
            _guia.FAC34DESDESEMP = txtrucdestinnoDes.Text;
            //coddestino
            _guia.FAC34DESCODESTAB = txtcoddestino.Text;
            //lblhelp5
            _guia.FAC34DESDESESTAB = txtdestinoDes.Text;
            //txtdireccion
            _guia.FAC34DESTDIRECCION = txtdireccDestino.Text;
            //rcutranportista 
            _guia.FAC34CODTRANSPORTISTA = txtRucTransportista.Text;
            //nombre transportista
            _guia.FAC34DESTRANSPORTISTA = txttransportistaDes.Text;
            //codtrayler
            _guia.FAC34TRAYCODIGO = txtCodTrayler.Text;
            //marca remolque
            _guia.FAC34TRAYMARCA = txtmarcaRemolque.Text;
            //txtplacaremolque
            _guia.FAC34TRAYPLACA = txtplacaremolque.Text;
            //txtmarcaSemiremolque
            _guia.FAC34TRAYMARCASR = txtmarcaSemiremolque.Text;
            //txtplacasemiremolque
            _guia.FAC34TRAYPLACASR = txtplacasemiremolque.Text;
            //txtcodchofer
            _guia.FAC34CHOFCOD = txtcodchofer.Text;
            //lblhelp3
            _guia.FAC34CHOFNOMBRE = txtchoferDes.Text;
            //txtbrevete
            _guia.FAC34CHOFLICCONDUCIR = txtbrevete.Text;
            //txtcodmotivo
            _guia.FAC34MOTRASLCOD = txtcodmotivo.Text;
            //lblhelp6
            _guia.FAC34MOTRASLDESC = txtmotivoDes.Text;
            //txtotros

            _guia.FAC34MOTRASLDESCEXTRA = txtotros.Text;

            //observacion
            _guia.FAC34OBSERVACION = txtobservacion.Text;
            //estado guia
            _guia.FAC34ESTADO = txtestadoguia.Text;
            //mskfechaIniTra
            _guia.FAC34FECHAINITRASLADO = dtpfechaIntra.Value.ToShortDateString();
            //txtreferencia
            _guia.FAC34REFERENCIA = txtreferencia.Text;
            _guia.FAC34CONTENEDOR = txtcontenedor.Text;
            _guia.FAC34PRECINTO = txtprecinto.Text;
            string flagprov;
            flagprov = chkflagproveedor.Checked ? "S" : "N";
            _guia.FAC34FLAGORIPROD = flagprov;

            _guia.FAC34CLICOD = txtClienteCod.Text;
            _guia.FAC34OCTIPCOD = txtTipoOCCod.Text;
            _guia.FAC34OCNRO = txtOCNumero.Text;
            _guia.FAC34ESTADOPROCESOCOD = "01";
            if (chkTrasladoM1oL.Checked == true)
            {
                _guia.FAC34INDITRASLADOVEHICATM1 = "1";
            }
            else if (chkTrasladoM1oL.Checked == false)
            {
                _guia.FAC34INDITRASLADOVEHICATM1 = "0";
            }
            if (rbtPublico.IsChecked)
            {
                _guia.FAC34MODATRASLADO = "01";
            }
            else if (rbtPrivado.IsChecked)
            {
                _guia.FAC34MODATRASLADO = "02";
            }


            if (txtcodmotivo.Text == "03")
            {
                //QUE OBTENGA DE LOS INPUTS DE PROVEEDOR                                 
                // * codigo antiguo de actualizacion
                //_guia.FAC34CODPROV = txtCodigoProv.Text.ToString().Trim();
                //_guia.FAC34DESCPROV = txtRazonSoProv.Text.ToString().Trim();
                //_guia.FAC34DIRECCPROV = txtDomiProv.Text.ToString().Trim();

                //asignar valor en blanco a estos campos y solo se guardar los datos del proveedor por el tipo de comrpar
                // se guardar los datos dle proveedor 
                _guia.FAC34CODPROV = "";
                _guia.FAC34DESCPROV = "";
                _guia.FAC34DIRECCPROV = "";
            }
            else 
            {
                _guia.FAC34CODPROV = "";
                _guia.FAC34DESCPROV = "";
                _guia.FAC34DIRECCPROV = "";
            } 
        }

        //protected override void OnNuevo() 
        //{

        //}
        protected override void OnGuardar()
        {
            try
            {
                if (!Validar())
                    return;

                cargarEntidad();

                string msj = string.Empty;
                int flag = 0;
                //Capturo doc relacionados
                GridViewRowInfo info = gridreferencial.CurrentRow;
                string[] nrodocumentos = new string[this.gridreferencial.Rows.Count];
                string Comprobante = "";
                string NroComprobante = "";


                if (gridreferencial.Rows.Count == 0)
                {
                    Comprobante = null;
                    NroComprobante = null;
                }
                else
                {


                    int x = 0;


                    foreach (GridViewRowInfo row in gridreferencial.Rows)
                    {
                        Comprobante = row.Cells["FAC90COD"].Value.ToString();
                        NroComprobante = row.Cells["FAC90DOCRELNUMERO"].Value.ToString();
                        nrodocumentos[x] = Comprobante + "|" +
                                            NroComprobante;
                        x++;
                    }
                }
                //ULTIMO LOS GUARDO EN UNA VARIABLE STRING 
                string xmldocrelacionados = Util.ConvertiraXMLdinamico(nrodocumentos);

                //

                if (Estado == FormEstate.New)
                {
                    Fac_GuiaTransporteLogic.Instance.Spu_Fact_Ins_FAC34_GUIAREMISION(_guia, xmldocrelacionados, out flag, out msj);

                    Util.ShowMessage(msj, flag);

                    //Si operacion es OK
                    if (flag == 1)
                    {
                        //Poner a modo de inicio



                        // Habilitar los botones despues de grabar

                        habilitarControles(false);
                        OcultarBotones();
                        HabilitaBotonPorNombre(BaseRegBotones.cbbNuevo);
                        HabilitaBotonPorNombre(BaseRegBotones.cbbEditar);
                        HabilitaBotonPorNombre(BaseRegBotones.cbbEliminar);
                        HabilitaBotonPorNombre(BaseRegBotones.cbbVistaPrevia);
                        HabilitaBotonPorNombre(BaseRegBotones.cbbImprimir);
                        HabilitaBotonPorNombre(BaseRegBotones.cbbGenerarFE);
                        HabilitaBotonPorNombre(BaseRegBotones.cbbVerFE);
                       // HabilitaBotonPorNombre(BaseRegBotones.cbbModificarPeso);
                        HabilitaBotonPorNombre(BaseRegBotones.cbbOnVistaGE);
                        //HabilitaBotonPorNombre(BaseRegBotones.cbbImprimir);
                        //HabilitaBotonPorNombre(BaseRegBotones.cbbImprimir);
                        btnAgregar.Enabled = true;

                        btnAgregar.Enabled = true;
                        chkTrasladoM1oL.Enabled = false;
                        rbtPrivado.Enabled = false;
                        rbtPublico.Enabled = false;
                        //btnAgregarDetPacking.Enabled = true;
                        //btnAgregarDetPacking.Visible = true;
                        //CAMPOS PROVEEDOR
                        txtCodigoProv.Enabled = false;
                        txtRazonSoProv.Enabled = false;
                        txtDomiProv.Enabled = false;
                    }


                }
                else if (Estado == FormEstate.Edit)
                {

                    Fac_GuiaTransporteLogic.Instance.Spu_Fact_Upd_FAC34_GUIAREMISION(_guia, xmldocrelacionados, out flag, out msj);

                    Util.ShowMessage(msj, flag);

                    //Si operacion es OK
                    if (flag == 1)
                    {
                        //save,cancel,preview,print,import,export,navigate
                        //HabilitarBotones(true, true, true, true, false, false, false);
                        OcultarBotones();
                        //HabilitaBotonPorNombre(BaseRegBotones.cbbEditar);
                        //HabilitaBotonPorNombre(BaseRegBotones.cbbEliminar);
                        HabilitaBotonPorNombre(BaseRegBotones.cbbNuevo);
                        HabilitaBotonPorNombre(BaseRegBotones.cbbEliminar);
                        HabilitaBotonPorNombre(BaseRegBotones.cbbEditar);
                        HabilitaBotonPorNombre(BaseRegBotones.cbbGenerarFE);
                        HabilitaBotonPorNombre(BaseRegBotones.cbbVerFE);
                        HabilitaBotonPorNombre(BaseRegBotones.cbbVistaPrevia);
                        HabilitaBotonPorNombre(BaseRegBotones.cbbImprimir);
                        HabilitaBotonPorNombre(BaseRegBotones.cbbDarBaja);
                       // HabilitaBotonPorNombre(BaseRegBotones.cbbModificarPeso);
                        HabilitaBotonPorNombre(BaseRegBotones.cbbOnVistaGE);
                        habilitarControles(false);

                        //btnAgregar.Enabled = false;
                        rbtPrivado.Enabled = false;
                        rbtPublico.Enabled = false;
                        chkTrasladoM1oL.Enabled = false;
                        Estado = FormEstate.View;
                        ////SELECCIONAR TODAS LAS FILAS Y QUE CAMBIE LOS ESTADOS DE LOS BOTONES -- 
                        foreach (GridViewRowInfo row in gridControl.Rows)
                        {
                            row.IsSelected = true;
                        }
                        btnAgregar.Enabled = false;
                        btnAgregarReferencial.Visible = false;

                        //CAMPOS PROVEEDOR
                        txtCodigoProv.Enabled = false;
                        txtRazonSoProv.Enabled = false;
                        txtDomiProv.Enabled = false;
                    }
                    if (gridControl.Rows.Count > 0) 
                    {
                        //si encuentra una fila vacia que haga el CancelarDetalle()
                        string codigo;
                        string unidadmedad;

                       //insertar detalle
                        GuardarDetalle();
                        CancelarDetalle();
                        
                    }

                }
                //este condicion es cuando solo habilito cambiar estado
                else if (Estado == FormEstate.ChangeState)
                {

                    Fac_GuiaTransporteLogic.Instance.Spu_Fact_Upd_EstadoGuia(Logueo.CodigoEmpresa,
                        _guia.FAC01COD, txtserie.Text + "-" + txtnrodocumento.Text,
                        txtestadoguia.Text, out flag, out msj);

                    Util.ShowMessage(msj, flag);
                }
                else
                {
                    Util.ShowAlert("ERROR :: No Se Encontro la Accion a Realizarse");
                }
                //gestionarBotones(true, true, true, false, false);
                //gestionarBotones(true, true, true, false, false, true, false, true, false, true);


                FrmParent.Oncargar();

                cbbGrabar.IsMouseOver = false;
                //Estado = FormEstate.View;
                //gridControl.ReadOnly = true;

                //btnRemover.Enabled = true;

                btnAgregar.Focus();
            }
            catch (Exception ex)
            {
                Util.ShowError(ex.Message.ToString());
            }
        }
        protected override void OnPrimero()
        {

            indice = 0;
            codigoGuia = FrmParent.gridControl.MasterView.Rows[indice].Cells["FAC34NROGUIA"].Value.ToString();
            cargarGuia();
            columnasxplantilla();
            cargarGuiaGrilla();

            enfocarRegistros();
        }
        protected override void OnSiguiente()
        {
            if (indice == FrmParent.gridControl.MasterView.Rows.Count - 1 ||
                indice == FrmParent.gridControl.MasterView.ChildRows.Count - 1)
                return;
            indice++;
            codigoGuia = FrmParent.gridControl.MasterView.Rows[indice].Cells["FAC34NROGUIA"].Value.ToString();

            cargarGuia();
            columnasxplantilla();
            cargarGuiaGrilla();

            enfocarRegistros();
        }
        protected override void OnAnterior()
        {

            if (indice == 0)
                return;
            indice--;
            codigoGuia = FrmParent.gridControl.MasterView.Rows[indice].Cells["FAC34NROGUIA"].Value.ToString();
            cargarGuia();
            columnasxplantilla();
            cargarGuiaGrilla();

            enfocarRegistros();
        }
        protected override void OnUltimo()
        {
            //var f = frmGuiaTransportista.Instancia();
            indice = FrmParent.gridControl.MasterView.Rows.Count - 1;
            codigoGuia = FrmParent.gridControl.MasterView.Rows[indice].Cells["FAC34NROGUIA"].Value.ToString();
            cargarGuia();
            columnasxplantilla();
            cargarGuiaGrilla();
            enfocarRegistros();
        }

        private void GuardarPackingSeleccionado(string codigoEmpresa, string numeroDocumentoPacking)
        {
            string nroGuiaTransporte = "";
            nroGuiaTransporte = txtserie.Text.Trim() + "-" + txtnrodocumento.Text.Trim();
            //txtserie.Text = guia.FAC34SERIEGUIA;
            // txtnrodocumento.Text = guia.FAC34CORRELATIVOGUIA;
            int iFlag = 0;
            string sMsg = "";
            try
            {
                GlobalLogic.Instance.InsertarDetPackingEnGuiaDet(Logueo.CodigoEmpresa, txttipdoc.Text.Trim(), nroGuiaTransporte,
                numeroDocumentoPacking, out iFlag, out sMsg);

                Util.ShowMessage(sMsg, iFlag);
                if (iFlag == 1)
                {
                    // Refrescar la gulla luego de la operacione exitosa.
                    cargarGuiaGrilla();
                }
            }
            catch (Exception ex)
            {
                Util.ShowError(ex.Message);
            }

        }
        private void CargarAyudaPackingConsumible()
        {
            frmBusqueda frm = new frmBusqueda(enmAyuda.enmPackingListDisponible, "");

            frm.ShowDialog();
            if (frm.Result != null)
            {
                if (frm.Result.ToString() != "")
                {
                    string NroDOcumentoPacking = frm.Result.ToString();

                    GuardarPackingSeleccionado(Logueo.CodigoEmpresa, NroDOcumentoPacking);
                }
            }
        }
        private void ActivarVentanaPackingConsumible(bool estadovisible)
        {

        }




        #endregion


        bool validar_fecha_vs_periodo(DateTime fecha, string periodactivo)
        {

            string mesdefecha, aniodefecha;
            //inicializo la funcion
            bool bandera = false;
            mesdefecha = fecha.Month.ToString();
            if (mesdefecha.Length == 2)
            {
                mesdefecha = fecha.Month.ToString();
            }
            else
            {
                mesdefecha = "0" + mesdefecha;
            }
            aniodefecha = fecha.Year.ToString();
            if (Convert.ToDouble(aniodefecha + mesdefecha) == Convert.ToDouble(periodactivo))
            {
                //bandera = true;
            }
            else
            {
                if (Convert.ToDouble(aniodefecha + mesdefecha) > Convert.ToDouble(periodactivo))
                {
                    MessageBox.Show("Error: Fecha no valida \n Posiblemente Sea De Un Periodo Posterior Al Periodo Actual \n DEBE CORREGIR LA FECHA PARA SEGUIR TRABAJANDO ",
                        "Sistema",
                        MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    bandera = false;
                }
                else
                {
                    if (MessageBox.Show("Error: Fecha no valida\n Posiblemente Sea De Un Periodo Anterior Al Periodo Actual\n ¿ESTA SEGURO QUE LA FECHA QUE ESTA INGRESANDO ES CORRECTA?", "Sistema", MessageBoxButtons.YesNo,
                        MessageBoxIcon.Exclamation) == System.Windows.Forms.DialogResult.Yes)
                    {
                        bandera = false;
                    }
                    else
                    {
                        bandera = true;
                    }
                }
            }
            return bandera;

        }
        void cargarGuia()
        {
            try
            {

                var lista = Fac_GuiaTransporteLogic.Instance.TraerGuiasTransporte(Logueo.CodigoEmpresa,
                    Logueo.Anio, Logueo.Mes, "FAC34NROGUIA", codigoGuia);
                txtnrodocumento.Text = "";

                if (lista.Count == 0) return;
                GuiaTransporte guia = lista[0];
                string modalidadtraslado = guia.FAC34MODATRASLADO;
                txtsubplantilla.Text = guia.FAC03COD;
                txtcodplantilla.Text = guia.FAC02COD;
                txttipdoc.Text = guia.FAC01COD;
                txtserie.Text = guia.FAC34SERIEGUIA;
                txtnrodocumento.Text = guia.FAC34CORRELATIVOGUIA;

                //  MODIFICADO
                txtUnidadMed.Text = guia.FAC34PESOUNIMED;
                txtCantidad.Text = guia.FAC34PESOCANTIDAD.ToString();
                string codigoPlantilla = Logueo.CodigoEmpresa + "09" + txtsubplantilla.Text;
                string msj = string.Empty;

                Fac_GuiaTransporteLogic.Instance.Dame_Descripcion(codigoPlantilla, "PLANTI", out msj);
                txtsubplantillaDes.Text = msj;
                txttipoarticulo.Text = guia.FAC03TIPART;
                dtpFechaDoc.Value = Convert.ToDateTime(guia.FAC34FECHA);
                if (guia.FAC34FECHAINITRASLADO != "")
                {
                    dtpfechaIntra.Value = Convert.ToDateTime(guia.FAC34FECHAINITRASLADO);
                }

                esFlagProveedorDeisi = Util.convertiracadena(guia.FAC66FLAGPROVEEDORDEISI);
                txtrucorigen.Text = guia.FAC34ORICODEMP;
                //cargar nombre de ruc origen en el evento textchange con metod obtenerDescripcion
               
                //txtrucorigenDes.Text = nomruc;
                //txtrucorigenDes.Text = guia.

                txtcodorigen.Text = guia.FAC34ORICODESTAB;
                txtorigenDes.Text = guia.FAC34ORIDESESTAB;
                txtOriDirPartida.Text = guia.FAC34ORIDOMPARTIDA;
                

                txtrucdestino.Text = guia.FAC34DESCODEMP;
                txtrucdestinnoDes.Text = guia.FAC34DESDESEMP;

                txtcoddestino.Text = guia.FAC34DESCODESTAB;
                txtdestinoDes.Text = guia.FAC34DESDESESTAB;
                txtdireccDestino.Text = guia.FAC34DESTDIRECCION;

             
                txtRucTransportista.Text = guia.FAC34CODTRANSPORTISTA;
                txttransportistaDes.Text = guia.FAC34DESTRANSPORTISTA;
                txtCodTrayler.Text = guia.FAC34TRAYCODIGO;
                txtcodtrailerDes.Text = guia.FAC34TRAYMARCA;
                txtmarcaRemolque.Text = guia.FAC34TRAYMARCA;
                txtplacaremolque.Text = guia.FAC34TRAYPLACA;
                if (guia.FAC34INDITRASLADOVEHICATM1 == "1")
                {
                    chkTrasladoM1oL.Checked = true;
                }
                else
                {
                    chkTrasladoM1oL.Checked = false;
                }

                //Opcion MOTIVO TRASLADO
                if (guia.FAC34MODATRASLADO == "02")
                {
                    rbtPrivado.IsChecked = true;
                }
                else
                {
                    rbtPublico.IsChecked = true;
                }

                txtmarcaSemiremolque.Text = guia.FAC34TRAYMARCASR;
                txtplacasemiremolque.Text = guia.FAC34TRAYPLACASR;
                txtcodchofer.Text = guia.FAC34CHOFCOD;
                txtchoferDes.Text = guia.FAC34CHOFNOMBRE;
                txtbrevete.Text = guia.FAC34CHOFLICCONDUCIR;

                txtestadoguia.Text = guia.FAC34ESTADO;
                string estadoguia = string.Empty;
                Fac_GuiaTransporteLogic.Instance.Dame_Descripcion(txtestadoguia.Text, "1022", out estadoguia);
                txtestadoguiaDes.Text = estadoguia;

                txtcodmotivo.Text = guia.FAC34MOTRASLCOD;
                txtmotivoDes.Text = guia.FAC34MOTRASLDESC;
                txtotros.Text = guia.FAC34MOTRASLDESCEXTRA;
                txtobservacion.Text = guia.FAC34OBSERVACION;
                txtreferencia.Text = guia.FAC34REFERENCIA;
                txtcontenedor.Text = guia.FAC34CONTENEDOR;
                txtprecinto.Text = guia.FAC34PRECINTO;



                chkflagproveedor.Checked = guia.FAC34FLAGORIPROD == "S" ? true : false;

                txtClienteCod.Text = guia.FAC34CLICOD;
                txtClienteDesc.Text = guia.FAC34CLIDES;
                txtTipoOCCod.Text = guia.FAC34OCTIPCOD;
                txtTipoOCDesc.Text = guia.FAC34OCTIPDES;
                txtOCNumero.Text = guia.FAC34OCNRO;
                
                // 03: motivo Compras
                if (txtcodmotivo.Text == "03")
                {
                    //PopupProveedor.Visible = true;
                    gridreferencial.Visible = false;
                    btnAgregarReferencial.Visible = false;
                    radLabel35.Visible = false;



                    //txtrucorigen.Text = guia.FAC34CODPROV;
                    //txtrucorigenDes.Text = guia.FAC34DESCPROV;
                    //txtOriDirPartida.Text = guia.FAC34DIRECCPROV;


                    /*codigo antiguoa*/
                    txtCodigoProv.Text = guia.FAC34CODPROV;
                    txtRazonSoProv.Text = guia.FAC34DESCPROV;
                    txtDomiProv.Text = guia.FAC34DIRECCPROV;
                    /*
                    
                    
                     
                     */

                }
                
                 
               
                


                // cargarGuiaDetalle();
            }
            catch (Exception ex)
            {
                Util.ShowError(ex.Message);
                cargoCabecera = false;
            }
        }
        //carga el detalle de la guia de transportista
        #region "metodo de carga"
        void columnasxplantilla()
        {
            if (txtsubplantilla.Text == "03")
            {
                //gridControl.Columns["FA35NROPIEZAS"].IsVisible = false;
                gridControl.Columns["FA35PESO"].IsVisible = false;
                gridControl.Columns["FA35NROCAJAS"].IsVisible = false;
            }
            else
            {
                //gridControl.Columns["FA35NROPIEZAS"].IsVisible = true;
                gridControl.Columns["FA35PESO"].IsVisible = true;
                gridControl.Columns["FA35NROCAJAS"].IsVisible = true;
                gridControl.Columns["FAC35CODPROD_PROV"].IsVisible = true;
                gridControl.Columns["FAC35DESCPROD_PROV"].IsVisible = true;
                gridControl.Columns["FAC35UNIMED_PROV"].IsVisible = true;
            }
        }
        void columnasSumatoria()
        {
            //sumatoria
            GridViewSummaryItem sumaPza = new GridViewSummaryItem();
            sumaPza.Name = "FA35NROPIEZAS";
            sumaPza.FormatString = "{0:###,###0.00}";
            sumaPza.Aggregate = GridAggregateFunction.Sum;

            GridViewSummaryItem sumaPeso = new GridViewSummaryItem();
            sumaPeso.Name = "FA35PESO";
            sumaPeso.FormatString = "{0:###,###0.00}";
            sumaPeso.Aggregate = GridAggregateFunction.Sum;

            GridViewSummaryItem sumaCajas = new GridViewSummaryItem();
            sumaCajas.Name = "FA35NROCAJAS";
            sumaCajas.FormatString = "{0:###,###0.00}";
            sumaCajas.Aggregate = GridAggregateFunction.Sum;

            GridViewSummaryItem sumaCantidad = new GridViewSummaryItem();
            sumaCantidad.Name = "FAC35CANTIDAD";
            sumaCantidad.FormatString = "{0:###,###0.00}";
            sumaCantidad.Aggregate = GridAggregateFunction.Sum;
            GridViewSummaryRowItem summaryRowItem = new GridViewSummaryRowItem() { sumaCantidad, sumaPza, sumaPeso, sumaCajas };
            gridControl.SummaryRowsBottom.Add(summaryRowItem);
            gridControl.MasterTemplate.ShowTotals = true;
            gridControl.MasterView.SummaryRows[0].PinPosition = PinnedRowPosition.Bottom;

        }
        void CreaColumnasReferencial()
        {
            RadGridView dgvReferencial = CreateGridVista(gridreferencial);
            CreateGridIntColumn(dgvReferencial, "Tip de Comprobante", "FAC90COD", 0, "", 50);//AYUDA 61
            CreateGridColumn(dgvReferencial, "Descrip Comprobante", "Descripcion", 0, "", 80);
            CreateGridColumn(dgvReferencial, "Nro° Comprobante", "FAC90DOCRELNUMERO", 0, "", 100, false); //editable
            CreateGridColumn(dgvReferencial, "Flag", "Flag", 0, "", 50, true, false, false, false);
            CreateGridColumn(dgvReferencial, "flagBotones", "flagBotones", 0, "", 90, true, false, false);
            Util.ResaltarAyuda(dgvReferencial, "FAC90COD");
            AddButonsToGridReferencial();

        }
        void creaColumnas()
        {
            bool bVisibleON = true, bVisibleOFF = false, bEditableON = true,
                bEditableOFF = false, bReadOnlyON = true, bReadOnlyOFF = false;
            //if (!IsLoaded) return;
            RadGridView dgv = CreateGridVista(gridControl);

            CreateGridColumn(dgv, "Codigo", "FAC35CODPROD", 0, "", 120); // AYUDA
            //CreateGridColumn(dgv, "Descripcion", "FAC35DESCPROD", 0, "", 300, false, true);
            CreateGridColumn(dgv, "Descripcion", "FAC35DESCPROD", 0, "", 300, false, true); // columna editable
            //plantilla 3 unidad y cantidad
            CreateGridColumn(dgv, "Uni.", "FAC35UNIMED", 0, "{0:#0}", 60, false, true, true); // AYUDA

            CreateGridColumn(dgv, "Cantidad", "FAC35CANTIDAD", 0, "{0:#,##0.00}", 90, false, true, true, true, "right");

            //CreateGridColumn(dgv, "Uni.Venta", "IN01UNIMEDVENTA", 0, "", 60, false, true);

            CreateGridColumn(dgv, "Piezas", "FA35NROPIEZAS", 0, "{0:#,##0.00}", 80, false, true, false, true, "right");
            CreateGridColumn(dgv, "Peso", "FA35PESO", 0, "{0:#,##0.00}", 70, false, true, true, true, "right");
            //CreateGridColumn(dgv, "Cajas", "FA35NROCAJAS", 0, "", 80, false, true, true, true, "right");
            CreateGridColumn(dgv, "cajas", "FA35NROCAJAS", 0, "{0:#,##0.00}", 80, false, true, true, true, "right");
            //todos            
            CreateGridColumn(dgv, "Cod.Prov", "FAC35CODPROD_PROV", 0, "", 100, false, true);
            CreateGridColumn(dgv, "Descrip.Prov", "FAC35DESCPROD_PROV", 0, "", 150, false, true);
            CreateGridColumn(dgv, "Uni.", "FAC35UNIMED_PROV", 0, "", 45, false, true, true); // oculto

            CreateGridColumn(dgv, "Flag", "Flag", 0, "", 50, true, false, false, false);
            CreateGridColumn(dgv, "correlativo", "FAC35CODGUIADET", 0, "", 50, true, false, false); //correlativo                
            CreateGridColumn(dgv, "flagBotones", "flagBotones", 0, "", 90, true, false, false);
            Util.ResaltarAyuda(dgv, "FAC35CODPROD");
            AddButonsToGrid();
            columnasSumatoria();

        }
        private void AddButonsToGrid()
        {
            AddCmdButtonToGrid(gridControl, "btnGrabarDet", "", "btnGrabarDet");
            AddCmdButtonToGrid(gridControl, "btnCancelarDet", "", "btnCancelarDet");
            AddCmdButtonToGrid(gridControl, "btnEliminarDet", "", "btnEliminarDet");
            AddCmdButtonToGrid(gridControl, "btnEditarDet", "", "btnEditarDet");
        }
        private void AddButonsToGridReferencial()
        {
            //AddCmdButtonToGrid(gridreferencial, "btnGrabarDet", "", "btnGrabarDet");
            //AddCmdButtonToGrid(gridreferencial, "btnCancelarDet", "", "btnCancelarDet");
            AddCmdButtonToGrid(gridreferencial, "btnEliminarDet", "", "btnEliminarDet");
            //AddCmdButtonToGrid(gridreferencial, "btnEditarDet", "", "btnEditarDet");
        }
        private void AddCmdButtonToGrid(RadGridView Grid, string NameButon, string TextButton, string ColumnGrid)
        {
            GridViewCommandColumn cmdbtn = new GridViewCommandColumn();
            cmdbtn.Name = NameButon;
            cmdbtn.HeaderText = TextButton;
            Grid.Columns.Add(cmdbtn);
            Grid.Columns[NameButon].Width = 30;

        }
        void cargarGuiaGrilla()
        {
            try
            {
                string tipoDocumento = txttipdoc.Text.Trim();
                string seriexNroocumento = txtserie.Text.Trim() + "-" + txtnrodocumento.Text.Trim();
                var detalleGuia = Fac_DetalleGuiaTranporteLogic.Instance.TraerGuiasTransporteDetalle(Logueo.CodigoEmpresa,
                    tipoDocumento, seriexNroocumento);

                if (detalleGuia.Count > 0)
                {
                    gridControl.DataSource = detalleGuia;

                }
                else if (detalleGuia.Count == 0)
                {
                    gridControl.Rows.Clear();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

        }

        private void habilitarControles(bool valor)
        {

            //cabecera
            //Inhabilitar campos de serie y nro de documento.
            //txtserie.Enabled = valor;
            txtnrodocumento.Enabled = valor;
            txtsubplantilla.Enabled = valor;
            dtpFechaDoc.Enabled = valor;
            //datos de chofer y empresa
            txtOriDirPartida.Enabled = valor;
            //txtbrevete.Enabled = valor;
            txtcodchofer.Enabled = valor;
            txtRucTransportista.Enabled = valor;
            txtrucorigen.Enabled = valor;
            txtcodorigen.Enabled = valor;

            //zona de destino
            txtrucdestino.Enabled = valor;
            txtcoddestino.Enabled = valor;
            txtCodTrayler.Enabled = valor;

            //motivo
            txtcodmotivo.Enabled = valor;
            txtotros.Enabled = valor;

            //observacion

            txtreferencia.Enabled = valor;
            //Dar de baja a observacion - Using Referencias
            txtobservacion.Visible = false;
            dtpfechaIntra.Enabled = valor;
            txtdireccDestino.Enabled = valor;

            //AQUI HABILITA CONTROL DE CHK
            chkflagproveedor.Enabled = true;
            txtestadoguia.Enabled = false;
            txtcontenedor.Enabled = valor;
            txtprecinto.Enabled = valor;

            //  Campos para packing list
            txtClienteCod.Enabled = valor;
            txtClienteDesc.Enabled = false;
            txtTipoOCCod.Enabled = valor;
            txtTipoOCDesc.Enabled = false;
            txtOCNumero.Enabled = valor;

            //Grilla parte baja
            txtCantidad.Enabled = false;
            txtUnidadMed.Enabled = false;

            //activar 
            #region "resaltar campos"
            Util.ResaltaAyudaPorEstado(txtsubplantilla);
            Util.ResaltaAyudaPorEstado(txtrucorigen);
            Util.ResaltaAyudaPorEstado(txtcodorigen);
            Util.ResaltaAyudaPorEstado(txtrucdestino);
            Util.ResaltaAyudaPorEstado(txtcoddestino);
            Util.ResaltaAyudaPorEstado(txtcodmotivo);
            Util.ResaltaAyudaPorEstado(txtClienteCod);
            Util.ResaltaAyudaPorEstado(txtTipoOCCod);
            Util.ResaltaAyudaPorEstado(txtRucTransportista);
            Util.ResaltaAyudaPorEstado(txtcodchofer);
            Util.ResaltaAyudaPorEstado(txtCodTrayler);
            Util.ResaltaAyudaPorEstado(txtestadoguia);
            #endregion
        }
        void iniciaControles(Control control)
        {
            //limpiar cuadros de texto
            foreach (Control ctrl in control.Controls)
            {

                if (ctrl is RadGroupBox || ctrl is RadPanel || ctrl is GroupBox || ctrl is Panel)
                {
                    iniciaControles(ctrl);
                }
                if (ctrl is TextBox || ctrl is RadTextBox)
                {
                    ctrl.Text = "";
                }
                if (ctrl is RadGridView)
                {
                    ((RadGridView)ctrl).DataSource = null;
                    //    ((RadGridView)ctrl).Rows.
                    ////    ((RadGridView)ctrl).Rows.Clear();

                }
                if (ctrl is RadCheckBox)
                {
                    ((RadCheckBox)ctrl).Checked = false;
                }

            }
            //nombre de la empresa
            txtrucorigen.Text = Logueo.RucEmpresa;

            string nomorigen = string.Empty;
            Fac_GuiaTransporteLogic.Instance.Dame_Descripcion("VENTAS", "1007", out nomorigen);
            txtrucorigenDes.Text = nomorigen;


            string dirPartida = string.Empty;
            Fac_GuiaTransporteLogic.Instance.Dame_Descripcion(Logueo.CodigoEmpresa + "0001", "1010", out dirPartida);
            txtOriDirPartida.Text = dirPartida;
            txtestadoguia.Text = "1";

            string help9 = string.Empty;
            Fac_GuiaTransporteLogic.Instance.Dame_Descripcion(txtestadoguia.Text, "1022", out help9);
            txtestadoguiaDes.Text = help9;

            chkflagproveedor.Checked = false;
            dtpFechaDoc.Value = DateTime.Now;
            dtpfechaIntra.Value = DateTime.Now;


            //'Cuando sea nuevo establecer como predeterminado el estado del valido
            //dtpFechaDoc.Value = DateTime.Now;
            //dtpfechaIntra.Value = DateTime.Now;

        }
        #endregion


        private void fabcGuiasTransporte_KeyUp(object sender, KeyEventArgs e)
        {
            //if (e.KeyValue == (char)Keys.Left) e.Handled = true;
            //if (e.KeyValue == (char)Keys.Right) e.Handled= true;

            //Util.SendEnter(e, sender, this);                             
        }
        public void DeshabilitarBotones()
        {

        }
        private void fabcGuiasTransporte_Load(object sender, EventArgs e)
        {
            
            OcultarDarBajaGuiaRemision();
            ContainerPeso.Hide();

            RenombrarInformacionlBoton(BaseRegBotones.cbbGenerarFE, "Generar Guia Electronica"); // Generar reporte factura
            RenombrarInformacionlBoton(BaseRegBotones.cbbVerFE, "Ver PDF Guia SUNAT"); // Enviar correo

            if (!IsLoaded) return;

            habilitarControles(false);

            if (Estado == FormEstate.New)
            {
                OnNuevo();
                Util.ResaltarAyuda(txtAyudaUnidad);
            }

            else if (Estado == FormEstate.Edit)
            {
                
                OnEditar();
                //HabilitaBotonPorNombre(BaseRegBotones.cbbModificarPeso);
                //HabilitaBotonPorNombre(BaseRegBotones.cbbOnVistaGE);


            }
            else if (Estado == FormEstate.View)
            {
                OnVer();
                btnAgregar.Enabled = false;
                btnAgregarReferencial.Visible = false;
                btnRemover.Enabled = false;
                chkTrasladoM1oL.Enabled = false;
                rbtPrivado.Enabled = false;
                rbtPublico.Enabled = false;
                txtplacaremolque.Enabled = false;
                chkflagproveedor.Enabled = false;
                //cbbVistaPrevia.IsMouseOver = true;
                cbbVistaPrevia.Focus();
                Util.ResaltarAyuda(txtAyudaUnidad);
                HabilitaBotonPorNombre(BaseRegBotones.cbbOnVistaGE);
                HabilitaBotonPorNombre(BaseRegBotones.cbbVistaPrevia);

                //PROVEEDOR
                txtCodigoProv.Enabled = false;
                txtRazonSoProv.Enabled = false;
                txtDomiProv.Enabled = false;


            }
            else if (Estado == FormEstate.ChangeState)
            {
                //HabilitarBotones(true, true, false, false, false, false, false);
                OcultarBotones();
                HabilitaBotonPorNombre(BaseRegBotones.cbbGuardar);
                HabilitaBotonPorNombre(BaseRegBotones.cbbCancelar);

                panelVehiculo.TabIndex = 0;
                txtestadoguia.Enabled = false;
                txtestadoguia.Focus();
            }

            //creamos las columnas del datagridview
            columnasxplantilla();
            CreaColumnasReferencial();
            //si enviamos un codigo de gyuia preparamos los datos de la guia
            if (!string.IsNullOrEmpty(codigoGuia))
            {
                //Cargar inputs
                cargarGuia();
                //if (Estado == FormEstate.Edit && txtcodmotivo.Text == "03")
                //{
                //    BtnProveedor.Enabled = true;
                //}
                //else 
                //{
                //    BtnProveedor.Enabled = false;
                //}
                //Carga Grilla
                cargarGuiaGrilla();
            }


            //preparamos el boton de imprimi y vista
            txtserie.Enabled = false;
            cargarDocumentoRelacional();
            //txtnrodocumento.Enabled = false;
            cargarEntidad();
        }
        //TRAER SP PARA LA GRILLA DOCUMENTO RELACIONAL
        public void cargarDocumentoRelacional()
        {
            string seriexNrodocumento = txtserie.Text.Trim() + "-" + txtnrodocumento.Text.Trim();
            string tipoDocumento = txttipdoc.Text.Trim();
            DataTable dt = Fac_GuiaTransporteLogic.Instance.Spu_Fact_Trae_DocRelacionxGui(Logueo.CodigoEmpresa, tipoDocumento, seriexNrodocumento);
            //Extraer datos del DT 
            if (dt.Rows.Count > 0)
            {

                foreach (DataRow row in dt.Rows)
                {
                    gridreferencial.Rows.AddNew();
                    string CodigoAyuda = row["FAC90DOCRELTIPDOC"].ToString();
                    string NroDocumento = row["FAC90DOCRELNUMERO"].ToString();
                    string DescripcionOut;
                    GlobalLogic.Instance.DameDescripcionFA("61" + CodigoAyuda, "CATALOGOFE", out DescripcionOut);

                    Util.SetValueCurrentCellText(gridreferencial.CurrentRow, "FAC90COD", CodigoAyuda);
                    Util.SetValueCurrentCellText(gridreferencial.CurrentRow, "Descripcion", DescripcionOut);
                    Util.SetValueCurrentCellText(gridreferencial.CurrentRow, "FAC90DOCRELNUMERO", NroDocumento);
                }

            }

        }
        
        void cmdHelp_Click(enmAyuda tipoAyuda)
        {
            List<GuiaTransporte> listaGuia;
            GuiaTransporte guiaTransportista;
            frmBusqueda frm;
            string[] datos;
            string rucTransportista = txtRucTransportista.Text.Trim();
            string codchofer = txtcodchofer.Text.Trim();
            string codigoSeleccionado = string.Empty;
            string rucdestino = txtrucdestino.Text.Trim();
            
            try
            {
                switch (tipoAyuda)
                {
                    case enmAyuda.enmUniMedGuia:
                        frm = new frmBusqueda(tipoAyuda);
                        frm.Owner = this;
                        frm.ShowDialog();
                        if (frm.Result != null)
                        {
                            datos = frm.Result.ToString().Split('|');
                            txtAyudaUnidad.Text = datos[0];
                            txtAyudaDesc.Text = datos[1];

                            //txtClienteCod.Text = datos[0];
                            //txtClienteDesc.Text = datos[1];
                            //chkflagproveedor.Checked = datos[5] == "1" ? true : false;

                        }
                        break;
                    case enmAyuda.enmSubPlantilla:

                        frm = new frmBusqueda(tipoAyuda);

                        frm.Owner = this;
                        frm.ShowDialog();

                        if (!string.IsNullOrEmpty(frm.Result.ToString()))
                            codigoSeleccionado = frm.Result.ToString();
                        List<GuiaTransporte> lista = (List<GuiaTransporte>)frm.Result;
                        if (!string.IsNullOrEmpty(lista.ToString()))
                            this.txtsubplantilla.Text = lista[0].FAC03COD;
                        txtcodplantilla.Text = lista[0].FAC02COD;
                        txttipoarticulo.Text = lista[0].FAC03TIPART;
                        txttipdoc.Text = lista[0].FAC01COD;
                        txtserie.Text = lista[0].FAC03SERIEXDEF;
                        string tipdoc = txttipdoc.Text.Trim();
                        string serie = txtserie.Text.Trim();
                        string nroGuia = string.Empty;
                        Fac_GuiaTransporteLogic.Instance.DameNroDocumentoGuia(Logueo.CodigoEmpresa, tipdoc, serie, out nroGuia);
                        txtnrodocumento.Text = nroGuia;

                        //datos de origen de la direccion de partida de la empresa.
                        string Estableciemientoxdefserie = string.Empty;
                        Fac_GuiaTransporteLogic.Instance.Dame_Descripcion(Logueo.CodigoEmpresa + txttipdoc.Text + txtserie.Text, "ESTABLECIMIENTO", out Estableciemientoxdefserie);
                        txtcodorigen.Text = Estableciemientoxdefserie;

                        //RELLENAR CAMPOS VACIOS DE CABECERA DE LA GUIA 
                       DataTable Lista = Fac_GuiaTransporteLogic.Instance.TRAE_FAC91_GUIAREMISION_VALORXDEFECTO(Logueo.CodigoEmpresa,txtserie.Text);
                       if (Lista.Rows.Count == 0)
                       {
                           return;
                       }
                        //ORIGEN
                       txtrucorigen.Text = Lista.Rows[0]["FAC91ORICODEMP"].ToString();
                       txtcodorigen.Text = Lista.Rows[0]["FAC91ORICODESTAB"].ToString();
                       //txtorigenDes.Text = Lista.Rows[0]["FAC91ORIDESESTAB"].ToString();

                        //
               
                      // txtrucorigenDes.Text = Lista.Rows[0]["FAC91ORIDESESTAB"].ToString();
                      // txtOriDirPartida.Text = Lista.Rows[0]["FAC91ORIDOMPARTIDA"].ToString();
                       txtrucdestino.Text = Lista.Rows[0]["FAC91DESCODEMP"].ToString();
                       txtcoddestino.Text = Lista.Rows[0]["FAC91DESCODESTAB"].ToString();
                       //txtdestinoDes.Text = Lista.Rows[0]["FAC91DESDESESTAB"].ToString();
                       //txtdireccDestino.Text = Lista.Rows[0]["FAC91DESTDIRECCION"].ToString();

                       txtcodmotivo.Text = Lista.Rows[0]["FAC91MOTRASLCOD"].ToString();
                       //txtmotivoDes.Text = Lista.Rows[0]["FAC91MOTRASLDESC"].ToString();

                       txtRucTransportista.Text = Lista.Rows[0]["FAC91CODTRANSPORTISTA"].ToString();
                       //txttransportistaDes.Text = Lista.Rows[0]["FAC91DESTRANSPORTISTA"].ToString();
                       txtcodchofer.Text = Lista.Rows[0]["FAC91CHOFCOD"].ToString();
                       //txtchoferDes.Text = Lista.Rows[0]["FAC91CHOFNOMBRE"].ToString();
                       //txtbrevete.Text = Lista.Rows[0]["FAC91CHOFLICCONDUCIR"].ToString();

                       txtCodTrayler.Text = Lista.Rows[0]["FAC91TRAYCODIGO"].ToString();
                       //txtcodtrailerDes.Text = Lista.Rows[0]["FAC91TRAYMARCA"].ToString();

                       //txtmarcaRemolque.Text = Lista.Rows[0]["FAC91TRAYPLACA"].ToString();
                       //txtmarcaSemiremolque.Text = Lista.Rows[0]["FAC91TRAYMARCASR"].ToString();
                        

                        break;
                    case enmAyuda.enmTransportista:
                        frm = new frmBusqueda(tipoAyuda);
                        frm.Owner = this;
                        frm.ShowDialog();

                        if (frm.Result != null)
                            txtRucTransportista.Text = ((GuiaTransporte)frm.Result).FAC34CHOFCOD;
                        txttransportistaDes.Text = ((GuiaTransporte)frm.Result).FAC34CHOFNOMBRE;

                     

                        break;
                    case enmAyuda.enmVehxTranporYchofer:

                        listaGuia = new List<GuiaTransporte>();
                        guiaTransportista = new GuiaTransporte();
                        guiaTransportista.FAC03COD = txtcodchofer.Text.Trim();
                        guiaTransportista.FAC02COD = txtRucTransportista.Text.Trim();

                        frm = new frmBusqueda(tipoAyuda, guiaTransportista);
                        frm.Owner = this;
                        frm.ShowDialog();
                        if (frm.Result != null)
                            txtCodTrayler.Text = ((GuiaTransporte)frm.Result).FAC34TRAYCODIGO;

                        //txtCodTrayler.Text = ((GuiaTransporte)frm.Result).FAC34TRAYMARCA;
                        txtmarcaRemolque.Text = ((GuiaTransporte)frm.Result).FAC34TRAYMARCA;
                        txtmarcaSemiremolque.Text = ((GuiaTransporte)frm.Result).FAC34TRAYMARCASR;
                        txtplacaremolque.Text = ((GuiaTransporte)frm.Result).FAC34TRAYPLACA;
                        txtplacasemiremolque.Text = ((GuiaTransporte)frm.Result).FAC34TRAYPLACASR;
                        txtcodtrailerDes.Text = ((GuiaTransporte)frm.Result).FAC34TRAYMARCA;
                        break;
                    case enmAyuda.enmchoferxtransportistas:

                        guiaTransportista = new GuiaTransporte();
                        guiaTransportista.FAC02COD = txtRucTransportista.Text.Trim();
                        frm = new frmBusqueda(tipoAyuda, guiaTransportista);
                        frm.Owner = this;
                        frm.ShowDialog();
                        if (frm.Result != null)
                        { 
                            this.txtcodchofer.Text = ((GuiaTransporte)frm.Result).FAC34CHOFCOD;
                            this.txtchoferDes.Text = ((GuiaTransporte)frm.Result).FAC34CHOFNOMBRE;
                            this.txtbrevete.Text = ((GuiaTransporte)frm.Result).FAC34CHOFLICCONDUCIR;
                        }


                        break;
                    case enmAyuda.enmDestinatario:
                        frm = new frmBusqueda(tipoAyuda);
                        frm.Owner = this;
                        frm.ShowDialog();
                        if (frm.Result != null)
                        {                           
                            txtrucdestino.Text = ((GuiaTransporte)frm.Result).FAC01COD;
                            txtrucdestinnoDes.Text = ((GuiaTransporte)frm.Result).FAC34DESTDIRECCION;                                                       
                        }
                        break;
                    case enmAyuda.enmdestinaEstab:
                        guiaTransportista = new GuiaTransporte();
                        guiaTransportista.FAC01COD = txtrucdestino.Text.Trim();
                        frm = new frmBusqueda(tipoAyuda, guiaTransportista);
                        frm.Owner = this;
                        frm.ShowDialog();
                        if (frm.Result != null)
                            txtcoddestino.Text = ((GuiaTransporte)frm.Result).FAC34DESCODESTAB;
                        txtdestinoDes.Text = ((GuiaTransporte)frm.Result).FAC34DESDESESTAB;
                        txtdireccDestino.Text = ((GuiaTransporte)frm.Result).FAC34DESTDIRECCION;
                        break;
                    case enmAyuda.enmMotvioDeTraslado:
                        frm = new frmBusqueda(tipoAyuda);
                        frm.Owner = this;
                        frm.ShowDialog();
                        if (frm.Result != null)
                        { 
                            txtcodmotivo.Text = ((GuiaTransporte)frm.Result).FAC34MOTRASLCOD;
                            txtmotivoDes.Text = ((GuiaTransporte)frm.Result).FAC34MOTRASLDESC;
                            esFlagProveedorDeisi =   ((GuiaTransporte)frm.Result).FAC66FLAGPROVEEDORDEISI;
                        }
                        //string flagprovDeisi = ((GuiaTransporte)frm.Result).fac34
                        //bool activarProveedorDeisi = "S" == 

                        if (txtcodmotivo.Text == "03")
                        {
                            //PopupProveedor.Visible = true;
                            gridreferencial.Visible = false;
                            btnAgregarReferencial.Visible = false;
                            radLabel35.Visible = false;

                        } else {
                            PopupProveedor.Visible = false;
                            gridreferencial.Visible = true;
                            btnAgregarReferencial.Visible = true;
                            radLabel35.Visible = true;
                            
                                //LIMPIAR LOS TXTS
                            txtCodigoProv.Text = "";
                            txtRazonSoProv.Text = "";
                            txtDomiProv.Text = "";

                        }

                        //si es otros activo el campo de txtotros
                        txtotros.Enabled = false;
                        txtotros.Text = "";
                        if (((GuiaTransporte)frm.Result).FAC66FLAGDESEXTRA == "1")
                        {
                            txtotros.Enabled = true;
                        }

                        break;
                    case enmAyuda.enmEstablecimientos:
                        if (esFlagProveedorDeisi.Equals("N"))
                        {
                            //debe traer destino de otros proveedores
                            guiaTransportista = new GuiaTransporte();
                            guiaTransportista.FAC01COD = txtrucorigen.Text.Trim();
                            frm = new frmBusqueda(enmAyuda.enmdestinaEstab, guiaTransportista);
                            
                        }
                        else
                        {
                            //debe traer dato destino de proveedor minera deisi
                            frm = new frmBusqueda(tipoAyuda);

                        }
                        frm.Owner = this;
                        frm.ShowDialog();
                        if (frm.Result != null)
                        { 
                            txtcodorigen.Text = ((GuiaTransporte)frm.Result).FAC34DESCODESTAB;
                            txtorigenDes.Text = ((GuiaTransporte)frm.Result).FAC34DESDESESTAB;
                            txtOriDirPartida.Text = ((GuiaTransporte)frm.Result).FAC34DESTDIRECCION;
                        }
                        break;


                    case enmAyuda.enmEmpresa:
                        if (esFlagProveedorDeisi.Equals("N"))
                        {

                            //debe traer datos de otros proveedores
                            frm = new frmBusqueda(enmAyuda.enmDestinatario);

                        }
                        else
                        {
                            
                            //debe traer solo la empresa minera deisi
                            frm = new frmBusqueda(tipoAyuda);

                        }

                        frm.Owner = this;
                        frm.ShowDialog();
                        if (frm.Result != null)
                        {
                            if (esFlagProveedorDeisi.Equals("N"))
                            {
                                //leer datos del registro seleccionado de destinatario (otro proveedores)
                                txtrucorigen.Text=((GuiaTransporte)frm.Result).FAC01COD;
                                txtrucorigenDes.Text = ((GuiaTransporte)frm.Result).FAC34DESTDIRECCION;
                            }
                            else {
                                //leer datos del registro seleccionado (proveedores empresa minera deisi)
                                txtrucorigen.Text = ((GuiaTransporte)frm.Result).FAC34CODEMP;
                                txtrucorigenDes.Text = ((GuiaTransporte)frm.Result).FAC34DESCODEMP;
                            }
                            
                        }
                        break;

                    case enmAyuda.enmEstados:
                        frm = new frmBusqueda(tipoAyuda);
                        frm.Owner = this;
                        frm.ShowDialog();
                        if (frm.Result != null)
                        { 
                            txtestadoguia.Text = ((GuiaTransporte)frm.Result).FAC34ESTADO;
                            txtestadoguiaDes.Text = ((GuiaTransporte)frm.Result).FAC34ESTADOLLENADO;
                        }
                        break;
                    case enmAyuda.enmFactCab_Cliente:
                        frm = new frmBusqueda(tipoAyuda, Logueo.TipoAnalisisCliente);
                        frm.Owner = this;
                        frm.ShowDialog();
                        if (frm.Result != null)
                        {
                            datos = frm.Result.ToString().Split('|');
                            txtClienteCod.Text = datos[0];
                            txtClienteDesc.Text = datos[1];
                            chkflagproveedor.Checked = datos[5] == "1" ? true : false;

                        }
                        break;
                    case enmAyuda.enmTipoOrdenCompra:
                        frm = new frmBusqueda(tipoAyuda);
                        frm.Owner = this;
                        frm.ShowDialog();
                        if (frm.Result != null)
                        {
                            datos = frm.Result.ToString().Split('|');
                            txtTipoOCCod.Text = datos[0];
                            txtTipoOCDesc.Text = datos[1];
                        }
                        break;
                    default:
                        break;
                }
                if (txtrucorigen.Text == txtRucTransportista.Text)
                {
                    rbtPrivado.IsChecked = true;
                }
                else
                {
                    rbtPublico.IsChecked = true;
                }
            }
            catch (Exception ex)
            {

            }

        }
        bool Validar()
        {

            cbbGrabar.IsMouseOver = false;
            //ADUANERA - GRILLA
            GridViewRowInfo fila = gridreferencial.CurrentRow;
            string FAC90COD = Util.GetCurrentCellText(fila, "FAC90COD");
            string FAC90DOCRELNUMERO = Util.GetCurrentCellText(fila, "FAC90DOCRELNUMERO");

            if (gridControl.Rows.Count > 0)
            {
                if (txtCantidad.Text == "0" || txtCantidad.Text == String.Empty)
                {
                    Util.ShowError("ERROR :: Ingrese Peso Bruto, para la Guia de Remision");
                    return false;
                }
            }
            if (chkTrasladoM1oL.Checked == true)
            {
                return true;
            }
            if (txtcodmotivo.Text == "12" && gridreferencial.Rows.Count == 0)
            {
                Util.ShowError("ERROR:: Para el Motivo de Exportacion se necesita un codigo de Aduana.");
                return false;
            }

            if (gridreferencial.Rows.Count == 1 && FAC90COD == "")
            {
                Util.ShowError("ERROR :: Se detecto una fila vacia , corrija para salvar los datos");
                return false;
            }

            if (gridreferencial.Rows.Count == 1 && FAC90DOCRELNUMERO == "")
            {
                Util.ShowError("ERROR :: Ingrese Numero de Comprobante");
                return false;
            }

            if (rbtPublico.IsChecked == false && rbtPrivado.IsChecked == false)
            {
                Util.ShowMessage("ERROR :: Seleccione Privado o publico", 1);
                return false;
            }

            if (txtrucorigen.Text == txtRucTransportista.Text && rbtPublico.IsChecked)
            {
                Util.ShowError("Ruc de origen es igual a Ruc del transportista, la modalidad de traslado es privada");
                return false;
            }
            if (txtrucorigen.Text != txtRucTransportista.Text && rbtPrivado.IsChecked)
            {
                Util.ShowError("Ruc de origen es diferente a Ruc de transportista, la modalidad de traslado es publica");
                return false;
            }

            if (string.IsNullOrEmpty(txtsubplantilla.Text.Trim())) { MessageBox.Show("Sub Plantilla No Valida"); txtsubplantilla.Focus(); return false; }

            if (string.IsNullOrEmpty(txttipdoc.Text.Trim())) { MessageBox.Show("Tipo de Documento No Valido"); txttipdoc.Focus(); return false; }

            if (string.IsNullOrEmpty(txtcodplantilla.Text.Trim())) { MessageBox.Show("Codigo de documento No Valido"); txtcodplantilla.Focus(); return false; }

            if (string.IsNullOrEmpty(txttipoarticulo.Text.Trim())) { MessageBox.Show("Tipo Articulo No Valido"); txttipoarticulo.Focus(); return false; }

            if (string.IsNullOrEmpty(txtserie.Text.Trim())) { MessageBox.Show("Serie No valida"); txtserie.Focus(); return false; }


            if (string.IsNullOrEmpty(txtnrodocumento.Text.Trim())) { MessageBox.Show("Numero de Documento No Valido"); txtnrodocumento.Focus(); return false; }

            if (validar_fecha_vs_periodo(dtpFechaDoc.Value, Logueo.periodo) == true)
            {
                return false;
            }
            if (dtpfechaIntra.Value < dtpFechaDoc.Value)
            {
                MessageBox.Show("Fecha de inicio traslado no puede ser menor que la fecha de la guia ");
                dtpfechaIntra.Focus();
                return false;
            }
            if (string.IsNullOrEmpty(txtrucorigen.Text.Trim())) { MessageBox.Show("Ruc de origen no valido."); txtrucorigen.Focus(); return false; }

            if (string.IsNullOrEmpty(txtrucorigenDes.Text.Trim())) { MessageBox.Show("descripcion  de origen no valido."); txtrucorigen.Focus(); }

            if (chkTrasladoM1oL.Checked == false)
            {
                if (string.IsNullOrEmpty(txtCodTrayler.Text.Trim())) { MessageBox.Show("Trayler No valido"); txtCodTrayler.Focus(); return false; }




                if (string.IsNullOrEmpty(txtcodmotivo.Text.Trim())) { MessageBox.Show("Motivo No valido"); txtcodmotivo.Focus(); return false; }


                if (string.IsNullOrEmpty(txtRucTransportista.Text.Trim())) { MessageBox.Show("Trasportista no valido"); txtRucTransportista.Focus(); return false; }

                if (string.IsNullOrEmpty(txtcoddestino.Text.Trim())) { MessageBox.Show("Establecimiento de destino No valido"); txtcoddestino.Focus(); return false; }

                if (string.IsNullOrEmpty(txtrucdestino.Text.Trim())) { MessageBox.Show("Destinatario No valido"); txtrucdestino.Focus(); return false; }

                if (string.IsNullOrEmpty(txtOriDirPartida.Text.Trim())) { MessageBox.Show("Direccion de Partida No valida"); txtOriDirPartida.Focus(); return false; }


                if (string.IsNullOrEmpty(txtplacaremolque.Text.Trim())) { MessageBox.Show("PLaca de Remolque No valida"); txtplacaremolque.Focus(); return false; }


                if (string.IsNullOrEmpty(txtmarcaRemolque.Text.Trim())) { MessageBox.Show("Marca de Remolque No Valido"); txtmarcaRemolque.Focus(); return false; }


                if (string.IsNullOrEmpty(txtbrevete.Text.Trim())) { MessageBox.Show("Brevete No Valido"); txtbrevete.Focus(); return false; }


                if (string.IsNullOrEmpty(txtcodchofer.Text.Trim())) { MessageBox.Show("Chofer No valido"); txtcodchofer.Focus(); return false; }


                if (string.IsNullOrEmpty(txtcodorigen.Text.Trim())) { MessageBox.Show("Establecimiento Origen No valido"); txtcodorigen.Focus(); return false; }

                if (string.IsNullOrEmpty(txtsubplantillaDes.Text.Trim()) || txtsubplantillaDes.Text == "???") { MessageBox.Show("plantilla no  valida"); txtsubplantilla.Focus(); return false; }


                if (string.IsNullOrEmpty(txttransportistaDes.Text.Trim()) || txttransportistaDes.Text == "???") { MessageBox.Show("Transportista No Valido"); txtRucTransportista.Focus(); return false; }


                if (string.IsNullOrEmpty(txtcodtrailerDes.Text.Trim()) || txtcodtrailerDes.Text == "???") { MessageBox.Show("Trayler No Validao"); txtCodTrayler.Focus(); return false; }


                if (string.IsNullOrEmpty(txtchoferDes.Text.Trim()) || txtchoferDes.Text == "???") { MessageBox.Show("Chofer No valido"); txtcodchofer.Focus(); return false; }


                if (string.IsNullOrEmpty(txtrucdestinnoDes.Text.Trim()) || txtrucdestinnoDes.Text == "???") { MessageBox.Show("Destinatario No Valido"); txtrucdestino.Focus(); return false; }
            }

            if (string.IsNullOrEmpty(txtdestinoDes.Text.Trim()) || txtdestinoDes.Text == "???") { MessageBox.Show("Establecimiento Destinatario No valido"); txtcoddestino.Focus(); return false; }


            if (string.IsNullOrEmpty(txtmotivoDes.Text.Trim()) || txtmotivoDes.Text == "???") { MessageBox.Show("Motivo No valido"); txtcodmotivo.Focus(); return false; }


            if (string.IsNullOrEmpty(txtorigenDes.Text.Trim()) || txtorigenDes.Text == "???") { MessageBox.Show("Establecimiento Origen No Valido No valido"); txtcodorigen.Focus(); return false; }


            if (string.IsNullOrEmpty(txtestadoguiaDes.Text.Trim()) || txtestadoguiaDes.Text == "???")
            {
                MessageBox.Show("Estado de guia No Valido No valido");
                txtestadoguia.Focus();
                return false;
            }

            // vlaidacion por venta y consignacion
            if (txtcodmotivo.Text == "01" || txtcodmotivo.Text == "04")
            {
                if (txtClienteDesc.Text == "" || txtClienteDesc.Text == "???")
                {
                    Util.ShowAlert("Cliente No Valido");
                    return false;
                }
                if (txtTipoOCDesc.Text == "" || txtTipoOCDesc.Text == "???")
                {
                    Util.ShowAlert("Ingresar tipo de orden de compra");
                    return false;
                }

                if (txtOCNumero.Text == "")
                {
                    Util.ShowAlert("Ingresar numero de orden de compra");
                    return false;
                }

            }
            // vlaidacion por el motivo de exportacion
            if (txtcodmotivo.Text == "12")
            {
                if (txtClienteDesc.Text == "" || txtClienteDesc.Text == "???")
                {
                    Util.ShowAlert("Cliente No Valido");
                    return false;
                }
                if (txtTipoOCDesc.Text == "" || txtTipoOCDesc.Text == "???")
                {
                    Util.ShowAlert("Ingresar tipo de orden de compra");
                    return false;
                }

                if (txtOCNumero.Text == "")
                {
                    Util.ShowAlert("Ingresar numero de orden de compra");
                    return false;
                }

                if (txtcontenedor.Text == "")
                {
                    Util.ShowAlert("Ingresar contenedor");
                    return false;
                }
                if (txtprecinto.Text == "")
                {
                    Util.ShowAlert("Ingresar precinto");
                    return false;
                }

            }
            if (txtcodmotivo.Text == "03")
            {
                //if (txtCodigoProv.Text == "" || txtRazonSoProv.Text == "" || txtDomiProv.Text == "")
                //{
                //    Util.ShowError("Ingresar Datos del Proveedor");
                //    return false;
                //}
            }

            //Validar si la guia esta aceptada dentro del detalle GUIA REMISION
            string guia_tipo = txttipdoc.Text.ToString();
            string tipdocemisor = "6"; //logueo.RucEmpresa;
            string numerodumentoemisor = Logueo.RucEmpresa;
            string NroGuia = txtserie.Text + "-" + txtnrodocumento.Text;

            DataTable dt = Efact_GuiaLogic.Instance.Spu_Fact_Validar_GUIAEFACT_RESPONSE(tipdocemisor, Logueo.RucEmpresa, guia_tipo, NroGuia);
            if (dt.Rows.Count == 0)
            {
                return true;
            }
            string EstadoSUNAT = dt.Rows[0]["Estado_SUNAT"].ToString();
            if (EstadoSUNAT == "ACEPTADA")
            {
                Util.ShowMessage("Validar :: NO se puede editar, guia ACEPTADA por SUNAT", 1);
                return false;
                //OcultarBotones();

                HabilitaBotonPorNombre(BaseRegBotones.cbbImprimir);
                //HabilitaBotonPorNombre(BaseRegBotones.cbbNavegacion);
                //HabilitaBotonPorNombre(BaseRegBotones.cbbCancelar);
                //HabilitaBotonPorNombre(BaseRegBotones.cbbGenerarFE);
                //HabilitaBotonPorNombre(BaseRegBotones.cbbVerFE);
                //HabilitaBotonPorNombre(BaseRegBotones.cbbDarBaja);
                //HabilitaBotonPorNombre(BaseRegBotones.cbbDarBajaFE);
                //HabilitaBotonPorNombre(BaseRegBotones.cbbDarBajaFE);
                //HabilitaBotonPorNombre(BaseRegBotones.cbbModificarPeso);
                //HabilitaBotonPorNombre(BaseRegBotones.cbbOnVistaGE);
                //return;


            }

            return true;
        }

        private void obtenerDescripcion(enmAyuda tipoAyuda, string codigo)
        {
            if (!IsLoaded) return;
            try
            {
                string descripcion = string.Empty;
                string filtro = "";
                DataRow[] dr;
                switch (tipoAyuda)
                {
                    case enmAyuda.enmSubPlantilla:

                        txtsubplantillaDes.Text = string.Empty;
                        var subplantilla = Fac_GuiaTransporteLogic.Instance.Spu_Fact_Help_FAC03_SUBPLANTILLA(Logueo.CodigoEmpresa,
                                            "09", "FAC03COD", "*", "");
                        filtro = "FAC03COD = '" + txtsubplantilla.Text + "'";
                        dr = subplantilla.Select(filtro);
                        if (dr.Length == 0)
                        {
                            txtserie.Text = "???"; txtnrodocumento.Text = "???";
                            txtsubplantillaDes.Text = "???";
                            return;
                        }
                        txtsubplantilla.Text = dr[0]["FAC03COD"] == null ? "" : dr[0]["FAC03COD"].ToString();
                        txtsubplantillaDes.Text = dr[0]["FAC03DESC"] == null ? "" : dr[0]["FAC03DESC"].ToString();
                        txttipoarticulo.Text = dr[0]["FAC03TIPART"] == null ? "" : dr[0]["FAC03TIPART"].ToString();
                        txttipdoc.Text = dr[0]["FAC01COD"] == null ? "" : dr[0]["FAC01COD"].ToString();
                        txtserie.Text = dr[0]["FAC03SERIEXDEF"] == null ? "" : dr[0]["FAC03SERIEXDEF"].ToString();
                        string nroguia = string.Empty;
                        Fac_GuiaTransporteLogic.Instance.DameNroDocumentoGuia(Logueo.CodigoEmpresa, txttipdoc.Text, txtserie.Text, out nroguia);
                        txtnrodocumento.Text = nroguia;

                        break;

                    case enmAyuda.enmVehxTranporYchofer:
                        var vehxTransporychofer = Fac_GuiaTransporteLogic.Instance.Spu_Fact_Help_VehxTranporYchofer(Logueo.CodigoEmpresa,
                          txtRucTransportista.Text, txtcodchofer.Text);
                        filtro = "FAC69codigo = '" + txtCodTrayler.Text + "'";
                        dr = vehxTransporychofer.Select(filtro);
                        if (dr.Length == 0)
                        {
                            txtcodtrailerDes.Text = "???";
                            txtmarcaSemiremolque.Text = "???";
                            txtmarcaRemolque.Text = "???";
                            txtplacaremolque.Text = "???";
                            txtplacasemiremolque.Text = "???";
                            return;
                        }
                        txtcodtrailerDes.Text = dr[0]["FAC69MarcaRemolque"] == null ? "" : dr[0]["FAC69MarcaRemolque"].ToString();
                        txtmarcaSemiremolque.Text = dr[0]["FAC69MarcaSemiRemolque"] == null ? "" : dr[0]["FAC69MarcaSemiRemolque"].ToString();
                        txtplacaremolque.Text = dr[0]["FAC69PlacaRemolque"] == null ? "" : dr[0]["FAC69PlacaRemolque"].ToString();
                        txtplacasemiremolque.Text = dr[0]["FAC69PlacaSemiRemolque"] == null ? "" : dr[0]["FAC69PlacaSemiRemolque"].ToString(); txtmarcaRemolque.Text = dr[0]["FAC69MarcaRemolque"] == null ? "" : dr[0]["FAC69MarcaRemolque"].ToString();
                        break;

                    case enmAyuda.enmTransportista:
                        var Transportista = Fac_GuiaTransporteLogic.Instance.Spu_Fact_Help_FAC60_TRANSPORTISTA(Logueo.CodigoEmpresa,
                        "", "*");

                        filtro = "FAC60Codigo = '" + txtRucTransportista.Text + "'";
                        dr = Transportista.Select(filtro);
                        if (dr.Length == 0)
                        {
                            txttransportistaDes.Text = "???";
                            return;
                        }
                        txttransportistaDes.Text = dr[0]["FAC60Nombre"] == null ? "" : dr[0]["FAC60Nombre"].ToString();

                        break;

                    case enmAyuda.enmchoferxtransportistas:
                        string rucTransportista = txtRucTransportista.Text;
                        var choferxtransportistas = Fac_GuiaTransporteLogic.Instance.Spu_Fact_Help_choferxtransportistas(Logueo.CodigoEmpresa,
                            rucTransportista);
                        filtro = "FAC61Codigo = '" + txtcodchofer.Text + "'";
                        dr = choferxtransportistas.Select(filtro);
                        if (dr.Length == 0)
                        {
                            txtchoferDes.Text = "???";
                            txtbrevete.Text = "???";
                            return;
                        }
                        txtchoferDes.Text = dr[0]["FAC61Nombres"] == null ? "" : dr[0]["FAC61Nombres"].ToString();
                        txtbrevete.Text = dr[0]["FAC61Brevete"] == null ? "" : dr[0]["FAC61Brevete"].ToString();
                        break;

                    case enmAyuda.enmDestinatario:
                        var DESTINATARIO = Fac_GuiaTransporteLogic.Instance.Spu_Fact_Help_FAC64_DESTINATARIO(Logueo.CodigoEmpresa,
                     "FAC64CODIGO", "*");
                        filtro = "FAC64CODIGO = '" + txtrucdestino.Text + "'";
                        dr = DESTINATARIO.Select(filtro);
                        if (dr.Length == 0)
                        {
                            txtrucdestinnoDes.Text = "???";

                            return;
                        }
                        txtrucdestino.Text = dr[0]["FAC64CODIGO"] == null ? "" : dr[0]["FAC64CODIGO"].ToString();

                        txtrucdestinnoDes.Text = dr[0]["FAC64NOMBRE"] == null ? "" : dr[0]["FAC64NOMBRE"].ToString();
                        break;

                    case enmAyuda.enmdestinaEstab:
                        string rucdestino = this.txtrucdestino.Text;
                        var DESTINARIOESTAB = Fac_GuiaTransporteLogic.Instance.TraerDestinatarioDireccion(Logueo.CodigoEmpresa, rucdestino,
                            "come05sedesCliente", txtcoddestino.Text.Trim());
                        filtro = "FAC65CODEST = '" + txtcoddestino.Text + "'";


                        dr = DESTINARIOESTAB.Select(filtro);
                        if (dr.Length == 0)
                        {
                            txtdestinoDes.Text = "???";
                            txtdireccDestino.Text = "???";
                            return;
                        }
                        txtcoddestino.Text = dr[0]["FAC65CODEST"] == null ? "" : dr[0]["FAC65CODEST"].ToString();
                        txtdestinoDes.Text = dr[0]["FAC65DESEST"] == null ? "" : dr[0]["FAC65DESEST"].ToString();
                        txtdireccDestino.Text = dr[0]["FAC65DIRECCION"] == null ? "" : dr[0]["FAC65DIRECCION"].ToString();

                        break;

                    case enmAyuda.enmMotvioDeTraslado:
                        var MOTIVODETRASLADO = Fac_GuiaTransporteLogic.Instance.Spu_Fact_Help_FAC66_MOTIVODETRASLADO("FAC66CODMOTIVO", "*");
                        filtro = "FAC66CODMOTIVO = '" + txtcodmotivo.Text + "'";
                        dr = MOTIVODETRASLADO.Select(filtro);
                        if (dr.Length == 0)
                        {
                            txtotros.Text = "";
                            txtmotivoDes.Text = "???";
                            return;
                        }
                        txtcodmotivo.Text = dr[0]["FAC66CODMOTIVO"] == null ? "" : dr[0]["FAC66CODMOTIVO"].ToString();
                        txtmotivoDes.Text = dr[0]["FAC66DESMOTIVO"] == null ? "" : dr[0]["FAC66DESMOTIVO"].ToString();
                        esFlagProveedorDeisi = dr[0]["FAC66FLAGPROVEEDORDEISI"] == null ? "" : dr[0]["FAC66FLAGPROVEEDORDEISI"].ToString();
                        //si es otros activo el campo de txtotros
                        txtotros.Enabled = false;
                        txtotros.Text = "";
                        if (txtcodmotivo.Text == "14")
                        {
                            txtotros.Enabled = true;
                        }
                        break;
                    case enmAyuda.enmEmpresa:
                        if (esFlagProveedorDeisi.Equals("N"))
                        {
                            //          DESTINATARIO = Fac_GuiaTransporteLogic.Instance.Spu_Fact_Help_FAC64_DESTINATARIO(Logueo.CodigoEmpresa,
                            //"FAC64CODIGO", "*");
                            //         filtro = "FAC64CODIGO = '" + txtrucorigen.Text + "'";

                            List<CuentaCorriente> registrosCtaCte =  CuentaCorrienteLogic.Instance.Glo_Traer_CuentasCorrientes(Logueo.CodigoEmpresa,
                                        "15", "ccm02cod");
                            //filtro = " ccm02cod='" + txtrucorigen.Text.Trim() + "'";
                            //registrosCtaCte.Select(x => x.ccm02cod.Equals(txtrucorigen.Text.Trim()));
                            CuentaCorriente resultadoCtaCte = registrosCtaCte.FirstOrDefault(x => x.ccm02cod.Equals(txtrucorigen.Text.Trim()));
                            if (resultadoCtaCte == null) {
                                txtrucorigenDes.Text = "???";
                            }
                            else
                            {
                                txtrucorigenDes.Text = resultadoCtaCte.ccm02nom;

                            }


                        }
                        else
                        {
                            //completar datos con empresa deisi
                            var dataEmpresa = Fac_GuiaTransporteLogic.Instance.Spu_Fact_Help_empresa(Logueo.nombreModulo,
                            "Ruc", "*");
                            filtro = " Ruc='" + txtrucorigen.Text + "'";
                            dr = dataEmpresa.Select(filtro);
                            if (dr.Length == 0)
                            {
                                txtrucorigenDes.Text = "???";
                                return;
                            }
                            txtrucorigen.Text = dr[0]["Ruc"] == null ? "" : dr[0]["Ruc"].ToString();
                            txtrucorigenDes.Text = dr[0]["Nombre"] == null ? "" : dr[0]["Nombre"].ToString();
                           
                        }
                        break;
                    case enmAyuda.enmEstablecimientos:
                        var ESTABLECIMIENTOS = Fac_GuiaTransporteLogic.Instance.Spu_Fact_Help_FAC63_ESTABLECIMIENTOS(Logueo.CodigoEmpresa,
                       "FAC63CODESTAB", "*");
                        filtro = "FAC63CODESTAB = '" + txtcodorigen.Text + "'";
                        dr = ESTABLECIMIENTOS.Select(filtro);
                        if (dr.Length == 0)
                        {
                            txtorigenDes.Text = "???";

                            txtOriDirPartida.Text = "???";
                            return;
                        }
                        txtcodorigen.Text = dr[0]["FAC63CODESTAB"] == null ? "" : dr[0]["FAC63CODESTAB"].ToString();
                        txtorigenDes.Text = dr[0]["FAC63DESESTAB"] == null ? "" : dr[0]["FAC63DESESTAB"].ToString();
                        txtOriDirPartida.Text = dr[0]["FAC63DIRESTAB"] == null ? "" : dr[0]["FAC63DIRESTAB"].ToString();

                        break;

                    default:
                        break;
                }
            }
            catch (Exception ex)
            {

            }

        }

        #region "eventos Grilla"
        private void gridControl_KeyDown(object sender, KeyEventArgs e)
        {
            if (this.gridControl.RowCount == 0)
                return;
            if (Util.GetCurrentCellText(gridControl.CurrentRow, "flag") == "") return;

            try
            {

                if (e.KeyCode == Keys.F1)
                {


                    string datos = "";
                    frmBusqueda frm;

                    if (Util.IsCurrentColumn(gridControl.CurrentColumn, "FAC35CODPROD"))
                    {

                        GridViewRowInfo fila = gridControl.CurrentRow;
                        object opcionarti;
                        string tipo = txttipoarticulo.Text;
                        string salida = string.Empty;

                        if (chkflagproveedor.Checked)
                        {
                            opcionarti = "PROV" + txtClienteCod.Text;
                        }
                        else
                        {
                            Fac_GuiaTransporteLogic.Instance.Dame_Descripcion("13" + tipo, "GLODESCCOM", out salida);
                            opcionarti = salida;
                        }

                        frm = new frmBusqueda(enmAyuda.enmBuscaArti, opcionarti);
                        frm.ShowDialog();

                        if (frm.Result != null && frm.Result.ToString() != "")
                        {
                            var info = gridControl.CurrentRow;
                            info.Cells["FAC35CODPROD"].Value = ((DetalleGuiaTransporte)frm.Result).FAC35CODPROD;
                            info.Cells["FAC35DESCPROD"].Value = ((DetalleGuiaTransporte)frm.Result).FAC35DESCPROD;
                            info.Cells["FAC35UNIMED"].Value = ((DetalleGuiaTransporte)frm.Result).FAC35UNIMED;
                            info.Cells["FAC35CODPROD_PROV"].Value = ((DetalleGuiaTransporte)frm.Result).FAC35CODPROD_PROV;
                            info.Cells["FAC35DESCPROD_PROV"].Value = ((DetalleGuiaTransporte)frm.Result).FAC35DESCPROD_PROV;
                            info.Cells["FAC35UNIMED_PROV"].Value = ((DetalleGuiaTransporte)frm.Result).FAC35UNIMED_PROV;
                            //info.Cells["FAC35UNIMED"].Value = ((DetalleGuiaTransporte)frm.Result).IN01UNIMEDVENTA;
                            info.Cells["FAC35CANTIDAD"].Value = 0;
                            info.Cells["FA35NROPIEZAS"].Value = 0;
                            info.Cells["FA35PESO"].Value = 0;
                            info.Cells["FA35NROCAJAS"].Value = 0;

                        }



                    }
                    if (Util.IsCurrentColumn(gridControl.CurrentColumn, "FAC35UNIMED"))
                    {
                        string codigoUnidadMedida = "";
                        frm = new frmBusqueda(enmAyuda.enmUniMed);
                        frm.ShowDialog();
                        if (frm.Result == null) return;
                        if (frm.Result.ToString() == "") return;
                        codigoUnidadMedida = frm.Result.ToString().Split('|')[0];
                        Util.SetValueCurrentCellText(gridControl.CurrentRow, "FAC35UNIMED", codigoUnidadMedida);
                    }

                }
            }
            catch (Exception ex)
            {
                Util.ShowError(ex.Message);
            }

        }
        private void gridControl_CellBeginEdit(object sender, GridViewCellCancelEventArgs e)
        {
            string str_flag = "";
            try
            {
                // tomar valor de flag
                if (e.Row != null) str_flag = Util.GetCurrentCellText(e.Row, "Flag");



                /*------------------------------------------------------------------*/
                // Si el flag no tiene valor cancelar la edicion
                if (str_flag == "")
                {
                    e.Cancel = true;
                }
                else
                {// Si Valor de Insercion(nuevo registro) -- 1 o Valor de Actualizacion (registro existe) -- 0 

                    if (str_flag == "0" || str_flag == "1")
                    {

                        if (Util.IsCurrentColumn(e.Column, "FAC35CODPROD")
                            //|| Util.IsCurrentColumn(e.Column, "FAC35UNIMED")
                            )
                        {
                            // Deshabiltiar edicion para campo codigo de producto
                            e.Cancel = true;
                        }

                        //if (Util.IsCurrentColumn(e.Column, "FAC35DESCPROD"))
                        //{
                        //if (txtsubplantilla.Text != "03")
                        //{
                        //e.Cancel = true;
                        //}
                        //}
                    }
                    /*---------------------------------------------------------------------*/
                }


            }
            catch (Exception ex)
            {
                Util.ShowError(ex.Message);
            }

        }

        private void gridControl_CellEndEdit(object sender, GridViewCellEventArgs e)
        {
            //if (e.Column.Name.CompareTo("FAC35CANTIDAD") == 0 || e.Column.Name.CompareTo("FAC35UNIMED") == 0
            //    || e.Column.Name.CompareTo("FA35NROPIEZAS") == 0 || e.Column.Name.CompareTo("FA35PESO") == 0
            //    || e.Column.Name.CompareTo("FA35NROCAJAS") == 0)
            //{

            //    GuardarDetalle(this.gridControl.CurrentRow);
            //    gridControl.CurrentRow.Cells["Flag"].Value = "";

            //}

        }
        private void GuardarDetalle(GridViewRowInfo info)
        {
            try
            {

                tipdoc = txttipdoc.Text;
                nrodoc = txtserie.Text + "-" + txtnrodocumento.Text;

                string codigo = info.Cells["FAC35CODPROD"].Value == null ? "" : info.Cells["FAC35CODPROD"].Value.ToString();
                if (codigo == "") 
                {
                    return;
                }
                string nombre = info.Cells["FAC35DESCPROD"].Value.ToString();
                string unidad = info.Cells["FAC35UNIMED"].Value.ToString();

                float cantidad = float.Parse(info.Cells["FAC35CANTIDAD"].Value.ToString());
                float nropiezas = float.Parse(info.Cells["FA35NROPIEZAS"].Value.ToString());
                float peso = float.Parse(info.Cells["FA35PESO"].Value.ToString());
                float nrocajas = float.Parse(info.Cells["FA35NROCAJAS"].Value.ToString());
                string codprod_pv = info.Cells["FAC35CODPROD_PROV"].Value == null ? "" : info.Cells["FAC35CODPROD_PROV"].Value.ToString();
                string desprod_pv = info.Cells["FAC35DESCPROD_PROV"].Value == null ? "" : info.Cells["FAC35DESCPROD_PROV"].Value.ToString();
                string unimed_pv = info.Cells["FAC35UNIMED_PROV"].Value == null ? "" : info.Cells["FAC35UNIMED_PROV"].Value.ToString();
                string salida = string.Empty;
                int flag = 0;
                // Flag para insertar un  detalle de guia de transporte
                if (Util.GetCurrentCellText(info, "Flag") == "0")
                {
                    int correlativo;
                    Fac_GuiaTransporteLogic.Instance.Spu_Fact_Ins_FAC35_DETGUIA(Logueo.CodigoEmpresa, tipdoc, nrodoc,
                                                        out correlativo, codigo, nombre, unidad, cantidad, nropiezas,
                                                        peso, nrocajas, codprod_pv, desprod_pv, unimed_pv, out flag,
                                                        out salida);

                    info.Cells["FAC35CODGUIADET"].Value = correlativo;

                    //ENFOCAR A LA PRIMERA CASILLA
                    Util.ShowMessage(salida, flag);

                    if (flag == 1)
                    {
                        Actualizar_CantidadUnidadMedida(nrodoc);
                        CancelarDetalle();
                        //Agregar nueva fila luego de grabar 
                        btnAgregar_Click(null, null);
                    }
                }// Flag para actualizar un  detalle de guia de transporte
                else if (Util.GetCurrentCellText(info, "Flag") == "1")
                {
                    int varCorrelativo = Convert.ToInt32(info.Cells["FAC35CODGUIADET"].Value);

                    int correlativo = Convert.ToInt32(info.Cells["FAC35CODGUIADET"].Value);
                    correlativo = varCorrelativo == 0 ? gridControl.Rows.Count : varCorrelativo;

                    Fac_GuiaTransporteLogic.Instance.Spu_Fact_Upd_FAC35_DETGUIA(Logueo.CodigoEmpresa, tipdoc, nrodoc,
                                            correlativo, codigo, nombre, unidad, cantidad, nropiezas, peso, nrocajas,
                                            codprod_pv, desprod_pv, unimed_pv, out flag, out salida);

                    Util.ShowMessage(salida, flag);
                    if (flag == 1)
                    {
                        Actualizar_CantidadUnidadMedida(nrodoc);
                        CancelarDetalle();
                    }

                }


            }
            catch (Exception ex)
            {
                Util.ShowError(ex.Message);
            }

            //cargarGuiaGrilla();
            btnAgregar.Visible = true;
            btnAgregarDetPacking.Visible = true;
            //HabilitarBotones(true, true, true, true, false, false, false);
            //OcultarBotones();
            //HabilitaBotonPorNombre(BaseRegBotones.cbbGuardar);
            //HabilitaBotonPorNombre(BaseRegBotones.cbbCancelar);
            //HabilitaBotonPorNombre(BaseRegBotones.cbbVistaPrevia);
            //HabilitaBotonPorNombre(BaseRegBotones.cbbImprimir);
            //HabilitaBotonPorNombre(BaseRegBotones.cbbGenerarFE);
            //HabilitaBotonPorNombre(BaseRegBotones.cbbVerFE);
            //HabilitaBotonPorNombre(BaseRegBotones.cbbModificarPeso);

        }
        private void GuardarDetalle()
        {
            GuardarDetalle(gridControl.CurrentRow);
        }
        private void CancelarDetalle()
        {
            cargarGuiaGrilla();

        }

        #endregion

        private void dtpFechaDoc_ValueChanged(object sender, EventArgs e)
        {
            if (Estado == FormEstate.New)
            {
                dtpfechaIntra.Value = dtpFechaDoc.Value;
            }
        }
        protected override void OnVistaGE()
        {
            string tipodocumento = txttipdoc.Text;
            string numerooguia = txtserie.Text + "-" + txtnrodocumento.Text;

            var codigosSeleccionados = new string[1];
            codigosSeleccionados[0] = tipodocumento + numerooguia;
            string hola = codigosSeleccionados[0];
            DataTable datosGuia = Efact_GuiaLogic.Instance.Traer_GuiaElectronica(Logueo.CodigoEmpresa, Util.ConvertiraXML(codigosSeleccionados));
            // string tranpostistamotivo =  datosGuia.Rows[0]["Transportista_motivo"].ToString();
            if (datosGuia.Rows.Count == 0)
            {

                Util.ShowAlert("Debe ingresar detalle a la Guia de Transporte");
                return;
            }


            Reporte reporte = new Reporte("Guia");
            reporte.Ruta = Logueo.GetRutaReporte();

            string codigoplantilla = txtcodplantilla.Text;

            reporte.Nombre = "RptGuiaRemision.rpt";
            //if (txtcodplantilla.Text == "11")
            //{
            //    //Guia remision GUIA ELECTRONICA

            //      reporte.Nombre = "RptGuiaRemision.rpt";

            //    //reporte.Nombre = "RptGuiasExportacion.rpt";
            //}

            //else if (txtcodplantilla.Text == "12")
            //{

            //        reporte.Nombre = "RptGuiaRemision.rpt";

            //    //reporte.Nombre = "RptGuiasNacional.rpt";
            //}
            //else if (txtcodplantilla.Text == "13")
            //{

            //        reporte.Nombre = "RptGuiaRemision.rpt";

            //    //reporte.Nombre = "RptGuiasObras.rpt";
            //}
            //else
            //{
            //    reporte.Nombre = "RptGuiaRemision.rpt";
            // //   reporte.Nombre = "RptGuiasNacional.rpt";
            //}

            //LLENA LA GRILLA - REPORTE
            reporte.DataSource = datosGuia;
            ReporteControladora control = new ReporteControladora(reporte);
            if (esVista)
            {
                control.VistaPrevia(enmWindowState.Normal);
            }
            else
            {
                control.Imprimir();
            }
            esVista = true;

        }
        protected override void OnVista()
        {

            string tipodocumento = txttipdoc.Text;
            string numerooguia = txtserie.Text + "-" + txtnrodocumento.Text;

            var codigosSeleccionados = new string[1];
            codigosSeleccionados[0] = tipodocumento + numerooguia;

            DataTable datosGuia = Fac_GuiaTransporteLogic.Instance.Spu_Fact_Rep_Guias(Logueo.CodigoEmpresa,
                                                                                     Util.ConvertiraXML(codigosSeleccionados));

            // DataTable datosGuia = Efact_GuiaLogic.Instance.Traer_GuiaElectronica(Logueo.CodigoEmpresa, Util.ConvertiraXML(codigosSeleccionados));
            //string tranpostistamotivo =  datosGuia.Rows[0]["Transportista_motivo"].ToString();
            if (datosGuia.Rows.Count == 0)
            {
                Util.ShowAlert("Debe ingresar detalle a la Guia de Transporte");
                return;
            }

            Reporte reporte = new Reporte("Guia");
            reporte.Ruta = Logueo.GetRutaReporte();

            string codigoplantilla = txtcodplantilla.Text;

            if (txtcodplantilla.Text == "11")
            {
                //Guia remision GUIA ELECTRONICA
                reporte.Nombre = "RptGuiasExportacion.rpt";
                //if (tranpostistamotivo == "PUBLICO")
                //{
                //    reporte.Nombre = "RptGuiaRemision.rpt";

                //}
                //else 
                //{
                //    reporte.Nombre = "RptGuiaRemisionPrivada.rpt";
                //}
                //reporte.Nombre = "RptGuiasExportacion.rpt";
            }

            else if (txtcodplantilla.Text == "12")
            {
                //if (tranpostistamotivo == "PUBLICO")
                //{
                //    reporte.Nombre = "RptGuiaRemision.rpt";
                //}
                //else
                //{
                //    reporte.Nombre = "RptGuiaRemisionPrivada.rpt";
                //}
                reporte.Nombre = "RptGuiasNacional.rpt";
            }
            else if (txtcodplantilla.Text == "13")
            {
                //if (tranpostistamotivo == "PUBLICO")
                //{
                //    reporte.Nombre = "RptGuiaRemision.rpt";
                //}
                //else
                //{
                //    reporte.Nombre = "RptGuiaRemisionPrivada.rpt";
                //}
                reporte.Nombre = "RptGuiasObras.rpt";
            }
            else
            {
                reporte.Nombre = "RptGuiasNacional.rpt";
            }

            //LLENA LA GRILLA - REPORTE
            reporte.DataSource = datosGuia;
            ReporteControladora control = new ReporteControladora(reporte);
            if (esVista)
            {
                control.VistaPrevia(enmWindowState.Normal);
            }
            else
            {
                control.Imprimir();
            }
            esVista = true;

        }
        protected override void OnImprimir()
        {
            esVista = false;
            OnVista();

        }
        protected override void OnModificarPeso()
        {
            ContainerPeso.Show();
            Util.ResaltarAyuda(txtAyudaUnidad);
        }
        #region "eventos cajas"

        private void txtClienteCod_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == (char)Keys.F1)
            {
                cmdHelp_Click(enmAyuda.enmFactCab_Cliente);
                //columnasxplantilla();

            }
        }
        private void txtTipoOCCod_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == (char)Keys.F1)
            {
                cmdHelp_Click(enmAyuda.enmTipoOrdenCompra);
            }
        }
        private void txtsubplantilla_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == (char)Keys.F1)
            {
                cmdHelp_Click(enmAyuda.enmSubPlantilla);
                columnasxplantilla();

            }
        }
        private void txtcodchofer_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == (char)Keys.F1)
            {
                cmdHelp_Click(enmAyuda.enmchoferxtransportistas);

            }
        }

        private void txtrucorigen_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == (char)Keys.F1)
            {

                //ayuda para traer proveedor oriden mienra deisi
                cmdHelp_Click(enmAyuda.enmEmpresa);
                //esFlagProveedorDeisi
            }
        }

        private void txtCodTrayler_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == (char)Keys.F1)
            {
                cmdHelp_Click(enmAyuda.enmVehxTranporYchofer);
            }
        }

        private void txtestadoguia_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == (char)Keys.F1)
            {
                cmdHelp_Click(enmAyuda.enmEstados);
            }
        }

        private void txtrucdestino_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == (char)Keys.F1)
            {
                cmdHelp_Click(enmAyuda.enmDestinatario);
            }
        }

        private void txtcodmotivo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == (char)Keys.F1)
            {
                cmdHelp_Click(enmAyuda.enmMotvioDeTraslado);

            }
        }

        private void txtRucTransportista_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == (char)Keys.F1)
            {
                cmdHelp_Click(enmAyuda.enmTransportista);
            }
        }

        private void txtcoddestino_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == (char)Keys.F1)
            {
                cmdHelp_Click(enmAyuda.enmdestinaEstab);
            }
        }

        private void txtcodorigen_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == (char)Keys.F1)
            {
                cmdHelp_Click(enmAyuda.enmEstablecimientos);
            }
        }


        private void txtsubplantilla_TextChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtsubplantilla.Text) && txtsubplantilla.Text.Length == 2)
            {
                obtenerDescripcion(enmAyuda.enmSubPlantilla, txtsubplantilla.Text);
            }
            else
            {
                txtsubplantillaDes.Text = "";

                txtnrodocumento.Text = "";
                txtserie.Text = "";

            }
            columnasxplantilla();
        }

        private void txtRucTransportista_TextChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtRucTransportista.Text))
            {
                obtenerDescripcion(enmAyuda.enmTransportista, "");
            }
            else
            {
                txttransportistaDes.Text = "";
                txtcodchofer.Text = "";
                txtCodTrayler.Text = "";
            }

        }
        private void txtCodTrayler_TextChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtCodTrayler.Text))
            {
                obtenerDescripcion(enmAyuda.enmVehxTranporYchofer, "");
            }
            else
            {
                txtcodtrailerDes.Text = "";
                txtmarcaRemolque.Text = "";
                txtmarcaSemiremolque.Text = "";
                txtplacaremolque.Text = "";
                txtplacasemiremolque.Text = "";
            }
        }

        private void txtcodchofer_TextChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtcodchofer.Text))
            {
                obtenerDescripcion(enmAyuda.enmchoferxtransportistas, "");
            }
            else
            {
                txtchoferDes.Text = "";
                txtbrevete.Text = "";
            }
        }

        private void txtcoddestino_TextChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtcoddestino.Text))
            {
                obtenerDescripcion(enmAyuda.enmdestinaEstab, "");
            }
            else
            {
                txtdestinoDes.Text = "";
                txtdireccDestino.Text = "";
            }
        }

        private void txtcodmotivo_TextChanged(object sender, EventArgs e)
        {
            //1.Si campo de codigo de motivo no esta en blanco
            if (!string.IsNullOrEmpty(txtcodmotivo.Text))
            {
                //HabilitarCamposExtraPorMotivo(txtcodmotivo.Text.Trim());
                //2.Obtener la descripcion de codigo de motivo ingresado
                obtenerDescripcion(enmAyuda.enmMotvioDeTraslado, "");
                string descripcion = "";
                string ClienteDesc = "";
                string ClienteFlagDescUsuario = "";

                // Inicializo datos de cliente
                txtClienteCod.Text = "";
                txtClienteDesc.Text = "";
                chkflagproveedor.Checked = false;

                // Inicializo datos OC
                txtTipoOCCod.Text = "";
                txtTipoOCDesc.Text = "";
                txtOCNumero.Text = "";

                // Inicializo datos Exportacion
                txtcontenedor.Text = "";
                txtprecinto.Text = "";

                string codmotivo = txtcodmotivo.Text.Trim();
                if (codmotivo.Equals("01") && codmotivo.Equals("04") && codmotivo.Equals("12"))
                {
                    switch (codmotivo)
                    {
                        case "01":
                            //Venta
                            txtTipoOCCod.Text = "V";
                            GlobalLogic.Instance.DameDescripcion("57" + txtTipoOCCod.Text.Trim(), "GLOTA", out descripcion);
                            txtTipoOCDesc.Text = descripcion;
                            txtOCNumero.Text = "";
                            txtOCNumero.Enabled = true;
                            break;

                            

                        case "04":
                            // Consignacion
                            txtTipoOCCod.Text = "C";
                            GlobalLogic.Instance.DameDescripcion("57" + txtTipoOCCod.Text.Trim(), "GLOTA", out descripcion);
                            txtTipoOCDesc.Text = descripcion;

                            txtOCNumero.Text = "";
                            txtOCNumero.Enabled = true;
                            break;
                        default:
                            //opcion  12

                            //3.Si el codigo de motivo es 12 -  exportacion
                            txtTipoOCCod.Text = "V";
                            GlobalLogic.Instance.DameDescripcion("57" + txtTipoOCCod.Text.Trim(), "GLOTA", out descripcion);
                            txtTipoOCDesc.Text = descripcion;
                            break;

                    }
                    if (txtrucdestino.Text.Trim() != "") {
                        txtClienteCod.Text = txtrucdestino.Text.Trim();
                        GlobalLogic.Instance.DameDescripcion(Logueo.CodigoEmpresa + Logueo.TipoAnalisisCliente + txtClienteCod.Text.Trim(), "CLIENTE", out ClienteDesc);
                        txtClienteDesc.Text = ClienteDesc;


                        GlobalLogic.Instance.DameDescripcion(Logueo.CodigoEmpresa + Logueo.TipoAnalisisCliente + txtClienteCod.Text.Trim(), "CLIENTEFLAGDESC", out ClienteFlagDescUsuario);
                        chkflagproveedor.Checked = ClienteFlagDescUsuario == "1" ? true : false;
                    }
                    

                }
                #region "codigo comentado por cambios para generar documentacion electronica"
                //if (txtcodmotivo.Text == "01") // Venta
                //{
                //    txtTipoOCCod.Text = "V";
                //    GlobalLogic.Instance.DameDescripcion("57" + txtTipoOCCod.Text.Trim(), "GLOTA", out descripcion);
                //    txtTipoOCDesc.Text = descripcion;

                //    txtClienteCod.Text = txtrucdestino.Text.Trim();
                //    GlobalLogic.Instance.DameDescripcion(Logueo.CodigoEmpresa + Logueo.TipoAnalisisCliente + txtClienteCod.Text.Trim(), "CLIENTE", out ClienteDesc);
                //    txtClienteDesc.Text = ClienteDesc;

                //    GlobalLogic.Instance.DameDescripcion(Logueo.CodigoEmpresa + Logueo.TipoAnalisisCliente + txtClienteCod.Text.Trim(), "CLIENTEFLAGDESC", out ClienteFlagDescUsuario);
                //    chkflagproveedor.Checked = ClienteFlagDescUsuario == "1" ? true : false;


                //    txtOCNumero.Text = "";
                //    txtOCNumero.Enabled = true;
                //}
                //else if (txtcodmotivo.Text == "04") // Consignacion
                //{
                //    txtTipoOCCod.Text = "C";
                //    GlobalLogic.Instance.DameDescripcion("57" + txtTipoOCCod.Text.Trim(), "GLOTA", out descripcion);
                //    txtTipoOCDesc.Text = descripcion;

                //    txtClienteCod.Text = txtrucdestino.Text.Trim();
                //    GlobalLogic.Instance.DameDescripcion(Logueo.CodigoEmpresa + Logueo.TipoAnalisisCliente + txtClienteCod.Text.Trim(), "CLIENTE", out ClienteDesc);
                //    txtClienteDesc.Text = ClienteDesc;

                //    GlobalLogic.Instance.DameDescripcion(Logueo.CodigoEmpresa + Logueo.TipoAnalisisCliente + txtClienteCod.Text.Trim(), "CLIENTEFLAGDESC", out ClienteFlagDescUsuario);
                //    chkflagproveedor.Checked = ClienteFlagDescUsuario == "1" ? true : false;

                //    txtOCNumero.Text = "";
                //    txtOCNumero.Enabled = true;
                //}

                ////3.Si el codigo de motivo es 12 -  exportacion
                //else if (txtcodmotivo.Text == "12")
                //{
                //    txtTipoOCCod.Text = "V";
                //    GlobalLogic.Instance.DameDescripcion("57" + txtTipoOCCod.Text.Trim(), "GLOTA", out descripcion);
                //    txtTipoOCDesc.Text = descripcion;


                //    txtClienteCod.Text = txtrucdestino.Text.Trim();
                //    GlobalLogic.Instance.DameDescripcion(Logueo.CodigoEmpresa + Logueo.TipoAnalisisCliente + txtClienteCod.Text.Trim(), "CLIENTE", out ClienteDesc);
                //    txtClienteDesc.Text = ClienteDesc;

                //    GlobalLogic.Instance.DameDescripcion(Logueo.CodigoEmpresa + Logueo.TipoAnalisisCliente + txtClienteCod.Text.Trim(), "CLIENTEFLAGDESC", out ClienteFlagDescUsuario);
                //    chkflagproveedor.Checked = ClienteFlagDescUsuario == "1" ? true : false;


                //}
                #endregion

            }
            //2.Si el campo de codigo de motivo esta en blanco
            else
            {

                //3.Limpiar la descripcion del motivo.
                txtmotivoDes.Text = "";
            }

        }

        
        
        private void txtcodorigen_TextChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtcodorigen.Text))
            {
                obtenerDescripcion(enmAyuda.enmEstablecimientos, "");
            }
            else
            {
                txtorigenDes.Text = "";
                txtOriDirPartida.Text = "";
            }
        }

        private void txtrucorigen_TextChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtrucorigen.Text))
            {
                obtenerDescripcion(enmAyuda.enmEmpresa, "");
            }
            else
            {
                txtrucorigenDes.Text = "";
                txtcodorigen.Text = "";
            }
        }

        private void txtestadoguia_TextChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtestadoguia.Text))
            {
                obtenerDescripcion(enmAyuda.enmEstados, "");
            }
            else
            {
                txtestadoguiaDes.Text = "";
            }
        }

        private void txtrucdestino_TextChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtrucdestino.Text))
            {
                obtenerDescripcion(enmAyuda.enmDestinatario, "");

                //string ClienteDesc = "";
                //string ClienteFlagDescUsuario = "";

                //txtClienteCod.Text = txtrucdestino.Text.Trim();
                //GlobalLogic.Instance.DameDescripcion(Logueo.CodigoEmpresa + Logueo.TipoAnalisisCliente + txtClienteCod.Text.Trim(), "CLIENTE", out ClienteDesc);
                //txtClienteDesc.Text = ClienteDesc;


                //GlobalLogic.Instance.DameDescripcion(Logueo.CodigoEmpresa + Logueo.TipoAnalisisCliente + txtClienteCod.Text.Trim(), "CLIENTEFLAGDESC", out ClienteFlagDescUsuario);
                //chkflagproveedor.Checked = ClienteFlagDescUsuario == "1" ? true : false;
            }
            else
            {
                txtrucdestinnoDes.Text = "";
                txtcoddestino.Text = "";
            }
        }



        #endregion

        private void btnAgregar_KeyUp(object sender, KeyEventArgs e)
        {
            //if (e.KeyValue == (char)Keys.Enter) {
            //    agregarProducto();
            //}
        }
        private void deshabilitarBotonProdDet(string nombre, GridCommandCellElement CommandCell)
        {
            GridCommandCellElement cellElement = CommandCell;
            switch (nombre)
            {
                case "btnGrabarDet":

                    cellElement.CommandButton.Image = Properties.Resources.save_disabled;
                    cellElement.CommandButton.ImageAlignment = ContentAlignment.MiddleCenter;
                    cellElement.CommandButton.Enabled = false;
                    break;
                case "btnCancelarDet":
                    cellElement.CommandButton.Image = Properties.Resources.cancel_disabled;

                    cellElement.CommandButton.ImageAlignment = ContentAlignment.MiddleCenter;
                    cellElement.CommandButton.Enabled = false;
                    break;
                case "btnEliminarDet":
                    cellElement.CommandButton.Image = Properties.Resources.delete_disabled;
                    cellElement.CommandButton.ImageAlignment = ContentAlignment.MiddleCenter;
                    cellElement.CommandButton.Enabled = false;
                    break;
                case "btnEditarDet":
                    cellElement.CommandButton.Image = Properties.Resources.edited_disabled;
                    cellElement.CommandButton.ImageAlignment = ContentAlignment.MiddleCenter;
                    cellElement.CommandButton.Enabled = false;
                    break;
                default:
                    break;
            }

        }
        private void habilitarBotonProdDet(string nombre, GridCommandCellElement CommandCell,
            bool bGrabar, bool bCancelar, bool bEliminar, bool bEditar)
        {
            GridCommandCellElement cellElement = CommandCell;
            switch (nombre)
            {
                case "btnGrabarDet":
                    cellElement.CommandButton.Image = bGrabar ? Properties.Resources.save_enabled : Properties.Resources.save_disabled;
                    cellElement.CommandButton.ImageAlignment = ContentAlignment.MiddleCenter;
                    cellElement.CommandButton.Enabled = bGrabar;
                    break;
                case "btnCancelarDet":
                    cellElement.CommandButton.Image = bCancelar ? Properties.Resources.cancel_enabled : Properties.Resources.cancel_disabled;
                    cellElement.CommandButton.ImageAlignment = ContentAlignment.MiddleCenter;
                    cellElement.CommandButton.Enabled = bCancelar;
                    break;

                case "btnEliminarDet":
                    cellElement.CommandButton.Image = bEliminar ? Properties.Resources.delete_enabled : Properties.Resources.delete_disabled;
                    cellElement.CommandButton.ImageAlignment = ContentAlignment.MiddleCenter;
                    cellElement.CommandButton.Enabled = bEliminar;
                    break;

                case "btnEditarDet":
                    cellElement.CommandButton.Image = bEditar ? Properties.Resources.edit_enabled : Properties.Resources.edited_disabled;
                    cellElement.CommandButton.ImageAlignment = ContentAlignment.MiddleCenter;
                    cellElement.CommandButton.Enabled = bEditar;
                    break;


                default:
                    break;
            }
        }

        private void gridControl_CellFormatting(object sender, CellFormattingEventArgs e)
        {
            try
            {
                GridCommandCellElement cellElement = e.CellElement as GridCommandCellElement;
                if (cellElement == null) return;

                if (e.CellElement.ColumnInfo is GridViewCommandColumn)
                {

                    RadButtonElement commandButton = ((RadButtonElement)((GridCommandCellElement)e.CellElement).Children[0]);

                    if (Estado == FormEstate.View) { deshabilitarBotonProdDet(e.Column.Name, cellElement); return; }




                    //if (gridControl.Rows[e.RowIndex].Cells["Orden"].Value == null) return;
                    if (e.RowIndex == -1) return;

                    //AGREGA LAS IMAGENES A LOS BOTONES DENTRO DE LA GRILLA
                    if (gridControl.Rows[e.RowIndex].Cells["Flag"].Value == null)
                    { habilitarBotonProdDet(e.Column.Name, cellElement, false, false, true, true); }
                    else { habilitarBotonProdDet(e.Column.Name, cellElement, true, true, false, false); }


                }
            }
            catch (Exception ex)
            {
                //Util.ShowError(ex.Message);
            }

        }


        private void gridControl_CommandCellClick(object sender, EventArgs e)
        {
            if (this.gridControl.Columns["btnGrabarDet"].IsCurrent)
            {
                GuardarDetalle();
            }
            if (this.gridControl.Columns["btnEditarDet"].IsCurrent)
            {
                EditarDetalle();
            }

            if (this.gridControl.Columns["btnEliminarDet"].IsCurrent)
            {
                EliminarDetalle();
            }
            if (this.gridControl.Columns["btnCancelarDet"].IsCurrent)
            {
                CancelarDetalle();
            }
        }

        private void gridControl_CurrentCellChanged(object sender, CurrentCellChangedEventArgs e)
        {
            //Metodo para activar la edicion soibre cualquier columna posicionado
            string str_ColumnName = gridControl.CurrentColumn.Name;
            Util.SetCellInitEdit(gridControl, str_ColumnName);
        }

        private void gridControl_KeyUp(object sender, KeyEventArgs e)
        {
            //if (gridControl.Rows.Count == 0) return;
            //if (e.KeyValue == (char)Keys.Enter)
            //    SendKeys.Send("{TAB}");
            if (e.KeyValue == (char)Keys.Enter)
                //Si mi columna enfocada es grabar detalle
                if (this.gridControl.CurrentColumn.Name ==
                    this.gridControl.Columns["btnGrabarDet"].Name) GuardarDetalle(this.gridControl.CurrentRow);
        }
        #region "Dar baja guia de remision"
        private void btnAceptarAnular_Click(object sender, EventArgs e)
        {
            try
            {
                int int_flag = 0; string str_mensaje = "";
                string numeroDeGuia = txtserie.Text.Trim() + "-" + txtnrodocumento.Text.Trim();
                string tipoDoc = txttipdoc.Text.Trim();
                string fechaTexto = dtpFechaBaja.Text.Trim();
                string motivoBaja = txtMotivoBaja.Text.Trim();
                Fac_GuiaTransporteLogic.Instance.DarBajaGuiaRemision(Logueo.CodigoEmpresa, tipoDoc, numeroDeGuia,
                fechaTexto, motivoBaja, out int_flag, out str_mensaje);

                if (int_flag == 1)
                {
                    Util.ShowMessage(str_mensaje, int_flag);
                    OcultarDarBajaGuiaRemision();
                    cargarGuia();

                    //Refresca la grilla donde listo las guias de transporte.
                    FrmParent.Oncargar();
                }
            }
            catch (Exception ex)
            {
                Util.ShowError(ex.Message);
            }


        }
        private void OcultarDarBajaGuiaRemision()
        {
            rgpAnularGuiaRemision.SendToBack();
            rgpAnularGuiaRemision.Visible = false;
            txtMotivoBaja.Text = "";
            dtpFechaBaja.Value = DateTime.Now;



        }
        private void MostrarDarBajaGuiaRemision()
        {
            //ver popup de motivo de baja
            dtpFechaBaja.Focus();
            dtpFechaBaja.Value = DateTime.Now;
            this.rgpAnularGuiaRemision.BringToFront();
            this.rgpAnularGuiaRemision.Visible = true;
            txtMotivoBaja.Enabled = true;

        }
        private void btnCancelarAnular_Click(object sender, EventArgs e)
        {
            OcultarDarBajaGuiaRemision();
        }
        #endregion

        private void txtAyudaUnidad_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == (char)Keys.F1)
            {
                cmdHelp_Click(enmAyuda.enmUniMedGuia);
                // obtenerDescripcion(enmAyuda.enmUniMedGuia,"");
            }
        }

        private void BtnCancelar_Click(object sender, EventArgs e)
        {
            ContainerPeso.Hide();
        }

        private void BtnGuardar_Click(object sender, EventArgs e)
        {

            try
            {
                string GuiaCodigo = txtserie.Text + "-" + txtnrodocumento.Text;
                var lista = Fac_GuiaTransporteLogic.Instance.TraerGuiasTransporte(Logueo.CodigoEmpresa,
                     Logueo.Anio, Logueo.Mes, "FAC34NROGUIA", GuiaCodigo);
                //SP PARA ACTUALIZAR EL PESO 
                GuiaTransporte guia = lista[0];
                int flag = 0;
                if (txtCantidadPeso.Text == "" || txtAyudaDesc.Text == "")
                {
                    Util.ShowError("ERROR:: Ingrese una unidad de medida y peso");
                    return;
                }
                decimal cantidad = Convert.ToDecimal(txtCantidadPeso.Text);

                string msj = "";

                Efact_GuiaLogic.Instance.Spu_Fact_Upd_GuiaRemisionPesoBruto(Logueo.CodigoEmpresa, guia.FAC01COD, guia.FAC34NROGUIA, txtAyudaDesc.Text, cantidad, out flag, out msj);
                if (flag == 1)
                {
                    Actualizar_CantidadUnidadMedida(guia.FAC34NROGUIA);
                    ContainerPeso.Hide();
                    txtAyudaUnidad.Text = "";
                    txtAyudaDesc.Text = "";
                    txtCantidadPeso.Text = "";

                    cargarEntidad();
                    //txtCantidad.Text = lista[0].FAC34PESOCANTIDAD.ToString();
                    //txtUnidadMed.Text = lista[0].FAC34PESOUNIMED;
                    FrmParent.Oncargar();
                }
                Util.ShowMessage(msj, flag);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error :: " + ex);
            }

        }
        public void Actualizar_CantidadUnidadMedida(string nrodoc)
        {
            try
            {
                //LISTAR LA FACTURA DETALLE 
                var lista = Fac_GuiaTransporteLogic.Instance.TraerGuiasTransporte(Logueo.CodigoEmpresa,
                     Logueo.Anio, Logueo.Mes, "FAC34NROGUIA", nrodoc);
                GuiaTransporte guia = lista[0];

                //SP PARA ACTUALIZAR 
                string FAC34PESOUNIMED;
                decimal FAC34PESOCANTIDAD;
                DataTable dt = Efact_GuiaLogic.Instance.Spu_Fact_Trae_GuiaRemisionPesoBruto(Logueo.CodigoEmpresa, guia.FAC01COD, guia.FAC34NROGUIA, out FAC34PESOUNIMED, out FAC34PESOCANTIDAD);
                txtCantidad.Text = dt.Rows[0]["FAC34PESOCANTIDAD"].ToString();
                txtUnidadMed.Text = dt.Rows[0]["FAC34PESOUNIMED"].ToString();
            }
            catch (Exception ex)
            {
                MessageBox.Show("===> " + ex);
            }
        }

        private void btnAgregarReferencial_Click(object sender, EventArgs e)
        {
            AgregarFilaReferencial();
            btnAgregarReferencial.Visible = false;

        }

        private void gridreferencial_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (Util.IsCurrentColumn(gridreferencial.CurrentColumn, "FAC90DOCRELNUMERO"))
                {
                    btnAgregarReferencial.Visible = true;
                }
            }
            if (e.KeyCode == Keys.F1)
            {


                string datos = "";
                frmBusqueda frm;

                if (Util.IsCurrentColumn(gridreferencial.CurrentColumn, "FAC90COD"))
                {

                    frm = new frmBusqueda(enmAyuda.enmCatalogo61);
                    frm.ShowDialog();
                    if (frm.Result == null) return;
                    if (frm.Result.ToString() == "") return;
                    string NroTipoComprobante = frm.Result.ToString().Split('|')[0];
                    string DescripcionTipoComprobante = frm.Result.ToString().Split('|')[1];
                    Util.SetValueCurrentCellText(gridreferencial.CurrentRow, "FAC90COD", NroTipoComprobante);
                    Util.SetValueCurrentCellText(gridreferencial.CurrentRow, "Descripcion", DescripcionTipoComprobante);
                    //codigoUnidadMedida = frm.Result.ToString().Split('|')[0];
                    //Util.SetValueCurrentCellText(gridControl.CurrentRow, "FAC35UNIMED", codigoUnidadMedida);
                }
            }
        }

        private void gridreferencial_CellFormatting(object sender, CellFormattingEventArgs e)
        {
            try
            {
                GridCommandCellElement cellElement = e.CellElement as GridCommandCellElement;
                if (cellElement == null) return;

                if (e.CellElement.ColumnInfo is GridViewCommandColumn)
                {

                    RadButtonElement commandButton = ((RadButtonElement)((GridCommandCellElement)e.CellElement).Children[0]);

                    if (Estado == FormEstate.View) { deshabilitarBotonProdDet(e.Column.Name, cellElement); return; }

                    //if (gridreferencial.Rows[e.RowIndex].Cells["Orden"].Value == null) return;
                    if (e.RowIndex == -1) return;

                    //AGREGA LAS IMAGENES A LOS BOTONES DENTRO DE LA GRILLA
                    if (gridreferencial.Rows[e.RowIndex].Cells["Flag"].Value == null)
                    { habilitarBotonProdDet(e.Column.Name, cellElement, true, true, true, false); }
                    else { habilitarBotonProdDet(e.Column.Name, cellElement, true, true, true, false); }


                }
            }
            catch (Exception ex)
            {
                //Util.ShowError(ex.Message);
            }

        }
        private void GuardarDocumentoReferen()
        {
            try
            {
                GridViewRowInfo info = gridreferencial.CurrentRow;
                string[] nrodocumentos = new string[this.gridreferencial.SelectedRows.Count];
                //OBTENGO LOS DATOS DE LA GRILLA
                string Comprobante = info.Cells["FAC90COD"].Value.ToString();
                string NroComprobante = info.Cells["FAC90DOCRELNUMERO"].Value.ToString();
                // string FechaEmision = info.Cells["Fecha Emision"].Value.ToString();
                btnAgregarReferencial.Visible = true;
                //gridreferencial.Rows.Add(null, null, null);
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR ==> " + ex);
            }
        }

        private void EliminarDocumentoReferen()
        {
            btnAgregarReferencial.Visible = true;
            GridViewRowInfo fila = gridreferencial.CurrentRow;
            gridreferencial.Rows.Remove(fila);

        }
        private void gridreferencial_CommandCellClick(object sender, EventArgs e)
        {
            if (this.gridreferencial.Columns["btnEliminarDet"].IsCurrent)
            {

                EliminarDocumentoReferen();
            }

        }

        private void btnModificarPeso_Click(object sender, EventArgs e)
        {
           
            ContainerPeso.Show();
            Util.ResaltarAyuda(txtAyudaUnidad);
        }

        private void btnCerrarProv_Click(object sender, EventArgs e)
        {
            try 
            {
                PopupProveedor.Visible = false;
                gridreferencial.Visible = true;
                btnAgregarReferencial.Visible = true;
                radLabel35.Visible = true;
            }catch(Exception ex)
            {
                Util.ShowError("ERROR POPUP PROVEEDOR");
            }
        }

        private void txtrucdestino_Leave(object sender, EventArgs e)
        {
            string codmotivo = txtcodmotivo.Text.Trim();
            if (codmotivo.Equals("01") || codmotivo.Equals("04") || codmotivo.Equals("12"))
            {
                if (!string.IsNullOrEmpty(txtrucdestino.Text))
                {
                    obtenerDescripcion(enmAyuda.enmDestinatario, "");

                    string ClienteDesc = "";
                    string ClienteFlagDescUsuario = "";

                    txtClienteCod.Text = txtrucdestino.Text.Trim();
                    GlobalLogic.Instance.DameDescripcion(Logueo.CodigoEmpresa + Logueo.TipoAnalisisCliente + txtClienteCod.Text.Trim(), "CLIENTE", out ClienteDesc);
                    txtClienteDesc.Text = ClienteDesc;


                    GlobalLogic.Instance.DameDescripcion(Logueo.CodigoEmpresa + Logueo.TipoAnalisisCliente + txtClienteCod.Text.Trim(), "CLIENTEFLAGDESC", out ClienteFlagDescUsuario);
                    chkflagproveedor.Checked = ClienteFlagDescUsuario == "1" ? true : false;
                }
                else
                {
                    txtrucdestinnoDes.Text = "";
                    txtcoddestino.Text = "";
                }
            }

        }

        private void txtrucdestinnoDes_TextChanged(object sender, EventArgs e)
        {

        }

        private void rButtonProveedor_Click(object sender, EventArgs e)
        {
            try 
            {
                PopupProveedor.Visible = false; 
                gridreferencial.Visible = true;
                radLabel35.Visible = true;
                btnAgregarReferencial.Visible = true;

            }catch(Exception ex )
            {
                Util.ShowError("ERROR Boton de proveedor");
            }
        }

    }
}